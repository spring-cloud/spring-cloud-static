<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Spring Cloud</title>
<date>2018-06-19</date>
</info>
<preface>
<title></title>
<simpara>Spring Cloud provides tools for developers to quickly build some of
the common patterns in distributed systems (e.g. configuration
management, service discovery, circuit breakers, intelligent routing,
micro-proxy, control bus). Coordination of
distributed systems leads to boiler plate patterns, and using Spring
Cloud developers can quickly stand up services and applications that
implement those patterns. They will work well in any distributed
environment, including the developer&#8217;s own laptop, bare metal data
centres, and managed platforms such as Cloud Foundry.</simpara>
<simpara>Version: Finchley.RELEASE</simpara>
</preface>
<chapter xml:id="_features">
<title>Features</title>
<simpara>Spring Cloud focuses on providing good out of box experience for typical use cases
and extensibility mechanism to cover others.</simpara>
<itemizedlist>
<listitem>
<simpara>Distributed/versioned configuration</simpara>
</listitem>
<listitem>
<simpara>Service registration and discovery</simpara>
</listitem>
<listitem>
<simpara>Routing</simpara>
</listitem>
<listitem>
<simpara>Service-to-service calls</simpara>
</listitem>
<listitem>
<simpara>Load balancing</simpara>
</listitem>
<listitem>
<simpara>Circuit Breakers</simpara>
</listitem>
<listitem>
<simpara>Distributed messaging</simpara>
</listitem>
</itemizedlist>
</chapter>
<part xml:id="_cloud_native_applications">
<title>Cloud Native Applications</title>
<partintro>
<simpara><link xl:href="https://pivotal.io/platform-as-a-service/migrating-to-cloud-native-application-architectures-ebook">Cloud Native</link> is a style of application development that encourages easy adoption of best practices in the areas of continuous delivery and value-driven development.
A related discipline is that of building <link xl:href="https://12factor.net/">12-factor Applications</link>, in which development practices are aligned with delivery and operations goals&#8201;&#8212;&#8201;for instance, by using declarative programming and management and monitoring.
Spring Cloud facilitates these styles of development in a number of specific ways.
 The starting point is a set of features to which all components in a distributed system need easy access.</simpara>
<simpara>Many of those features are covered by <link xl:href="https://projects.spring.io/spring-boot">Spring Boot</link>, on which Spring Cloud builds. Some more features are delivered by Spring Cloud as two libraries: Spring Cloud Context and Spring Cloud Commons.
Spring Cloud Context provides utilities and special services for the <literal>ApplicationContext</literal> of a Spring Cloud application (bootstrap context, encryption, refresh scope, and environment endpoints). Spring Cloud Commons is a set of abstractions and common classes used in different Spring Cloud implementations (such as Spring Cloud Netflix and Spring Cloud Consul).</simpara>
<simpara>If you get an exception due to "Illegal key size" and you use Sun&#8217;s JDK, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files.
See the following links for more information:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html">Java 6 JCE</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html">Java 7 JCE</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java 8 JCE</link></simpara>
</listitem>
</itemizedlist>
<simpara>Extract the files into the JDK/jre/lib/security folder for whichever version of JRE/JDK x64/x86 you use.</simpara>
<note>
<simpara>Spring Cloud is released under the non-restrictive Apache 2.0 license.
If you would like to contribute to this section of the documentation or if you find an error, you can find the source code and issue trackers for the project at <link xl:href="https://github.com/spring-cloud/spring-cloud-commons/tree/master/docs/src/main/asciidoc">github</link>.</simpara>
</note>
</partintro>
<chapter xml:id="_spring_cloud_context_application_context_services">
<title>Spring Cloud Context: Application Context Services</title>
<simpara>Spring Boot has an opinionated view of how to build an application with Spring.
For instance, it has conventional locations for common configuration files and has endpoints for common management and monitoring tasks.
Spring Cloud builds on top of that and adds a few features that probably all components in a system would use or occasionally need.</simpara>
<section xml:id="_the_bootstrap_application_context">
<title>The Bootstrap Application Context</title>
<simpara>A Spring Cloud application operates by creating a &#8220;bootstrap&#8221; context, which is a parent context for the main application.
It is responsible for loading configuration properties from the external sources and for decrypting properties in the local external configuration files.
The two contexts share an <literal>Environment</literal>, which is the source of external properties for any Spring application.
By default, bootstrap properties (not <literal>bootstrap.properties</literal> but properties that are loaded during the bootstrap phase) are added with high precedence, so they cannot be overridden by local configuration.</simpara>
<simpara>The bootstrap context uses a different convention for locating external configuration than the main application context.
Instead of <literal>application.yml</literal> (or <literal>.properties</literal>), you can use <literal>bootstrap.yml</literal>, keeping the external configuration for bootstrap and main context
nicely separate.
The following listing shows an example:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<screen>spring:
  application:
    name: foo
  cloud:
    config:
      uri: ${SPRING_CONFIG_URI:http://localhost:8888}</screen>
</para>
</formalpara>
<simpara>If your application needs any application-specific configuration from the server, it is a good idea to set the <literal>spring.application.name</literal> (in <literal>bootstrap.yml</literal> or <literal>application.yml</literal>).</simpara>
<simpara>You can disable the bootstrap process completely by setting <literal>spring.cloud.bootstrap.enabled=false</literal> (for example, in system properties).</simpara>
</section>
<section xml:id="_application_context_hierarchies">
<title>Application Context Hierarchies</title>
<simpara>If you build an application context from <literal>SpringApplication</literal> or <literal>SpringApplicationBuilder</literal>, then the Bootstrap context is added as a parent to that context.
It is a feature of Spring that child contexts inherit property sources and profiles from their parent, so the &#8220;main&#8221; application context contains additional property sources, compared to building the same context without Spring Cloud Config.
The additional property sources are:</simpara>
<itemizedlist>
<listitem>
<simpara>&#8220;bootstrap&#8221;: If any <literal>PropertySourceLocators</literal> are found in the Bootstrap context and if they have non-empty properties, an optional <literal>CompositePropertySource</literal> appears with high priority.
An example would be properties from the Spring Cloud Config Server.
See &#8220;<xref linkend="customizing-bootstrap-property-sources"/>&#8221; for instructions on how to customize the contents of this property source.</simpara>
</listitem>
<listitem>
<simpara>&#8220;applicationConfig: [classpath:bootstrap.yml]&#8221; (and related files if Spring profiles are active): If you have a <literal>bootstrap.yml</literal> (or <literal>.properties</literal>), those properties are used to configure the Bootstrap context.
Then they get added to the child context when its parent is set.
They have lower precedence than the <literal>application.yml</literal> (or <literal>.properties</literal>) and any other property sources that are added to the child as a normal part of the process of creating a Spring Boot application.
See &#8220;<xref linkend="customizing-bootstrap-properties"/>&#8221; for instructions on how to customize the contents of these property sources.</simpara>
</listitem>
</itemizedlist>
<simpara>Because of the ordering rules of property sources, the &#8220;bootstrap&#8221; entries take precedence.
However, note that these do not contain any data from <literal>bootstrap.yml</literal>, which has very low precedence but can be used to set defaults.</simpara>
<simpara>You can extend the context hierarchy by setting the parent context of any <literal>ApplicationContext</literal> you create&#8201;&#8212;&#8201;for example, by using its own interface or with the <literal>SpringApplicationBuilder</literal> convenience methods (<literal>parent()</literal>, <literal>child()</literal> and <literal>sibling()</literal>).
The bootstrap context is the parent of the most senior ancestor that you create yourself.
Every context in the hierarchy has its own &#8220;bootstrap&#8221; (possibly empty) property source to avoid promoting values inadvertently from parents down to their descendants.
If there is a Config Server, every context in the hierarchy can also (in principle) have a different <literal>spring.application.name</literal> and, hence, a different remote property source.
Normal Spring application context behavior rules apply to property resolution: properties from a child context override those in
the parent, by name and also by property source name.
(If the child has a property source with the same name as the parent, the value from the parent is not included in the child).</simpara>
<simpara>Note that the <literal>SpringApplicationBuilder</literal> lets you share an <literal>Environment</literal> amongst the whole hierarchy, but that is not the default.
Thus, sibling contexts, in particular, do not need to have the same profiles or property sources, even though they may share common values with their parent.</simpara>
</section>
<section xml:id="customizing-bootstrap-properties">
<title>Changing the Location of Bootstrap Properties</title>
<simpara>The <literal>bootstrap.yml</literal> (or <literal>.properties</literal>) location can be specified by setting <literal>spring.cloud.bootstrap.name</literal> (default: <literal>bootstrap</literal>) or <literal>spring.cloud.bootstrap.location</literal> (default: empty)&#8201;&#8212;&#8201;for example, in System properties.
Those properties behave like the <literal>spring.config.*</literal> variants with the same name.
In fact, they are used to set up the bootstrap <literal>ApplicationContext</literal> by setting those properties in its <literal>Environment</literal>.
If there is an active profile (from <literal>spring.profiles.active</literal> or through the <literal>Environment</literal> API in the
context you are building), properties in that profile get loaded as well, the same as in a regular Spring Boot app&#8201;&#8212;&#8201;for example, from <literal>bootstrap-development.properties</literal> for a <literal>development</literal> profile.</simpara>
</section>
<section xml:id="overriding-bootstrap-properties">
<title>Overriding the Values of Remote Properties</title>
<simpara>The property sources that are added to your application by the bootstrap context are often &#8220;remote&#8221; (from example, from Spring Cloud Config Server).
By default, they cannot be overridden locally.
If you want to let your applications override the remote properties with their own System properties or config files, the remote property source has to grant it permission by setting <literal>spring.cloud.config.allowOverride=true</literal> (it does not work to set this locally).
Once that flag is set, two finer-grained settings control the location of the remote properties in relation to system properties and the application&#8217;s local configuration:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>spring.cloud.config.overrideNone=true</literal>: Override from any local property source.</simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.config.overrideSystemProperties=false</literal>: Only system properties, command line arguments, and environment variables (but not the local config files) should override the remote settings.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_customizing_the_bootstrap_configuration">
<title>Customizing the Bootstrap Configuration</title>
<simpara>The bootstrap context can be set to do anything you like by adding entries to <literal>/META-INF/spring.factories</literal> under a key named <literal>org.springframework.cloud.bootstrap.BootstrapConfiguration</literal>.
This holds a comma-separated list of Spring <literal>@Configuration</literal> classes that are used to create the context.
Any beans that you want to be available to the main application context for autowiring can be created here.
There is a special contract for <literal>@Beans</literal> of type <literal>ApplicationContextInitializer</literal>.
If you want to control the startup sequence, classes can be marked with an <literal>@Order</literal> annotation (the default order is <literal>last</literal>).</simpara>
<warning>
<simpara>When adding custom <literal>BootstrapConfiguration</literal>, be careful that the classes you add are not <literal>@ComponentScanned</literal> by mistake into your &#8220;main&#8221; application context, where they might not be needed.
Use a separate package name for boot configuration classes and make sure that name is not already covered by your <literal>@ComponentScan</literal> or <literal>@SpringBootApplication</literal> annotated configuration classes.</simpara>
</warning>
<simpara>The bootstrap process ends by injecting initializers into the main <literal>SpringApplication</literal> instance (which is the normal Spring Boot startup sequence, whether it is running as a standalone application or deployed in an application server).
First, a bootstrap context is created from the classes found in <literal>spring.factories</literal>.
Then, all <literal>@Beans</literal> of type <literal>ApplicationContextInitializer</literal> are added to the main <literal>SpringApplication</literal> before it is started.</simpara>
</section>
<section xml:id="customizing-bootstrap-property-sources">
<title>Customizing the Bootstrap Property Sources</title>
<simpara>The default property source for external configuration added by the bootstrap process is the Spring Cloud Config Server, but you can add additional sources by adding beans of type <literal>PropertySourceLocator</literal> to the bootstrap context (through <literal>spring.factories</literal>).
For instance, you can insert additional properties from a different server or from a database.</simpara>
<simpara>As an example, consider the following custom locator:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class CustomPropertySourceLocator implements PropertySourceLocator {

    @Override
    public PropertySource&lt;?&gt; locate(Environment environment) {
        return new MapPropertySource("customProperty",
                Collections.&lt;String, Object&gt;singletonMap("property.from.sample.custom.source", "worked as intended"));
    }

}</programlisting>
<simpara>The <literal>Environment</literal> that is passed in is the one for the <literal>ApplicationContext</literal> about to be created&#8201;&#8212;&#8201;in other words, the one for which we supply additional property sources for.
It already has its normal Spring Boot-provided property sources, so you can use those to locate a property source specific to this <literal>Environment</literal> (for example, by keying it on <literal>spring.application.name</literal>, as is done in the default Spring Cloud Config Server property source locator).</simpara>
<simpara>If you create a jar with this class in it and then add a <literal>META-INF/spring.factories</literal> containing the following, the <literal>customProperty</literal> <literal>PropertySource</literal> appears in any application that includes that jar on its classpath:</simpara>
<screen>org.springframework.cloud.bootstrap.BootstrapConfiguration=sample.custom.CustomPropertySourceLocator</screen>
</section>
<section xml:id="_logging_configuration">
<title>Logging Configuration</title>
<simpara>If you are going to use Spring Boot to configure log settings than
you should place this configuration in `bootstrap.[yml | properties]
if you would like it to apply to all events.</simpara>
</section>
<section xml:id="_environment_changes">
<title>Environment Changes</title>
<simpara>The application listens for an <literal>EnvironmentChangeEvent</literal> and reacts to the change in a couple of standard ways (additional <literal>ApplicationListeners</literal> can be added as <literal>@Beans</literal> by the user in the normal way).
When an <literal>EnvironmentChangeEvent</literal> is observed, it has a list of key values that have changed, and the application uses those to:</simpara>
<itemizedlist>
<listitem>
<simpara>Re-bind any <literal>@ConfigurationProperties</literal> beans in the context</simpara>
</listitem>
<listitem>
<simpara>Set the logger levels for any properties in <literal>logging.level.*</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Note that the Config Client does not, by default, poll for changes in the <literal>Environment</literal>.
Generally, we would not recommend that approach for detecting changes (although you could set it up with a
<literal>@Scheduled</literal> annotation).
If you have a scaled-out client application, it is better to broadcast the <literal>EnvironmentChangeEvent</literal> to all the instances instead of having them polling for changes (for example, by using the <link xl:href="https://github.com/spring-cloud/spring-cloud-bus">Spring Cloud Bus</link>).</simpara>
<simpara>The <literal>EnvironmentChangeEvent</literal> covers a large class of refresh use cases, as long as you can actually make a change to the <literal>Environment</literal> and publish the event.
Note that those APIs are public and part of core Spring).
You can verify that the changes are bound to <literal>@ConfigurationProperties</literal> beans by visiting the <literal>/configprops</literal> endpoint (a normal Spring Boot Actuator feature).
For instance, a <literal>DataSource</literal> can have its <literal>maxPoolSize</literal> changed at runtime (the default <literal>DataSource</literal> created by Spring Boot is an <literal>@ConfigurationProperties</literal> bean) and grow capacity dynamically.
Re-binding <literal>@ConfigurationProperties</literal> does not cover another large class of use cases, where you need more control over the refresh and where you need a change to be atomic over the whole <literal>ApplicationContext</literal>.
To address those concerns, we have <literal>@RefreshScope</literal>.</simpara>
</section>
<section xml:id="refresh-scope">
<title>Refresh Scope</title>
<simpara>When there is a configuration change, a Spring <literal>@Bean</literal> that is marked as <literal>@RefreshScope</literal> gets special treatment.
This feature addresses the problem of stateful beans that only get their configuration injected when they are initialized.
For instance, if a <literal>DataSource</literal> has open connections when the database URL is changed via the <literal>Environment</literal>, you probably want the holders of those connections to be able to complete what they are doing.
Then, the next time something borrows a connection from the pool, it gets one with the new URL.</simpara>
<simpara>Sometimes, it might even be mandatory to apply the <literal>@RefreshScope</literal>
annotation on some beans which can be only initialized once. If a bean
is "immutable", you will have to either annotate the bean with <literal>@RefreshScope</literal>
or specify the classname under the property key
<literal>spring.cloud.refresh.extra-refreshable</literal>.</simpara>
<simpara>Refresh scope beans are lazy proxies that initialize when they are used (that is, when a method is called), and the scope acts as a cache of initialized values.
To force a bean to re-initialize on the next method call, you must invalidate its cache entry.</simpara>
<simpara>The <literal>RefreshScope</literal> is a bean in the context and has a public  <literal>refreshAll()</literal> method to refresh all beans in the scope by clearing the target cache.
The <literal>/refresh</literal> endpoint exposes this functionality (over HTTP or JMX).
To refresh an individual bean by name, there is also a <literal>refresh(String)</literal> method.</simpara>
<simpara>To expose the <literal>/refresh</literal> endpoint, you need to add following configuration to your application:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">management:
  endpoints:
    web:
      exposure:
        include: refresh</programlisting>
<note>
<simpara><literal>@RefreshScope</literal> works (technically) on an <literal>@Configuration</literal> class, but it might lead to surprising behavior.
For example, it does not mean that all the <literal>@Beans</literal> defined in that class are themselves in <literal>@RefreshScope</literal>.
Specifically, anything that depends on those beans cannot rely on them being updated when a refresh is initiated, unless it is itself in <literal>@RefreshScope</literal>.
In that case, it is rebuilt on a refresh and its dependencies are re-injected. At that point, they are re-initialized from the refreshed <literal>@Configuration</literal>).</simpara>
</note>
</section>
<section xml:id="_encryption_and_decryption">
<title>Encryption and Decryption</title>
<simpara>Spring Cloud has an <literal>Environment</literal> pre-processor for decrypting property values locally.
It follows the same rules as the Config Server and has the same external configuration through <literal>encrypt.*</literal>.
Thus, you can use encrypted values in the form of <literal>{cipher}*</literal> and, as long as there is a valid key, they are decrypted before the main application context gets the <literal>Environment</literal> settings.
To use the encryption features in an application, you need to include Spring Security RSA in your classpath (Maven co-ordinates: "org.springframework.security:spring-security-rsa"), and you also need the full strength JCE extensions in your JVM.</simpara>
<simpara>If you get an exception due to "Illegal key size" and you use Sun&#8217;s JDK, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files.
See the following links for more information:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html">Java 6 JCE</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html">Java 7 JCE</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html">Java 8 JCE</link></simpara>
</listitem>
</itemizedlist>
<simpara>Extract the files into the JDK/jre/lib/security folder for whichever version of JRE/JDK x64/x86 you use.</simpara>
</section>
<section xml:id="_endpoints">
<title>Endpoints</title>
<simpara>For a Spring Boot Actuator application, some additional management endpoints are available. You can use:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>POST</literal> to <literal>/actuator/env</literal> to update the <literal>Environment</literal> and rebind <literal>@ConfigurationProperties</literal> and log levels.</simpara>
</listitem>
<listitem>
<simpara><literal>/actuator/refresh</literal> to re-load the boot strap context and refresh the <literal>@RefreshScope</literal> beans.</simpara>
</listitem>
<listitem>
<simpara><literal>/actuator/restart</literal> to close the <literal>ApplicationContext</literal> and restart it (disabled by default).</simpara>
</listitem>
<listitem>
<simpara><literal>/actuator/pause</literal> and <literal>/actuator/resume</literal> for calling the <literal>Lifecycle</literal> methods (<literal>stop()</literal> and <literal>start()</literal> on the <literal>ApplicationContext</literal>).</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>If you disable the <literal>/actuator/restart</literal> endpoint then the <literal>/actuator/pause</literal> and <literal>/actuator/resume</literal> endpoints
will also be disabled since they are just a special case of <literal>/actuator/restart</literal>.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="_spring_cloud_commons_common_abstractions">
<title>Spring Cloud Commons: Common Abstractions</title>
<simpara>Patterns such as service discovery, load balancing, and circuit breakers lend themselves to a common abstraction layer that can be consumed by all Spring Cloud clients, independent of the implementation (for example, discovery with Eureka or Consul).</simpara>
<section xml:id="__enablediscoveryclient">
<title>@EnableDiscoveryClient</title>
<simpara>Spring Cloud Commons provides the <literal>@EnableDiscoveryClient</literal> annotation.
This looks for implementations of the <literal>DiscoveryClient</literal> interface with <literal>META-INF/spring.factories</literal>.
Implementations of the Discovery Client add a configuration class to <literal>spring.factories</literal> under the <literal>org.springframework.cloud.client.discovery.EnableDiscoveryClient</literal> key.
Examples of <literal>DiscoveryClient</literal> implementations include <link xl:href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix Eureka</link>, <link xl:href="https://cloud.spring.io/spring-cloud-consul/">Spring Cloud Consul Discovery</link>, and <link xl:href="https://cloud.spring.io/spring-cloud-zookeeper/">Spring Cloud Zookeeper Discovery</link>.</simpara>
<simpara>By default, implementations of <literal>DiscoveryClient</literal> auto-register the local Spring Boot server with the remote discovery server.
This behavior can be disabled by setting <literal>autoRegister=false</literal> in <literal>@EnableDiscoveryClient</literal>.</simpara>
<note>
<simpara><literal>@EnableDiscoveryClient</literal> is no longer required.
You can put a <literal>DiscoveryClient</literal> implementation on the classpath to cause the Spring Boot application to register with the service discovery server.</simpara>
</note>
<section xml:id="_health_indicator">
<title>Health Indicator</title>
<simpara>Commons creates a Spring Boot <literal>HealthIndicator</literal> that <literal>DiscoveryClient</literal> implementations can participate in by implementing <literal>DiscoveryHealthIndicator</literal>.
To disable the composite <literal>HealthIndicator</literal>, set <literal>spring.cloud.discovery.client.composite-indicator.enabled=false</literal>.
A generic <literal>HealthIndicator</literal> based on <literal>DiscoveryClient</literal> is auto-configured (<literal>DiscoveryClientHealthIndicator</literal>).
To disable it, set <literal>spring.cloud.discovery.client.health-indicator.enabled=false</literal>.
To disable the description field of the <literal>DiscoveryClientHealthIndicator</literal>, set <literal>spring.cloud.discovery.client.health-indicator.include-description=false</literal>.
Otherwise, it can bubble up as the <literal>description</literal> of the rolled up <literal>HealthIndicator</literal>.</simpara>
</section>
</section>
<section xml:id="_serviceregistry">
<title>ServiceRegistry</title>
<simpara>Commons now provides a <literal>ServiceRegistry</literal> interface that provides methods such as <literal>register(Registration)</literal> and <literal>deregister(Registration)</literal>, which let you provide custom registered services.
<literal>Registration</literal> is a marker interface.</simpara>
<simpara>The following example shows the <literal>ServiceRegistry</literal> in use:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
@EnableDiscoveryClient(autoRegister=false)
public class MyConfiguration {
    private ServiceRegistry registry;

    public MyConfiguration(ServiceRegistry registry) {
        this.registry = registry;
    }

    // called through some external process, such as an event or a custom actuator endpoint
    public void register() {
        Registration registration = constructRegistration();
        this.registry.register(registration);
    }
}</programlisting>
<simpara>Each <literal>ServiceRegistry</literal> implementation has its own <literal>Registry</literal> implementation.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ZookeeperRegistration</literal> used with <literal>ZookeeperServiceRegistry</literal></simpara>
</listitem>
<listitem>
<simpara><literal>EurekaRegistration</literal> used with <literal>EurekaServiceRegistry</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ConsulRegistration</literal> used with <literal>ConsulServiceRegistry</literal></simpara>
</listitem>
</itemizedlist>
<simpara>If you are using the <literal>ServiceRegistry</literal> interface, you are going to need to pass the
correct <literal>Registry</literal> implementation for the <literal>ServiceRegistry</literal> implementation you
are using.</simpara>
<section xml:id="_serviceregistry_auto_registration">
<title>ServiceRegistry Auto-Registration</title>
<simpara>By default, the <literal>ServiceRegistry</literal> implementation auto-registers the running service.
To disable that behavior, you can set:
* <literal>@EnableDiscoveryClient(autoRegister=false)</literal> to permanently disable auto-registration.
* <literal>spring.cloud.service-registry.auto-registration.enabled=false</literal> to disable the behavior through configuration.</simpara>
</section>
<section xml:id="_service_registry_actuator_endpoint">
<title>Service Registry Actuator Endpoint</title>
<simpara>Spring Cloud Commons provides a <literal>/service-registry</literal> actuator endpoint.
This endpoint relies on a <literal>Registration</literal> bean in the Spring Application Context.
Calling <literal>/service-registry</literal> with GET returns the status of the <literal>Registration</literal>.
Using POST to the same endpoint with a JSON body changes the status of the current <literal>Registration</literal> to the new value.
The JSON body has to include the <literal>status</literal> field with the preferred value.
Please see the documentation of the <literal>ServiceRegistry</literal> implementation you use for the allowed values when updating the status and the values returned for the status.
For instance, Eureka&#8217;s supported statuses are <literal>UP</literal>, <literal>DOWN</literal>, <literal>OUT_OF_SERVICE</literal>, and <literal>UNKNOWN</literal>.</simpara>
</section>
</section>
<section xml:id="_spring_resttemplate_as_a_load_balancer_client">
<title>Spring RestTemplate as a Load Balancer Client</title>
<simpara><literal>RestTemplate</literal> can be automatically configured to use ribbon.
To create a load-balanced <literal>RestTemplate</literal>, create a <literal>RestTemplate</literal> <literal>@Bean</literal> and use the <literal>@LoadBalanced</literal> qualifier, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {

    @LoadBalanced
    @Bean
    RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

public class MyClass {
    @Autowired
    private RestTemplate restTemplate;

    public String doOtherStuff() {
        String results = restTemplate.getForObject("http://stores/stores", String.class);
        return results;
    }
}</programlisting>
<caution>
<simpara>A <literal>RestTemplate</literal> bean is no longer created through auto-configuration.
Individual applications must create it.</simpara>
</caution>
<simpara>The URI needs to use a virtual host name (that is, a service name, not a host name).
The Ribbon client is used to create a full physical address.
See <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/ribbon/RibbonAutoConfiguration.java">RibbonAutoConfiguration</link> for details of how the <literal>RestTemplate</literal> is set up.</simpara>
</section>
<section xml:id="_spring_webclient_as_a_load_balancer_client">
<title>Spring WebClient as a Load Balancer Client</title>
<simpara><literal>WebClient</literal> can be automatically configured to use the <literal>LoadBalancerClient</literal>.
To create a load-balanced <literal>WebClient</literal>, create a <literal>WebClient.Builder</literal> <literal>@Bean</literal> and use the <literal>@LoadBalanced</literal> qualifier, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {

	@Bean
	@LoadBalanced
	public WebClient.Builder loadBalancedWebClientBuilder() {
		return WebClient.builder();
	}
}

public class MyClass {
    @Autowired
    private WebClient.Builder webClientBuilder;

    public Mono&lt;String&gt; doOtherStuff() {
        return webClientBuilder.build().get().uri("http://stores/stores")
        				.retrieve().bodyToMono(String.class);
    }
}</programlisting>
<simpara>The URI needs to use a virtual host name (that is, a service name, not a host name).
The Ribbon client is used to create a full physical address.</simpara>
<section xml:id="_retrying_failed_requests">
<title>Retrying Failed Requests</title>
<simpara>A load-balanced <literal>RestTemplate</literal> can be configured to retry failed requests.
By default, this logic is disabled.
You can enable it by adding <link xl:href="https://github.com/spring-projects/spring-retry">Spring Retry</link> to your application&#8217;s classpath.
The load-balanced <literal>RestTemplate</literal> honors some of the Ribbon configuration values related to retrying failed requests.
You can use <literal>client.ribbon.MaxAutoRetries</literal>, <literal>client.ribbon.MaxAutoRetriesNextServer</literal>, and <literal>client.ribbon.OkToRetryOnAllOperations</literal> properties.
If you would like to disable the retry logic with Spring Retry on the classpath, you can set <literal>spring.cloud.loadbalancer.retry.enabled=false</literal>.
See the <link xl:href="https://github.com/Netflix/ribbon/wiki/Getting-Started#the-properties-file-sample-clientproperties">Ribbon documentation</link> for a description of what these properties do.</simpara>
<simpara>If you would like to implement a <literal>BackOffPolicy</literal> in your retries, you need to create a bean of type <literal>LoadBalancedBackOffPolicyFactory</literal> and return the <literal>BackOffPolicy</literal> you would like to use for a given service, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {
    @Bean
    LoadBalancedBackOffPolicyFactory backOffPolciyFactory() {
        return new LoadBalancedBackOffPolicyFactory() {
            @Override
            public BackOffPolicy createBackOffPolicy(String service) {
        		return new ExponentialBackOffPolicy();
        	}
        };
    }
}</programlisting>
<note>
<simpara><literal>client</literal> in the preceding examples should be replaced with your Ribbon client&#8217;s name.</simpara>
</note>
<simpara>If you want to add one or more <literal>RetryListener</literal> implementations to your retry functionality, you need to
create a bean of type <literal>LoadBalancedRetryListenerFactory</literal> and return the <literal>RetryListener</literal> array
you would like to use for a given service, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {
    @Bean
    LoadBalancedRetryListenerFactory retryListenerFactory() {
        return new LoadBalancedRetryListenerFactory() {
            @Override
            public RetryListener[] createRetryListeners(String service) {
                return new RetryListener[]{new RetryListener() {
                    @Override
                    public &lt;T, E extends Throwable&gt; boolean open(RetryContext context, RetryCallback&lt;T, E&gt; callback) {
                        //TODO Do you business...
                        return true;
                    }

                    @Override
                     public &lt;T, E extends Throwable&gt; void close(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable) {
                        //TODO Do you business...
                    }

                    @Override
                    public &lt;T, E extends Throwable&gt; void onError(RetryContext context, RetryCallback&lt;T, E&gt; callback, Throwable throwable) {
                        //TODO Do you business...
                    }
                }};
            }
        };
    }
}</programlisting>
</section>
</section>
<section xml:id="_multiple_resttemplate_objects">
<title>Multiple RestTemplate objects</title>
<simpara>If you want a <literal>RestTemplate</literal> that is not load-balanced, create a <literal>RestTemplate</literal> bean and inject it.
To access the load-balanced <literal>RestTemplate</literal>, use the <literal>@LoadBalanced</literal> qualifier when you create your <literal>@Bean</literal>, as shown in the following example:\</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {

    @LoadBalanced
    @Bean
    RestTemplate loadBalanced() {
        return new RestTemplate();
    }

    @Primary
    @Bean
    RestTemplate restTemplate() {
        return new RestTemplate();
    }
}

public class MyClass {
    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    @LoadBalanced
    private RestTemplate loadBalanced;

    public String doOtherStuff() {
        return loadBalanced.getForObject("http://stores/stores", String.class);
    }

    public String doStuff() {
        return restTemplate.getForObject("https://example.com", String.class);
    }
}</programlisting>
<important>
<simpara>Notice the use of the <literal>@Primary</literal> annotation on the plain <literal>RestTemplate</literal> declaration in the preceding example to disambiguate the unqualified <literal>@Autowired</literal> injection.</simpara>
</important>
<tip>
<simpara>If you see errors such as <literal>java.lang.IllegalArgumentException: Can not set org.springframework.web.client.RestTemplate field com.my.app.Foo.restTemplate to com.sun.proxy.$Proxy89</literal>, try injecting <literal>RestOperations</literal> or setting <literal>spring.aop.proxyTargetClass=true</literal>.</simpara>
</tip>
</section>
<section xml:id="loadbalanced-webclient">
<title>Spring WebFlux WebClient as a Load Balancer Client</title>
<simpara><literal>WebClient</literal> can be configured to use the <literal>LoadBalancerClient</literal>. <literal>LoadBalancerExchangeFilterFunction</literal> is auto-configured if <literal>spring-webflux</literal> is on the classpath. The following example shows how to configure a <literal>WebClient</literal> to use load balancer:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class MyClass {
    @Autowired
    private LoadBalancerExchangeFilterFunction lbFunction;

    public Mono&lt;String&gt; doOtherStuff() {
        return WebClient.builder().baseUrl("http://stores")
            .filter(lbFunction)
            .build()
            .get()
            .uri("/stores")
            .retrieve()
            .bodyToMono(String.class);
    }
}</programlisting>
<simpara>The URI needs to use a virtual host name (that is, a service name, not a host name).
The <literal>LoadBalancerClient</literal> is used to create a full physical address.</simpara>
</section>
<section xml:id="ignore-network-interfaces">
<title>Ignore Network Interfaces</title>
<simpara>Sometimes, it is useful to ignore certain named network interfaces so that they can be excluded from Service Discovery registration (for example, when running in a Docker container).
A list of regular expressions can be set to cause the desired network interfaces to be ignored.
The following configuration ignores the <literal>docker0</literal> interface and all interfaces that start with <literal>veth</literal>:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  cloud:
    inetutils:
      ignoredInterfaces:
        - docker0
        - veth.*</screen>
</para>
</formalpara>
<simpara>You can also force the use of only specified network addresses by using a list of regular expressions, as shown in the following example:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<screen>spring:
  cloud:
    inetutils:
      preferredNetworks:
        - 192.168
        - 10.0</screen>
</para>
</formalpara>
<simpara>You can also force the use of only site-local addresses, as shown in the following example:
.application.yml</simpara>
<screen>spring:
  cloud:
    inetutils:
      useOnlySiteLocalInterfaces: true</screen>
<simpara>See <link xl:href="https://docs.oracle.com/javase/8/docs/api/java/net/Inet4Address.html#isSiteLocalAddress--">Inet4Address.html.isSiteLocalAddress()</link> for more details about what constitutes a site-local address.</simpara>
</section>
<section xml:id="http-clients">
<title>HTTP Client Factories</title>
<simpara>Spring Cloud Commons provides beans for creating both Apache HTTP clients (<literal>ApacheHttpClientFactory</literal>) and OK HTTP clients (<literal>OkHttpClientFactory</literal>).
The <literal>OkHttpClientFactory</literal> bean is created only if the OK HTTP jar is on the classpath.
In addition, Spring Cloud Commons provides beans for creating the connection managers used by both clients: <literal>ApacheHttpClientConnectionManagerFactory</literal> for the Apache HTTP client and <literal>OkHttpClientConnectionPoolFactory</literal> for the OK HTTP client.
If you would like to customize how the HTTP clients are created in downstream projects, you can provide your own implementation of these beans.
In addition, if you provide a bean of type <literal>HttpClientBuilder</literal> or <literal>OkHttpClient.Builder</literal>, the default factories use these builders as the basis for the builders returned to downstream projects.
You can also disable the creation of these beans by setting <literal>spring.cloud.httpclientfactories.apache.enabled</literal> or <literal>spring.cloud.httpclientfactories.ok.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="enabled-features">
<title>Enabled Features</title>
<simpara>Spring Cloud Commons provides a <literal>/features</literal> actuator endpoint.
This endpoint returns features available on the classpath and whether they are enabled.
The information returned includes the feature type, name, version, and vendor.</simpara>
<section xml:id="_feature_types">
<title>Feature types</title>
<simpara>There are two types of 'features': abstract and named.</simpara>
<simpara>Abstract features are features where an interface or abstract class is defined and that an implementation the creates, such as <literal>DiscoveryClient</literal>, <literal>LoadBalancerClient</literal>, or <literal>LockService</literal>.
The abstract class or interface is used to find a bean of that type in the context.
The version displayed is <literal>bean.getClass().getPackage().getImplementationVersion()</literal>.</simpara>
<simpara>Named features are features that do not have a particular class they implement, such as "Circuit Breaker", "API Gateway", "Spring Cloud Bus", and others. These features require a name and a bean type.</simpara>
</section>
<section xml:id="_declaring_features">
<title>Declaring features</title>
<simpara>Any module can declare any number of <literal>HasFeature</literal> beans, as shown in the following examples:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public HasFeatures commonsFeatures() {
  return HasFeatures.abstractFeatures(DiscoveryClient.class, LoadBalancerClient.class);
}

@Bean
public HasFeatures consulFeatures() {
  return HasFeatures.namedFeatures(
    new NamedFeature("Spring Cloud Bus", ConsulBusAutoConfiguration.class),
    new NamedFeature("Circuit Breaker", HystrixCommandAspect.class));
}

@Bean
HasFeatures localFeatures() {
  return HasFeatures.builder()
      .abstractFeature(Foo.class)
      .namedFeature(new NamedFeature("Bar Feature", Bar.class))
      .abstractFeature(Baz.class)
      .build();
}</programlisting>
<simpara>Each of these beans should go in an appropriately guarded <literal>@Configuration</literal>.</simpara>
</section>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_config">
<title>Spring Cloud Config</title>
<partintro>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
<simpara>Spring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system. With the Config Server, you have a central place to manage external properties for applications across all environments.
The concepts on both client and server map identically to the Spring <literal>Environment</literal> and <literal>PropertySource</literal> abstractions, so they fit very well with Spring applications but can be used with any application running in any language.
As an application moves through the deployment pipeline from dev to test and into production, you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate.
The default implementation of the server storage backend uses git, so it easily supports labelled versions of configuration environments as well as being accessible to a wide range of tooling for managing the content.
It is easy to add alternative implementations and plug them in with Spring configuration.</simpara>
</partintro>
<chapter xml:id="_quick_start">
<title>Quick Start</title>
<simpara>This quick start walks through using both the server and the client of Spring Cloud Config Server.</simpara>
<simpara>First, start the server, as follows:</simpara>
<screen>$ cd spring-cloud-config-server
$ ../mvnw spring-boot:run</screen>
<simpara>The server is a Spring Boot application, so you can run it from your IDE if you prefer to do so (the main class is <literal>ConfigServerApplication</literal>).</simpara>
<simpara>Next try out a client, as follows:</simpara>
<screen>$ curl localhost:8888/foo/development
{"name":"foo","label":"master","propertySources":[
  {"name":"https://github.com/scratches/config-repo/foo-development.properties","source":{"bar":"spam"}},
  {"name":"https://github.com/scratches/config-repo/foo.properties","source":{"foo":"bar"}}
]}</screen>
<simpara>The default strategy for locating property sources is to clone a git repository (at <literal>spring.cloud.config.server.git.uri</literal>) and use it to initialize a mini <literal>SpringApplication</literal>.
The mini-application&#8217;s <literal>Environment</literal> is used to enumerate property sources and publish them at a JSON endpoint.</simpara>
<simpara>The HTTP service has resources in the following form:</simpara>
<screen>/{application}/{profile}[/{label}]
/{application}-{profile}.yml
/{label}/{application}-{profile}.yml
/{application}-{profile}.properties
/{label}/{application}-{profile}.properties</screen>
<simpara>where <literal>application</literal> is injected as the <literal>spring.config.name</literal> in the <literal>SpringApplication</literal> (what is normally <literal>application</literal> in a regular Spring Boot app), <literal>profile</literal> is an active profile (or comma-separated list of properties), and <literal>label</literal> is an optional git label (defaults to <literal>master</literal>.)</simpara>
<simpara>Spring Cloud Config Server pulls configuration for remote clients from a git repository (which must be provided), as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo</programlisting>
<section xml:id="_client_side_usage">
<title>Client Side Usage</title>
<simpara>To use these features in an application, you can build it as a Spring Boot application that depends on spring-cloud-config-client (for an example, see the test cases for the config-client or the sample application).
The most convenient way to add the dependency is with a Spring Boot starter <literal>org.springframework.cloud:spring-cloud-starter-config</literal>.
There is also a parent pom and BOM (<literal>spring-cloud-starter-parent</literal>) for Maven users and a Spring IO version management properties file for Gradle and Spring CLI users. The following example shows a typical Maven configuration:</simpara>
<formalpara>
<title>pom.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">   &lt;parent&gt;
       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
       &lt;version&gt;{spring-boot-docs-version}&lt;/version&gt;
       &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
   &lt;/parent&gt;

&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;{spring-cloud-version}&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
		&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
		&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
	&lt;plugins&gt;
           &lt;plugin&gt;
               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
           &lt;/plugin&gt;
	&lt;/plugins&gt;
&lt;/build&gt;

   &lt;!-- repositories also needed for snapshots and milestones --&gt;</programlisting>
</para>
</formalpara>
<simpara>Now you can create a standard Spring Boot application, such as the following HTTP server:</simpara>
<screen>@SpringBootApplication
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}</screen>
<simpara>When this HTTP server runs, it picks up the external configuration from the default local config server (if it is running) on port 8888.
To modify the startup behavior, you can change the location of the config server by using <literal>bootstrap.properties</literal> (similar to <literal>application.properties</literal> but for the bootstrap phase of an application context), as shown in the following example:</simpara>
<screen>spring.cloud.config.uri: http://myconfigserver.com</screen>
<simpara>The bootstrap properties show up in the <literal>/env</literal> endpoint as a high-priority property source, as shown in the following example.</simpara>
<screen>$ curl localhost:8080/env
{
  "profiles":[],
  "configService:https://github.com/spring-cloud-samples/config-repo/bar.properties":{"foo":"bar"},
  "servletContextInitParams":{},
  "systemProperties":{...},
  ...
}</screen>
<simpara>A property source called <literal>``configService:&lt;URL of remote repository&gt;/&lt;file name&gt;</literal> contains the <literal>foo</literal> property with a value of <literal>bar</literal> and is highest priority.</simpara>
<note>
<simpara>The URL in the property source name is the git repository, not the config server URL.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="_spring_cloud_config_server">
<title>Spring Cloud Config Server</title>
<simpara>Spring Cloud Config Server provides an HTTP resource-based API for external configuration (name-value pairs or equivalent YAML content).
The server is embeddable in a Spring Boot application, by using the <literal>@EnableConfigServer</literal> annotation.
Consequently, the following application is a config server:</simpara>
<formalpara>
<title>ConfigServer.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableConfigServer
public class ConfigServer {
  public static void main(String[] args) {
    SpringApplication.run(ConfigServer.class, args);
  }
}</programlisting>
</para>
</formalpara>
<simpara>Like all Spring Boot applications, it runs on port 8080 by default, but you can switch it to the more conventional port 8888 in various ways.
The easiest, which also sets a default configuration repository, is by launching it with <literal>spring.config.name=configserver</literal> (there is a <literal>configserver.yml</literal> in the Config Server jar).
Another is to use your own <literal>application.properties</literal>, as shown in the following example:</simpara>
<formalpara>
<title>application.properties</title>
<para>
<programlisting language="properties" linenumbering="unnumbered">server.port: 8888
spring.cloud.config.server.git.uri: file://${user.home}/config-repo</programlisting>
</para>
</formalpara>
<simpara>where <literal>${user.home}/config-repo</literal> is a git repository containing YAML and properties files.</simpara>
<note>
<simpara>On Windows, you need an extra "/" in the file URL if it is absolute with a drive prefix (for example,<literal><link xl:href="file:///${user.home}/config-repo">file:///${user.home}/config-repo</link></literal>).</simpara>
</note>
<tip>
<simpara>The following listing shows a recipe for creating the git repository in the preceding example:</simpara>
<screen>$ cd $HOME
$ mkdir config-repo
$ cd config-repo
$ git init .
$ echo info.foo: bar &gt; application.properties
$ git add -A .
$ git commit -m "Add application.properties"</screen>
</tip>
<warning>
<simpara>Using the local filesystem for your git repository is intended for testing only.
You should use a server to host your configuration repositories in production.</simpara>
</warning>
<warning>
<simpara>The initial clone of your configuration repository can be quick and efficient if you keep only text files in it.
If you store binary files, especially large ones, you may experience delays on the first request for configuration or encounter out of memory errors in the server.</simpara>
</warning>
<section xml:id="_environment_repository">
<title>Environment Repository</title>
<simpara>Where should you store the configuration data for the Config Server?
The strategy that governs this behaviour is the <literal>EnvironmentRepository</literal>, serving <literal>Environment</literal> objects.
This <literal>Environment</literal> is a shallow copy of the domain from the Spring <literal>Environment</literal> (including <literal>propertySources</literal> as the main feature).
The <literal>Environment</literal> resources are parametrized by three variables:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>{application}</literal>, which maps to <literal>spring.application.name</literal> on the client side.</simpara>
</listitem>
<listitem>
<simpara><literal>{profile}</literal>, which maps to <literal>spring.profiles.active</literal> on the client (comma-separated list).</simpara>
</listitem>
<listitem>
<simpara><literal>{label}</literal>, which is a server side feature labelling a "versioned" set of config files.</simpara>
</listitem>
</itemizedlist>
<simpara>Repository implementations generally behave like a Spring Boot application, loading configuration files from a <literal>spring.config.name</literal> equal to the <literal>{application}</literal> parameter, and <literal>spring.profiles.active</literal> equal to the <literal>{profiles}</literal> parameter.
Precedence rules for profiles are also the same as in a regular Spring Boot application: Active profiles take precedence over defaults, and, if there are multiple profiles, the last one wins (similar to adding entries to a <literal>Map</literal>).</simpara>
<simpara>The following sample client application has this bootstrap configuration:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  application:
    name: foo
  profiles:
    active: dev,mysql</programlisting>
</para>
</formalpara>
<simpara>(As usual with a Spring Boot application, these properties could also be set by environment variables or command line arguments).</simpara>
<simpara>If the repository is file-based, the server creates an
<literal>Environment</literal> from <literal>application.yml</literal> (shared between all clients) and
<literal>foo.yml</literal> (with <literal>foo.yml</literal> taking precedence).
If the YAML files have documents inside them that point to Spring profiles, those are applied with higher precedence (in order of the profiles listed).
If there are profile-specific YAML (or properties) files, these are also applied with higher precedence than the defaults.
Higher precedence translates to a <literal>PropertySource</literal> listed earlier in the <literal>Environment</literal>.
(These same rules apply in a standalone Spring Boot application.)</simpara>
<simpara>You can set spring.cloud.config.server.accept-empty to false so that Server would return a HTTP 404 status, if the application is not found.By default, this flag is set to true.</simpara>
<section xml:id="_git_backend">
<title>Git Backend</title>
<simpara>The default implementation of <literal>EnvironmentRepository</literal> uses a Git backend, which is very convenient for managing upgrades and physical environments and for auditing changes.
To change the location of the repository, you can set the <literal>spring.cloud.config.server.git.uri</literal> configuration property in the Config Server (for example in <literal>application.yml</literal>).
If you set it with a <literal>file:</literal> prefix, it should work from a local repository so that you can get started quickly and easily without a server. However, in that case, the server operates directly on the local repository without cloning it (it does not matter if it is not bare because the Config Server never makes changes to the "remote" repository).
To scale the Config Server up and make it highly available, you need to have all instances of the server pointing to the same repository, so only a shared file system would work.
Even in that case, it is better to use the <literal>ssh:</literal> protocol for a shared filesystem repository, so that the server can clone it and use a local working copy as a cache.</simpara>
<simpara>This repository implementation maps the <literal>{label}</literal> parameter of the HTTP resource to a git label (commit id, branch name, or tag).
If the git branch or tag name contains a slash (<literal>/</literal>), then the label in the HTTP URL should instead be specified with the special string <literal>(_)</literal> (to avoid ambiguity with other URL paths).
For example, if the label is <literal>foo/bar</literal>, replacing the slash would result in the following label: <literal>foo(_)bar</literal>.
The inclusion of the special string <literal>(_)</literal> can also be applied to the <literal>{application}</literal> parameter.
If you use a command-line client such as curl, be careful with the brackets in the URL&#8201;&#8212;&#8201;you should escape them from the shell with single quotes ('').</simpara>
<section xml:id="_skipping_ssl_certificate_validation">
<title>Skipping SSL Certificate Validation</title>
<simpara>The configuration server&#8217;s validation of the Git server&#8217;s SSL certificate can be disabled by setting the <literal>git.skipSslValidation</literal> property to <literal>true</literal> (default is <literal>false</literal>).</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://example.com/my/repo
          skipSslValidation: true</programlisting>
</section>
<section xml:id="_setting_http_connection_timeout">
<title>Setting HTTP Connection Timeout</title>
<simpara>You can configure the time, in seconds, that the configuration server will wait to acquire an HTTP connection. Use the <literal>git.timeout</literal> property.</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://example.com/my/repo
          timeout: 4</programlisting>
</section>
<section xml:id="_placeholders_in_git_uri">
<title>Placeholders in Git URI</title>
<simpara>Spring Cloud Config Server supports a git repository URL with placeholders for the <literal>{application}</literal> and <literal>{profile}</literal> (and <literal>{label}</literal> if you need it, but remember that the label is applied as a git label anyway).
So you can support a &#8220;one repository per application&#8221; policy by using a structure similar to the following:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/myorg/{application}</programlisting>
<simpara>You can also support a &#8220;one repository per profile&#8221; policy by using a similar pattern but with
<literal>{profile}</literal>.</simpara>
<simpara>Additionally, using the special string "(_)" within your <literal>{application}</literal> parameters can enable support for multiple
organizations, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/{application}</programlisting>
<simpara>where <literal>{application}</literal> is provided at request time in the following format: <literal>organization(_)application</literal>.</simpara>
</section>
<section xml:id="_pattern_matching_and_multiple_repositories">
<title>Pattern Matching and Multiple Repositories</title>
<simpara>Spring Cloud Config also includes support for more complex requirements with pattern
matching on the application and profile name.
The pattern format is a comma-separated list of <literal>{application}/{profile}</literal> names with wildcards (note that a pattern beginning with a wildcard may need to be quoted), as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          repos:
            simple: https://github.com/simple/config-repo
            special:
              pattern: special*/dev*,*special*/dev*
              uri: https://github.com/special/config-repo
            local:
              pattern: local*
              uri: file:/home/configsvc/config-repo</programlisting>
<simpara>If <literal>{application}/{profile}</literal> does not match any of the patterns, it uses the default URI defined under <literal>spring.cloud.config.server.git.uri</literal>.
In the above example, for the &#8220;simple&#8221; repository, the pattern is <literal>simple/*</literal> (it only matches one application named <literal>simple</literal> in all profiles). The &#8220;local&#8221; repository matches all application names beginning with <literal>local</literal> in all profiles (the <literal>/*</literal> suffix is added automatically to any pattern that does not have a profile matcher).</simpara>
<note>
<simpara>The &#8220;one-liner&#8221; short cut used in the &#8220;simple&#8221; example can be used only if the only property to be set is the URI.
If you need to set anything else (credentials, pattern, and so on) you need to use the full form.</simpara>
</note>
<simpara>The <literal>pattern</literal> property in the repo is actually an array, so you can use a YAML array (or <literal>[0]</literal>, <literal>[1]</literal>, etc. suffixes in properties files) to bind to multiple patterns.
You may need to do so if you are going to run apps with multiple profiles, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          repos:
            development:
              pattern:
                - '*/development'
                - '*/staging'
              uri: https://github.com/development/config-repo
            staging:
              pattern:
                - '*/qa'
                - '*/production'
              uri: https://github.com/staging/config-repo</programlisting>
<note>
<simpara>Spring Cloud guesses that a pattern containing a profile that does not end in <literal>*</literal> implies that you actually want to match a list of profiles starting with this pattern (so <literal>*/staging</literal> is a shortcut for <literal>["*/staging", "*/staging,*"]</literal>, and so on).
This is common where, for instance, you need to run applications in the &#8220;development&#8221; profile locally but also the &#8220;cloud&#8221; profile remotely.</simpara>
</note>
<simpara>Every repository can also optionally store config files in sub-directories, and patterns to search for those directories can be specified as <literal>searchPaths</literal>.
The following example shows a config file at the top level:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          searchPaths: foo,bar*</programlisting>
<simpara>In the preceding example, the server searches for config files in the top level and in the <literal>foo/</literal> sub-directory and also any sub-directory whose name begins with <literal>bar</literal>.</simpara>
<simpara>By default, the server clones remote repositories when configuration
is first requested.
The server can be configured to clone the repositories at startup, as shown in the following top-level example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://git/common/config-repo.git
          repos:
            team-a:
                pattern: team-a-*
                cloneOnStart: true
                uri: https://git/team-a/config-repo.git
            team-b:
                pattern: team-b-*
                cloneOnStart: false
                uri: https://git/team-b/config-repo.git
            team-c:
                pattern: team-c-*
                uri: https://git/team-a/config-repo.git</programlisting>
<simpara>In the preceding example, the server clones team-a&#8217;s config-repo on startup, before it
accepts any requests.
All other repositories are not cloned until configuration from the repository is requested.</simpara>
<note>
<simpara>Setting a repository to be cloned when the Config Server starts up can help to identify a misconfigured configuration source (such as an invalid repository URI) quickly, while the Config Server is starting up.
With <literal>cloneOnStart</literal> not enabled for a configuration source, the Config Server may start successfully with a misconfigured or invalid configuration source and not detect an error until an application requests configuration from that configuration source.</simpara>
</note>
</section>
<section xml:id="_authentication">
<title>Authentication</title>
<simpara>To use HTTP basic authentication on the remote repository, add the <literal>username</literal> and <literal>password</literal> properties separately (not in the URL), as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          username: trolley
          password: strongpassword</programlisting>
<simpara>If you do not use HTTPS and user credentials, SSH should also work out of the box when you store keys in the default directories (<literal>~/.ssh</literal>) and the URI points to an SSH location, such as <literal>git@github.com:configuration/cloud-configuration</literal>.
It is important that an entry for the Git server be present in the <literal>~/.ssh/known_hosts</literal> file and that it is in <literal>ssh-rsa</literal> format.
Other formats (such as <literal>ecdsa-sha2-nistp256</literal>) are not supported.
To avoid surprises, you should ensure that only one entry is present in the <literal>known_hosts</literal> file for the Git server and that it matches the URL you provided to the config server.
If you use a hostname in the URL, you want to have exactly that (not the IP) in the <literal>known_hosts</literal> file.
The repository is accessed by using JGit, so any documentation you find on that should be applicable.
HTTPS proxy settings can be set in <literal>~/.git/config</literal> or (in the same way as for any other JVM process) with
system properties (<literal>-Dhttps.proxyHost</literal> and <literal>-Dhttps.proxyPort</literal>).</simpara>
<tip>
<simpara>If you do not know where your <literal>~/.git</literal> directory is, use <literal>git config --global</literal> to manipulate the settings (for example, <literal>git config --global http.sslVerify false</literal>).</simpara>
</tip>
</section>
<section xml:id="_authentication_with_aws_codecommit">
<title>Authentication with AWS CodeCommit</title>
<simpara>Spring Cloud Config Server also supports <link xl:href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit</link> authentication.
AWS CodeCommit uses an authentication helper when using Git from the command line.
This helper is not used with the JGit library, so a JGit CredentialProvider for AWS CodeCommit is created if the Git URI matches the AWS CodeCommit pattern.
AWS CodeCommit URIs follow this pattern://git-codecommit.${AWS_REGION}.amazonaws.com/${repopath}.</simpara>
<simpara>If you provide a username and password with an AWS CodeCommit URI, they must be the <link xl:href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSGettingStartedGuide/AWSCredentials.html">AWS accessKeyId and secretAccessKey</link> that provide access to the repository.
If you do not specify a username and password, the accessKeyId and secretAccessKey are retrieved by using the <link xl:href="https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html">AWS Default Credential Provider Chain</link>.</simpara>
<simpara>If your Git URI matches the CodeCommit URI pattern (shown earlier), you must provide valid AWS credentials in the username and password or in one of the locations supported by the default credential provider chain.
AWS EC2 instances may use <link xl:href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html">IAM Roles for EC2 Instances</link>.</simpara>
<note>
<simpara>The <literal>aws-java-sdk-core</literal> jar is an optional dependency.
If the <literal>aws-java-sdk-core</literal> jar is not on your classpath, the AWS Code Commit credential provider is not created, regardless of the git server URI.</simpara>
</note>
</section>
<section xml:id="_git_ssh_configuration_using_properties">
<title>Git SSH configuration using properties</title>
<simpara>By default, the JGit library used by Spring Cloud Config Server uses SSH configuration files such as <literal>~/.ssh/known_hosts</literal> and <literal>/etc/ssh/ssh_config</literal> when connecting to Git repositories by using an SSH URI.
In cloud environments such as Cloud Foundry, the local filesystem may be ephemeral or not easily accessible.
For those cases, SSH configuration can be set by using Java properties.
In order to activate property-based SSH configuration, the <literal>spring.cloud.config.server.git.ignoreLocalSshSettings</literal> property must be set to <literal>true</literal>, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">  spring:
    cloud:
      config:
        server:
          git:
            uri: git@gitserver.com:team/repo1.git
            ignoreLocalSshSettings: true
            hostKey: someHostKey
            hostKeyAlgorithm: ssh-rsa
            privateKey: |
                         -----BEGIN RSA PRIVATE KEY-----
                         MIIEpgIBAAKCAQEAx4UbaDzY5xjW6hc9jwN0mX33XpTDVW9WqHp5AKaRbtAC3DqX
                         IXFMPgw3K45jxRb93f8tv9vL3rD9CUG1Gv4FM+o7ds7FRES5RTjv2RT/JVNJCoqF
                         ol8+ngLqRZCyBtQN7zYByWMRirPGoDUqdPYrj2yq+ObBBNhg5N+hOwKjjpzdj2Ud
                         1l7R+wxIqmJo1IYyy16xS8WsjyQuyC0lL456qkd5BDZ0Ag8j2X9H9D5220Ln7s9i
                         oezTipXipS7p7Jekf3Ywx6abJwOmB0rX79dV4qiNcGgzATnG1PkXxqt76VhcGa0W
                         DDVHEEYGbSQ6hIGSh0I7BQun0aLRZojfE3gqHQIDAQABAoIBAQCZmGrk8BK6tXCd
                         fY6yTiKxFzwb38IQP0ojIUWNrq0+9Xt+NsypviLHkXfXXCKKU4zUHeIGVRq5MN9b
                         BO56/RrcQHHOoJdUWuOV2qMqJvPUtC0CpGkD+valhfD75MxoXU7s3FK7yjxy3rsG
                         EmfA6tHV8/4a5umo5TqSd2YTm5B19AhRqiuUVI1wTB41DjULUGiMYrnYrhzQlVvj
                         5MjnKTlYu3V8PoYDfv1GmxPPh6vlpafXEeEYN8VB97e5x3DGHjZ5UrurAmTLTdO8
                         +AahyoKsIY612TkkQthJlt7FJAwnCGMgY6podzzvzICLFmmTXYiZ/28I4BX/mOSe
                         pZVnfRixAoGBAO6Uiwt40/PKs53mCEWngslSCsh9oGAaLTf/XdvMns5VmuyyAyKG
                         ti8Ol5wqBMi4GIUzjbgUvSUt+IowIrG3f5tN85wpjQ1UGVcpTnl5Qo9xaS1PFScQ
                         xrtWZ9eNj2TsIAMp/svJsyGG3OibxfnuAIpSXNQiJPwRlW3irzpGgVx/AoGBANYW
                         dnhshUcEHMJi3aXwR12OTDnaLoanVGLwLnkqLSYUZA7ZegpKq90UAuBdcEfgdpyi
                         PhKpeaeIiAaNnFo8m9aoTKr+7I6/uMTlwrVnfrsVTZv3orxjwQV20YIBCVRKD1uX
                         VhE0ozPZxwwKSPAFocpyWpGHGreGF1AIYBE9UBtjAoGBAI8bfPgJpyFyMiGBjO6z
                         FwlJc/xlFqDusrcHL7abW5qq0L4v3R+FrJw3ZYufzLTVcKfdj6GelwJJO+8wBm+R
                         gTKYJItEhT48duLIfTDyIpHGVm9+I1MGhh5zKuCqIhxIYr9jHloBB7kRm0rPvYY4
                         VAykcNgyDvtAVODP+4m6JvhjAoGBALbtTqErKN47V0+JJpapLnF0KxGrqeGIjIRV
                         cYA6V4WYGr7NeIfesecfOC356PyhgPfpcVyEztwlvwTKb3RzIT1TZN8fH4YBr6Ee
                         KTbTjefRFhVUjQqnucAvfGi29f+9oE3Ei9f7wA+H35ocF6JvTYUsHNMIO/3gZ38N
                         CPjyCMa9AoGBAMhsITNe3QcbsXAbdUR00dDsIFVROzyFJ2m40i4KCRM35bC/BIBs
                         q0TY3we+ERB40U8Z2BvU61QuwaunJ2+uGadHo58VSVdggqAo0BSkH58innKKt96J
                         69pcVH/4rmLbXdcmNYGm6iu+MlPQk4BUZknHSmVHIFdJ0EPupVaQ8RHT
                         -----END RSA PRIVATE KEY-----</programlisting>
<simpara>The following table describes the SSH configuration properties.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>SSH Configuration Properties</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Property Name</entry>
<entry align="left" valign="top">Remarks</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">ignoreLocalSshSettings</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>If <literal>true</literal>, use property-based instead of file-based SSH config. Must be set at as <literal>spring.cloud.config.server.git.ignoreLocalSshSettings</literal>, <emphasis role="strong">not</emphasis> inside a repository definition.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">privateKey</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Valid SSH private key. Must be set if <literal>ignoreLocalSshSettings</literal> is true and Git URI is SSH format.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">hostKey</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Valid SSH host key. Must be set if <literal>hostKeyAlgorithm</literal> is also set.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">hostKeyAlgorithm</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>One of <literal>ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521</literal>. Must be set if <literal>hostKey</literal> is also set.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">strictHostKeyChecking</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>true</literal> or <literal>false</literal>. If false, ignore errors with host key.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">knownHostsFile</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Location of custom <literal>.known_hosts</literal> file.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">preferredAuthentications</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Override server authentication method order. This should allow for evading login prompts if server has keyboard-interactive authentication before the <literal>publickey</literal> method.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="_placeholders_in_git_search_paths">
<title>Placeholders in Git Search Paths</title>
<simpara>Spring Cloud Config Server also supports a search path with placeholders for the <literal>{application}</literal> and <literal>{profile}</literal> (and <literal>{label}</literal> if
you need it), as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          searchPaths: '{application}'</programlisting>
<simpara>The preceding listing causes a search of the repository for files in the same name as the directory (as well as the top level).
Wildcards are also valid in a search path with placeholders (any matching directory is included in the search).</simpara>
</section>
<section xml:id="_force_pull_in_git_repositories">
<title>Force pull in Git Repositories</title>
<simpara>As mentioned earlier, Spring Cloud Config Server makes a clone of the remote git repository in case the local copy gets dirty (for example,
folder content changes by an OS process) such that Spring Cloud Config Server cannot update the local copy from remote repository.</simpara>
<simpara>To solve this issue, there is a <literal>force-pull</literal> property that makes Spring Cloud Config Server force pull from the remote repository if the local copy is dirty, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          force-pull: true</programlisting>
<simpara>If you have a multiple-repositories configuration, you can configure the <literal>force-pull</literal> property per repository, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://git/common/config-repo.git
          force-pull: true
          repos:
            team-a:
                pattern: team-a-*
                uri: https://git/team-a/config-repo.git
                force-pull: true
            team-b:
                pattern: team-b-*
                uri: https://git/team-b/config-repo.git
                force-pull: true
            team-c:
                pattern: team-c-*
                uri: https://git/team-a/config-repo.git</programlisting>
<note>
<simpara>The default value for <literal>force-pull</literal> property is <literal>false</literal>.</simpara>
</note>
</section>
<section xml:id="_deleting_untracked_branches_in_git_repositories">
<title>Deleting untracked branches in Git Repositories</title>
<simpara>As Spring Cloud Config Server has a clone of the remote git repository
after check-outing branch to local repo (e.g fetching properties by label) it will keep this branch
forever or till the next server restart (which creates new local repo).
So there could be a case when remote branch is deleted but local copy of it is still available for fetching.
And if Spring Cloud Config Server client service starts with <literal>--spring.cloud.config.label=deletedRemoteBranch,master</literal>
it will fetch properties from <literal>deletedRemoteBranch</literal> local branch, but not from <literal>master</literal>.</simpara>
<simpara>In order to keep local repository branches clean and up to remote - <literal>deleteUntrackedBranches</literal> property could be set.
It will make Spring Cloud Config Server <emphasis role="strong">force</emphasis> delete untracked branches from local repository.
Example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          deleteUntrackedBranches: true</programlisting>
<note>
<simpara>The default value for <literal>deleteUntrackedBranches</literal> property is <literal>false</literal>.</simpara>
</note>
</section>
</section>
<section xml:id="_version_control_backend_filesystem_use">
<title>Version Control Backend Filesystem Use</title>
<warning>
<simpara>With VCS-based backends (git, svn), files are checked out or cloned to the local filesystem.
By default, they are put in the system temporary directory with a prefix of <literal>config-repo-</literal>.
On linux, for example, it could be <literal>/tmp/config-repo-&lt;randomid&gt;</literal>.
Some operating systems <link xl:href="https://serverfault.com/questions/377348/when-does-tmp-get-cleared/377349#377349">routinely clean out</link> temporary directories.
This can lead to unexpected behavior, such as missing properties.
To avoid this problem, change the directory that Config Server uses by setting <literal>spring.cloud.config.server.git.basedir</literal> or <literal>spring.cloud.config.server.svn.basedir</literal> to a directory that does not reside in the system temp structure.</simpara>
</warning>
</section>
<section xml:id="_file_system_backend">
<title>File System Backend</title>
<simpara>There is also a &#8220;native&#8221; profile in the Config Server that does not use Git but loads the config files from the local classpath or file system (any static URL you want to point to with <literal>spring.cloud.config.server.native.searchLocations</literal>).
To use the native profile, launch the Config Server with <literal>spring.profiles.active=native</literal>.</simpara>
<note>
<simpara>Remember to use the <literal>file:</literal> prefix for file resources (the default without a prefix is usually the classpath).
As with any Spring Boot configuration, you can embed <literal>${}</literal>-style environment placeholders, but remember that absolute paths in Windows require an extra <literal>/</literal> (for example, <literal><link xl:href="file:///${user.home}/config-repo">file:///${user.home}/config-repo</link></literal>).</simpara>
</note>
<warning>
<simpara>The default value of the <literal>searchLocations</literal> is identical to a local Spring Boot application (that is, <literal>[classpath:/, classpath:/config,
file:./, file:./config]</literal>).
This does not expose the <literal>application.properties</literal> from the server to all clients, because any property sources present in the server are removed before being sent to the client.</simpara>
</warning>
<tip>
<simpara>A filesystem backend is great for getting started quickly and for testing.
To use it in production, you need to be sure that the file system is reliable and shared across all instances of the Config Server.</simpara>
</tip>
<simpara>The search locations can contain placeholders for <literal>{application}</literal>, <literal>{profile}</literal>, and <literal>{label}</literal>.
In this way, you can segregate the directories in the path and choose a strategy that makes sense for you (such as subdirectory per application or subdirectory per profile).</simpara>
<simpara>If you do not use placeholders in the search locations, this repository also appends the <literal>{label}</literal> parameter of the HTTP resource to a suffix on the search path, so properties files are loaded from each search location <emphasis role="strong">and</emphasis> a subdirectory with the same name as the label (the labelled properties take precedence in the Spring Environment).
Thus, the default behaviour with no placeholders is the same as adding a search location ending with <literal>/{label}/</literal>.
For example, <literal>file:/tmp/config</literal> is the same as <literal>file:/tmp/config,file:/tmp/config/{label}</literal>.
This behavior can be disabled by setting <literal>spring.cloud.config.server.native.addLabelLocations=false</literal>.</simpara>
</section>
<section xml:id="vault-backend">
<title>Vault Backend</title>
<simpara>Spring Cloud Config Server also supports <link xl:href="https://www.vaultproject.io">Vault</link> as a backend.</simpara>
<sidebar>
<simpara>Vault is a tool for securely accessing secrets.
A secret is anything that to which you want to tightly control access, such as API keys, passwords, certificates, and other sensitive information. Vault provides a unified interface to any secret while providing tight access control and recording a detailed audit log.</simpara>
</sidebar>
<simpara>For more information on Vault, see the <link xl:href="https://www.vaultproject.io/intro/index.html">Vault quick start guide</link>.</simpara>
<simpara>To enable the config server to use a Vault backend, you can run your config server with the <literal>vault</literal> profile.
For example, in your config server&#8217;s <literal>application.properties</literal>, you can add <literal>spring.profiles.active=vault</literal>.</simpara>
<simpara>By default, the config server assumes that your Vault server runs at <literal><link xl:href="http://127.0.0.1:8200">http://127.0.0.1:8200</link></literal>.
It also assumes that the name of backend is <literal>secret</literal> and the key is <literal>application</literal>.
All of these defaults can be configured in your config server&#8217;s <literal>application.properties</literal>.
The following table describes configurable Vault properties:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Default Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>host</simpara></entry>
<entry align="left" valign="top"><simpara>127.0.0.1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>port</simpara></entry>
<entry align="left" valign="top"><simpara>8200</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>scheme</simpara></entry>
<entry align="left" valign="top"><simpara>http</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>backend</simpara></entry>
<entry align="left" valign="top"><simpara>secret</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>defaultKey</simpara></entry>
<entry align="left" valign="top"><simpara>application</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>profileSeparator</simpara></entry>
<entry align="left" valign="top"><simpara>,</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>kvVersion</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>skipSslValidation</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>timeout</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<important>
<simpara>All of the properties in the preceding table must be prefixed with <literal>spring.cloud.config.server.vault</literal>.</simpara>
</important>
<simpara>All configurable properties can be found in <literal>org.springframework.cloud.config.server.environment.VaultEnvironmentRepository</literal>.</simpara>
<simpara>Vault 0.10.0 introduced a versioned key-value backend (k/v backend version 2) that exposes a different API than earlier versions, it now requires a <literal>data/</literal> between the mount path and the actual context path and wraps secrets in a <literal>data</literal> object. Setting <literal>kvVersion=2</literal> will take this into account.</simpara>
<simpara>With your config server running, you can make HTTP requests to the server to retrieve
values from the Vault backend.
To do so, you need a token for your Vault server.</simpara>
<simpara>First, place some data in you Vault, as shown in the following example:</simpara>
<programlisting language="sh" linenumbering="unnumbered">$ vault write secret/application foo=bar baz=bam
$ vault write secret/myapp foo=myappsbar</programlisting>
<simpara>Second, make an HTTP request to your config server to retrieve the values, as shown in the following example:</simpara>
<simpara><literal>$ curl -X "GET" "http://localhost:8888/myapp/default" -H "X-Config-Token: yourtoken"</literal></simpara>
<simpara>You should see a response similar to the following:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "name":"myapp",
   "profiles":[
      "default"
   ],
   "label":null,
   "version":null,
   "state":null,
   "propertySources":[
      {
         "name":"vault:myapp",
         "source":{
            "foo":"myappsbar"
         }
      },
      {
         "name":"vault:application",
         "source":{
            "baz":"bam",
            "foo":"bar"
         }
      }
   ]
}</programlisting>
<section xml:id="_multiple_properties_sources">
<title>Multiple Properties Sources</title>
<simpara>When using Vault, you can provide your applications with multiple properties sources.
For example, assume you have written data to the following paths in Vault:</simpara>
<programlisting language="sh" linenumbering="unnumbered">secret/myApp,dev
secret/myApp
secret/application,dev
secret/application</programlisting>
<simpara>Properties written to <literal>secret/application</literal> are available to <link linkend="_vault_server">all applications using the Config Server</link>.
An application with the name, <literal>myApp</literal>, would have any properties written to <literal>secret/myApp</literal> and <literal>secret/application</literal> available to it.
When <literal>myApp</literal> has the <literal>dev</literal> profile enabled, properties written to all of the above paths would be available to it, with properties in the first path in the list taking priority over the others.</simpara>
</section>
</section>
<section xml:id="_accessing_backends_through_a_proxy">
<title>Accessing Backends Through a Proxy</title>
<simpara>The configuration server can access a Git or Vault backend through an HTTP or HTTPS proxy. This behavior is controlled for either Git or Vault by settings under <literal>proxy.http</literal> and <literal>proxy.https</literal>. These settings are per repository, so if you are using a <link linkend="composite-environment-repositories">composite environment repository</link> you must configure proxy settings for each backend in the composite individually. If using a network which requires separate proxy servers for HTTP and HTTPS URLs, you can configure both the HTTP and the HTTPS proxy settings for a single backend.</simpara>
<simpara>The following table describes the proxy configuration properties for both HTTP and HTTPS proxies. All of these properties must be prefixed by <literal>proxy.http</literal> or <literal>proxy.https</literal>.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Proxy Configuration Properties</title>
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Property Name</entry>
<entry align="left" valign="top">Remarks</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">host</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The host of the proxy.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">port</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The port with which to access the proxy.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">nonProxyHosts</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Any hosts which the configuration server should access outside the proxy. If values are provided for both <literal>proxy.http.nonProxyHosts</literal> and <literal>proxy.https.nonProxyHosts</literal>, the <literal>proxy.http</literal> value will be used.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">username</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The username with which to authenticate to the proxy. If values are provided for both <literal>proxy.http.username</literal> and <literal>proxy.https.username</literal>, the <literal>proxy.http</literal> value will be used.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">password</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The password with which to authenticate to the proxy. If values are provided for both <literal>proxy.http.password</literal> and <literal>proxy.https.password</literal>, the <literal>proxy.http</literal> value will be used.</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following configuration uses an HTTPS proxy to access a Git repository.</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  profiles:
    active: git
  cloud:
    config:
      server:
        git:
          uri: https://github.com/spring-cloud-samples/config-repo
          proxy:
            https:
              host: my-proxy.host.io
              password: myproxypassword
              port: '3128'
              username: myproxyusername
              nonProxyHosts: example.com</programlisting>
</section>
<section xml:id="_sharing_configuration_with_all_applications">
<title>Sharing Configuration With All Applications</title>
<simpara>Sharing configuration between all applications varies according to which approach you take, as described in the following topics:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-config-server-file-based-repositories"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-config-server-vault-server"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-config-server-file-based-repositories">
<title>File Based Repositories</title>
<simpara>With file-based (git, svn, and native) repositories, resources with file names in <literal>application*</literal> (<literal>application.properties</literal>, <literal>application.yml</literal>, <literal>application-*.properties</literal>, and so on) are shared between all client applications.
You can use resources with these file names to configure global defaults and have them be overridden by application-specific files as necessary.</simpara>
<simpara>The #_property_overrides[property overrides] feature can also be used for setting global defaults, with placeholders applications
allowed to override them locally.</simpara>
<tip>
<simpara>With the &#8220;native&#8221; profile (a local file system backend) , you should use an explicit search location that is not part of the server&#8217;s own configuration.
Otherwise, the <literal>application*</literal> resources in the default search locations get removed because they are part of the server.</simpara>
</tip>
</section>
<section xml:id="spring-cloud-config-server-vault-server">
<title>Vault Server</title>
<simpara>When using Vault as a backend, you can share configuration with all applications by placing configuration in <literal>secret/application</literal>.
For example, if you run the following Vault command, all applications using the config server will have the properties <literal>foo</literal> and <literal>baz</literal> available to them:</simpara>
<programlisting language="sh" linenumbering="unnumbered">$ vault write secret/application foo=bar baz=bam</programlisting>
</section>
</section>
<section xml:id="_jdbc_backend">
<title>JDBC Backend</title>
<simpara>Spring Cloud Config Server supports JDBC (relational database) as a backend for configuration properties.
You can enable this feature by adding <literal>spring-jdbc</literal> to the classpath and using the <literal>jdbc</literal> profile or by adding a bean of type <literal>JdbcEnvironmentRepository</literal>.
If you include the right dependencies on the classpath (see the user guide for more details on that), Spring Boot configures a data source.</simpara>
<simpara>The database needs to have a table called <literal>PROPERTIES</literal> with columns called <literal>APPLICATION</literal>, <literal>PROFILE</literal>, and <literal>LABEL</literal> (with the usual <literal>Environment</literal> meaning), plus <literal>KEY</literal> and <literal>VALUE</literal> for the key and value pairs in <literal>Properties</literal> style.
All fields are of type String in Java, so you can make them <literal>VARCHAR</literal> of whatever length you need.
Property values behave in the same way as they would if they came from Spring Boot properties files named <literal>{application}-{profile}.properties</literal>, including all the encryption and decryption, which will be applied as post-processing steps (that is, not in the repository implementation directly).</simpara>
</section>
<section xml:id="composite-environment-repositories">
<title>Composite Environment Repositories</title>
<simpara>In some scenarios, you may wish to pull configuration data from multiple environment repositories.
To do so, you can enable the <literal>composite</literal> profile in your configuration server&#8217;s application properties or YAML file.
If, for example, you want to pull configuration data from a Subversion repository as well as two Git repositories, you can set the following properties for your configuration server:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  profiles:
    active: composite
  cloud:
    config:
      server:
        composite:
        -
          type: svn
          uri: file:///path/to/svn/repo
        -
          type: git
          uri: file:///path/to/rex/git/repo
        -
          type: git
          uri: file:///path/to/walter/git/repo</programlisting>
<simpara>Using this configuration, precedence is determined by the order in which repositories are listed under the <literal>composite</literal> key.
In the above example, the Subversion repository is listed first, so a value found in the Subversion repository will override values found for the same property in one of the Git repositories.
A value found in the <literal>rex</literal> Git repository will be used before a value found for the same property in the <literal>walter</literal> Git repository.</simpara>
<simpara>If you want to pull configuration data only from repositories that are each of distinct types, you can enable the corresponding profiles, rather than the <literal>composite</literal> profile, in your configuration server&#8217;s application properties or YAML file.
If, for example, you want to pull configuration data from a single Git repository and a single HashiCorp Vault server, you can set the following properties for your configuration server:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  profiles:
    active: git, vault
  cloud:
    config:
      server:
        git:
          uri: file:///path/to/git/repo
          order: 2
        vault:
          host: 127.0.0.1
          port: 8200
          order: 1</programlisting>
<simpara>Using this configuration, precedence can be determined by an <literal>order</literal> property.
You can use the <literal>order</literal> property to specify the priority order for all your repositories.
The lower the numerical value of the <literal>order</literal> property, the higher priority it has.
The priority order of a repository helps resolve any potential conflicts between repositories that contain values for the same properties.</simpara>
<note>
<simpara>If your composite environment includes a Vault server as in the previous example, you must include a Vault token in every request made to the configuration server. See <link linkend="vault-backend">Vault Backend</link>.</simpara>
</note>
<note>
<simpara>Any type of failure when retrieving values from an environment repository results in a failure for the entire composite environment.</simpara>
</note>
<note>
<simpara>When using a composite environment, it is important that all repositories contain the same labels.
If you have an environment similar to those in the preceding examples and you request configuration data with the <literal>master</literal> label but the Subversion repository does not contain a branch called <literal>master</literal>, the entire request fails.</simpara>
</note>
<section xml:id="_custom_composite_environment_repositories">
<title>Custom Composite Environment Repositories</title>
<simpara>In addition to using one of the environment repositories from Spring Cloud, you can also provide your own <literal>EnvironmentRepository</literal> bean to be included as part of a composite environment.
To do so, your bean must implement the <literal>EnvironmentRepository</literal> interface.
If you want to control the priority of your custom <literal>EnvironmentRepository</literal> within the composite environment, you should also implement the <literal>Ordered</literal> interface and override the <literal>getOrdered</literal> method.
If you do not implement the <literal>Ordered</literal> interface, your <literal>EnvironmentRepository</literal> is given the lowest priority.</simpara>
</section>
</section>
<section xml:id="_property_overrides">
<title>Property Overrides</title>
<simpara>The Config Server has an &#8220;overrides&#8221; feature that lets the operator provide configuration properties to all applications.
The overridden properties cannot be accidentally changed by the application with the normal Spring Boot hooks.
To declare overrides, add a map of name-value pairs to <literal>spring.cloud.config.server.overrides</literal>, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        overrides:
          foo: bar</programlisting>
<simpara>The preceding examples causes all applications that are config clients to read <literal>foo=bar</literal>, independent of their own configuration.</simpara>
<note>
<simpara>A configuration system cannot force an application to use configuration data in any particular way.
Consequently, overrides are not enforceable.
However, they do provide useful default behavior for Spring Cloud Config clients.</simpara>
</note>
<tip>
<simpara>Normally, Spring environment placeholders with <literal>${}</literal> can be escaped (and resolved on the client) by using backslash (<literal>\</literal>) to escape the <literal>$</literal> or the <literal>{</literal>.
For example, <literal>\${app.foo:bar}</literal> resolves to <literal>bar</literal>, unless the app provides its own <literal>app.foo</literal>.</simpara>
</tip>
<note>
<simpara>In YAML, you do not need to escape the backslash itself.
However, in properties files, you do need to escape the backslash, when you configure the overrides on the server.</simpara>
</note>
<simpara>You can change the priority of all overrides in the client to be more like default values, letting applications supply their own values in environment variables or System properties, by setting the  <literal>spring.cloud.config.overrideNone=true</literal> flag (the default is false) in the remote repository.</simpara>
</section>
</section>
<section xml:id="_health_indicator_2">
<title>Health Indicator</title>
<simpara>Config Server comes with a Health Indicator that checks whether the configured <literal>EnvironmentRepository</literal> is working.
By default, it asks the <literal>EnvironmentRepository</literal> for an application named <literal>app</literal>, the <literal>default</literal> profile, and the default label provided by the <literal>EnvironmentRepository</literal> implementation.</simpara>
<simpara>You can configure the Health Indicator to check more applications along with custom profiles and custom labels, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      server:
        health:
          repositories:
            myservice:
              label: mylabel
            myservice-dev:
              name: myservice
              profiles: development</programlisting>
<simpara>You can disable the Health Indicator by setting <literal>spring.cloud.config.server.health.enabled=false</literal>.</simpara>
</section>
<section xml:id="_security">
<title>Security</title>
<simpara>You can secure your Config Server in any way that makes sense to you (from physical network security to OAuth2 bearer tokens), because Spring Security and Spring Boot offer support for many security arrangements.</simpara>
<simpara>To use the default Spring Boot-configured HTTP Basic security, include Spring Security on the classpath (for example, through <literal>spring-boot-starter-security</literal>).
The default is a username of <literal>user</literal> and a randomly generated password. A random password is not useful in practice, so we recommend you configure the password (by setting <literal>spring.security.user.password</literal>) and encrypt it (see below for instructions on how to do that).</simpara>
</section>
<section xml:id="_encryption_and_decryption_2">
<title>Encryption and Decryption</title>
<important>
<simpara>To use the encryption and decryption features you need the full-strength JCE installed in your JVM (it is not included by default).
You can download the &#8220;Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files&#8221; from Oracle and follow the installation instructions (essentially, you need to replace the two policy files in the JRE lib/security directory with the ones that you downloaded).</simpara>
</important>
<simpara>If the remote property sources contain encrypted content (values starting with <literal>{cipher}</literal>), they are decrypted before sending to clients over HTTP.
The main advantage of this setup is that the property values need not be in plain text when they are &#8220;at rest&#8221; (for example, in a git repository).
If a value cannot be decrypted, it is removed from the property source and an additional property is added with the same key but prefixed with <literal>invalid</literal> and a value that means &#8220;not applicable&#8221; (usually <literal>&lt;n/a&gt;</literal>).
This is largely to prevent cipher text being used as a password and accidentally leaking.</simpara>
<simpara>If you set up a remote config repository for config client applications, it might contain an <literal>application.yml</literal> similar to the following:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  datasource:
    username: dbuser
    password: '{cipher}FKSAJDFGYOS8F7GLHAKERGFHLSAJ'</programlisting>
</para>
</formalpara>
<simpara>Encrypted values in a .properties file must not be wrapped in quotes. Otherwise, the value is not decrypted. The following example shows values that would work:</simpara>
<formalpara>
<title>application.properties</title>
<para>
<screen>spring.datasource.username: dbuser
spring.datasource.password: {cipher}FKSAJDFGYOS8F7GLHAKERGFHLSAJ</screen>
</para>
</formalpara>
<simpara>You can safely push this plain text to a shared git repository, and the secret password remains protected.</simpara>
<simpara>The server also exposes <literal>/encrypt</literal> and <literal>/decrypt</literal> endpoints (on the assumption that these are secured and only accessed by authorized agents).
If you edit a remote config file, you can use the Config Server to encrypt values by POSTing to the <literal>/encrypt</literal> endpoint, as shown in the following example:</simpara>
<screen>$ curl localhost:8888/encrypt -d mysecret
682bc583f4641835fa2db009355293665d2647dade3375c0ee201de2a49f7bda</screen>
<note>
<simpara>If the value you encrypt has characters in it that need to be URL encoded, you should use the <literal>--data-urlencode</literal> option to <literal>curl</literal> to make sure they are encoded properly.</simpara>
</note>
<tip>
<simpara>Be sure not to include any of the curl command statistics in the encrypted value.
Outputting the value to a file can help avoid this problem.</simpara>
</tip>
<simpara>The inverse operation is also available through <literal>/decrypt</literal> (provided the server is
configured with a symmetric key or a full key pair), as shown in the following example:</simpara>
<screen>$ curl localhost:8888/decrypt -d 682bc583f4641835fa2db009355293665d2647dade3375c0ee201de2a49f7bda
mysecret</screen>
<tip>
<simpara>If you testing with curl, then use <literal>--data-urlencode</literal> (instead of <literal>-d</literal>) or set an explicit <literal>Content-Type: text/plain</literal> to make sure curl encodes the data correctly when there are special characters ('+' is particularly tricky).</simpara>
</tip>
<simpara>Take the encrypted value and add the <literal>{cipher}</literal> prefix before you put it in the YAML or properties file and before you commit and push it to a remote (potentially insecure) store.</simpara>
<simpara>The <literal>/encrypt</literal> and <literal>/decrypt</literal> endpoints also both accept paths in the form of <literal>/*/{name}/{profiles}</literal>, which can be used to control cryptography on a per-application (name) and per-profile basis when clients call into the main environment resource.</simpara>
<note>
<simpara>To control the cryptography in this granular way, you must also provide a <literal>@Bean</literal> of type <literal>TextEncryptorLocator</literal> that creates a different encryptor per name and profiles.
The one that is provided by default does not do so (all encryptions use the same key).</simpara>
</note>
<simpara>The <literal>spring</literal> command line client (with Spring Cloud CLI extensions
installed) can also be used to encrypt and decrypt, as shown in the following example:</simpara>
<screen>$ spring encrypt mysecret --key foo
682bc583f4641835fa2db009355293665d2647dade3375c0ee201de2a49f7bda
$ spring decrypt --key foo 682bc583f4641835fa2db009355293665d2647dade3375c0ee201de2a49f7bda
mysecret</screen>
<simpara>To use a key in a file (such as an RSA public key for encryption), prepend
the key value with "@" and provide the file path, as shown in the following example:</simpara>
<screen>$ spring encrypt mysecret --key @${HOME}/.ssh/id_rsa.pub
AQAjPgt3eFZQXwt8tsHAVv/QHiY5sI2dRcR+...</screen>
<note>
<simpara>The <literal>--key</literal> argument is mandatory (despite having a <literal>--</literal> prefix).</simpara>
</note>
</section>
<section xml:id="_key_management">
<title>Key Management</title>
<simpara>The Config Server can use a symmetric (shared) key or an asymmetric one (RSA key pair).
The asymmetric choice is superior in terms of security, but it is often more convenient to use a symmetric key since it is a single property value to configure in the <literal>bootstrap.properties</literal>.</simpara>
<simpara>To configure a symmetric key, you need to set <literal>encrypt.key</literal> to a secret String (or use the <literal>ENCRYPT_KEY</literal> environment variable to keep it out of plain-text configuration files).</simpara>
<simpara>To configure an asymmetric key, you can either set the key as a PEM-encoded text value (in <literal>encrypt.key</literal>) or use a keystore (such as the keystore created by the <literal>keytool</literal> utility that comes with the JDK).
The following table describes the keystore properties:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="center" valign="top">Property</entry>
<entry align="center" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>encrypt.keyStore.location</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Contains a <literal>Resource</literal> location</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>encrypt.keyStore.password</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Holds the password that unlocks the keystore</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>encrypt.keyStore.alias</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Identifies which key in the store to use</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The encryption is done with the public key, and a private key is
needed for decryption.
Thus, in principle, you can configure only the public key in the server if you want to only encrypt (and are prepared to decrypt the values yourself locally with the private key).
In practice, you might not want to do decrypt locally, because it spreads the key management process around all the clients, instead of
concentrating it in the server.
On the other hand, it can be a useful option if your config server is relatively insecure and only a handful of clients need the encrypted properties.</simpara>
</section>
<section xml:id="_creating_a_key_store_for_testing">
<title>Creating a Key Store for Testing</title>
<simpara>To create a keystore for testing, you can use a command resembling the following:</simpara>
<screen>$ keytool -genkeypair -alias mytestkey -keyalg RSA \
  -dname "CN=Web Server,OU=Unit,O=Organization,L=City,S=State,C=US" \
  -keypass changeme -keystore server.jks -storepass letmein</screen>
<simpara>Put the <literal>server.jks</literal> file in the classpath (for instance) and then, in
your <literal>bootstrap.yml</literal>, for the Config Server, create the following settings:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">encrypt:
  keyStore:
    location: classpath:/server.jks
    password: letmein
    alias: mytestkey
    secret: changeme</programlisting>
</section>
<section xml:id="_using_multiple_keys_and_key_rotation">
<title>Using Multiple Keys and Key Rotation</title>
<simpara>In addition to the <literal>{cipher}</literal> prefix in encrypted property values, the Config Server looks for zero or more <literal>{name:value}</literal> prefixes before the start of the (Base64 encoded) cipher text.
The keys are passed to a <literal>TextEncryptorLocator</literal>, which can do whatever logic it needs to locate a <literal>TextEncryptor</literal> for the cipher.
If you have configured a keystore (<literal>encrypt.keystore.location</literal>), the default locator looks for keys with aliases supplied by the <literal>key</literal> prefix, with a cipher text like resembling the following:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">foo:
  bar: `{cipher}{key:testkey}...`</programlisting>
<simpara>The locator looks for a key named "testkey".
A secret can also be supplied by using a <literal>{secret:&#8230;&#8203;}</literal> value in the prefix.
However, if it is not supplied, the default is to use the keystore password (which is what you get when you build a keytore and do not specify a secret).
If you do supply a secret, you should also encrypt the secret using a custom <literal>SecretLocator</literal>.</simpara>
<simpara>When the keys are being used only to encrypt a few bytes of configuration data (that is, they are not being used elsewhere), key rotation is hardly ever necessary on cryptographic grounds.
However, you might occasionally  need to change the keys (for example, in the event of a security breach).
In that case, all the clients would need to change their source config files (for example, in git) and use a new <literal>{key:&#8230;&#8203;}</literal> prefix in all the ciphers.
Note that the clients need to first check that the key alias is available in the Config Server keystore.</simpara>
<tip>
<simpara>If you want to let the Config Server handle all encryption as well as decryption, the <literal>{name:value}</literal> prefixes can also be added as plain text posted to the <literal>/encrypt</literal> endpoint, .</simpara>
</tip>
</section>
<section xml:id="_serving_encrypted_properties">
<title>Serving Encrypted Properties</title>
<simpara>Sometimes you want the clients to decrypt the configuration locally, instead of doing it in the server.
In that case, if you provide the <literal>encrypt.*</literal> configuration to locate a key, you can still have <literal>/encrypt</literal> and <literal>/decrypt</literal> endpoints, but you need to explicitly switch off the decryption of outgoing properties by placing <literal>spring.cloud.config.server.encrypt.enabled=false</literal> in <literal>bootstrap.[yml|properties]</literal>.
If you do not care about the endpoints, it should work if you do not configure either the key or the enabled flag.</simpara>
</section>
</chapter>
<chapter xml:id="_serving_alternative_formats">
<title>Serving Alternative Formats</title>
<simpara>The default JSON format from the environment endpoints is perfect for consumption by Spring applications, because it maps directly onto the <literal>Environment</literal> abstraction.
If you prefer, you can consume the same data as YAML or Java properties by adding a suffix (".yml", ".yaml" or ".properties") to the resource path.
This can be useful for consumption by applications that do not care about the structure of the JSON endpoints or the extra metadata they provide (for example, an application that is not using Spring might benefit from the simplicity of this approach).</simpara>
<simpara>The YAML and properties representations have an additional flag (provided as a boolean query parameter called <literal>resolvePlaceholders</literal>) to signal that placeholders in the source documents (in the standard Spring <literal>${&#8230;&#8203;}</literal> form) should be resolved in the output before rendering, where possible.
This is a useful feature for consumers that do not know about the Spring placeholder conventions.</simpara>
<note>
<simpara>There are limitations in using the YAML or properties formats, mainly in relation to the loss of metadata.
For example, the JSON is structured as an ordered list of property sources, with names that correlate with the source.
The YAML and properties forms are coalesced into a single map, even if the origin of the values has multiple sources, and the names of the original source files are lost.
Also, the YAML representation is not necessarily a faithful representation of the YAML source in a backing repository either. It is constructed from a list of flat property sources, and assumptions have to be made about the form of the keys.</simpara>
</note>
</chapter>
<chapter xml:id="_serving_plain_text">
<title>Serving Plain Text</title>
<simpara>Instead of using the <literal>Environment</literal> abstraction (or one of the alternative representations of it in YAML or properties format), your applications might need generic plain-text configuration files that are tailored to their environment.
The Config Server provides these through an additional endpoint at <literal>/{name}/{profile}/{label}/{path}</literal>, where <literal>name</literal>, <literal>profile</literal>, and <literal>label</literal> have the same meaning as the regular environment endpoint, but <literal>path</literal> is a file name (such as <literal>log.xml</literal>).
The source files for this endpoint are located in the same way as for the environment endpoints.
The same search path is used for properties and YAML files.
However, instead of aggregating all matching resources, only the first one to match is returned.</simpara>
<simpara>After a resource is located, placeholders in the normal format (<literal>${&#8230;&#8203;}</literal>) are resolved by using the effective <literal>Environment</literal> for the supplied application name, profile, and label.
In this way, the resource endpoint is tightly integrated with the environment endpoints.
Consider the following example for a GIT or SVN repository:</simpara>
<screen>application.yml
nginx.conf</screen>
<simpara>where <literal>nginx.conf</literal> looks like this:</simpara>
<screen>server {
    listen              80;
    server_name         ${nginx.server.name};
}</screen>
<simpara>and <literal>application.yml</literal> like this:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">nginx:
  server:
    name: example.com
---
spring:
  profiles: development
nginx:
  server:
    name: develop.com</programlisting>
<simpara>The <literal>/foo/default/master/nginx.conf</literal> resource might be as follows:</simpara>
<screen>server {
    listen              80;
    server_name         example.com;
}</screen>
<simpara>and <literal>/foo/development/master/nginx.conf</literal> like this:</simpara>
<screen>server {
    listen              80;
    server_name         develop.com;
}</screen>
<note>
<simpara>As with the source files for environment configuration, the <literal>profile</literal> is used to resolve the file name.
So, if you want a profile-specific file, <literal>/*/development/*/logback.xml</literal> can be resolved by a file called <literal>logback-development.xml</literal> (in preference to <literal>logback.xml</literal>).</simpara>
</note>
<note>
<simpara>If you do not want to supply the <literal>label</literal> and let the server use the default label, you can supply a <literal>useDefaultLabel</literal> request parameter.
So, the preceding example for the <literal>default</literal> profile could be <literal>/foo/default/nginx.conf?useDefaultLabel</literal>.</simpara>
</note>
</chapter>
<chapter xml:id="_embedding_the_config_server">
<title>Embedding the Config Server</title>
<simpara>The Config Server runs best as a standalone application.
However, if need be, you can embed it in another application.
To do so, use the <literal>@EnableConfigServer</literal> annotation.
An optional property named <literal>spring.cloud.config.server.bootstrap</literal> can be useful in this case is.
It is a flag to indicate whether the server should configure itself from its own remote repository.
By default, the flag is off, because it can delay startup.
However, when embedded in another application, it makes sense to initialize the same way as any other application.</simpara>
<note>
<simpara>If you use the bootstrap flag, the config server needs to have its name and repository URI configured in <literal>bootstrap.yml</literal>.</simpara>
</note>
<simpara>To change the location of the server endpoints, you can (optionally) set <literal>spring.cloud.config.server.prefix</literal> (for example, <literal>/config</literal>), to serve the resources under a prefix.
The prefix should start but not end with a <literal>/</literal>.
It is applied to the <literal>@RequestMappings</literal> in the Config Server (that is, underneath the Spring Boot <literal>server.servletPath</literal> and <literal>server.contextPath</literal> prefixes).</simpara>
<simpara>If you want to read the configuration for an application directly from the backend repository (instead of from the config server), you
basically wat an embedded config server with no endpoints.
You can switch off the endpoints entirely by not using the <literal>@EnableConfigServer</literal> annotation (set <literal>spring.cloud.config.server.bootstrap=true</literal>).</simpara>
</chapter>
<chapter xml:id="_push_notifications_and_spring_cloud_bus">
<title>Push Notifications and Spring Cloud Bus</title>
<simpara>Many source code repository providers (such as Github, Gitlab, Gitee, or Bitbucket) notify you of changes in a repository through a webhook.
You can configure the webhook through the provider&#8217;s user interface as a URL and a set of events in which you are interested.
For instance, <link xl:href="https://developer.github.com/v3/activity/events/types/#pushevent">Github</link> uses a POST to the webhook with a JSON body containing a list of commits and a header (<literal>X-Github-Event</literal>) set to <literal>push</literal>.
If you add a dependency on the <literal>spring-cloud-config-monitor</literal> library and activate the Spring Cloud Bus in your Config Server, then a <literal>/monitor</literal> endpoint is enabled.</simpara>
<simpara>When the webhook is activated, the Config Server sends a <literal>RefreshRemoteApplicationEvent</literal> targeted at the applications it thinks might have changed.
The change detection can be strategized.
However, by default, it looks for changes in files that match the application name (for example, <literal>foo.properties</literal> is targeted at the <literal>foo</literal> application, while <literal>application.properties</literal> is targeted at all applications).
The strategy to use when you want to override the behavior is <literal>PropertyPathNotificationExtractor</literal>, which accepts the request headers and body as parameters and returns a list of file paths that changed.</simpara>
<simpara>The default configuration works out of the box with Github, Gitlab, Gitee, or Bitbucket.
In addition to the JSON notifications from Github, Gitlab, Gitee, or Bitbucket, you can trigger a change notification by POSTing to <literal>/monitor</literal> with form-encoded body parameters in the pattern of <literal>path={name}</literal>.
Doing so broadcasts to applications matching the <literal>{name}</literal> pattern (which can contain wildcards).</simpara>
<note>
<simpara>The <literal>RefreshRemoteApplicationEvent</literal> is transmitted only if the <literal>spring-cloud-bus</literal> is activated in both the Config Server and in the client application.</simpara>
</note>
<note>
<simpara>The default configuration also detects filesystem changes in local git repositories. In that case, the webhook is not used. However, as soon as you edit a config file, a refresh is broadcast.</simpara>
</note>
</chapter>
<chapter xml:id="_spring_cloud_config_client">
<title>Spring Cloud Config Client</title>
<simpara>A Spring Boot application can take immediate advantage of the Spring Config Server (or other external property sources provided by the application developer).
It also picks up some additional useful features related to <literal>Environment</literal> change events.</simpara>
<section xml:id="config-first-bootstrap">
<title>Config First Bootstrap</title>
<simpara>The default behavior for any application that has the Spring Cloud Config Client on the classpath is as follows:
When a config client starts, it binds to the Config Server (through the <literal>spring.cloud.config.uri</literal> bootstrap configuration property) and initializes Spring <literal>Environment</literal> with remote property sources.</simpara>
<simpara>The net result of this behavior is that all client applciations that want to consume the Config Server need a <literal>bootstrap.yml</literal> (or an environment variable) with the server address set in <literal>spring.cloud.config.uri</literal> (it defaults to "http://localhost:8888").</simpara>
</section>
<section xml:id="discovery-first-bootstrap">
<title>Discovery First Bootstrap</title>
<simpara>If you use a `DiscoveryClient implementation, such as Spring Cloud Netflix and Eureka Service Discovery or Spring Cloud Consul, you can have the Config Server register with the Discovery Service.
However, in the default &#8220;Config First&#8221; mode, clients cannot take advantage of the registration.</simpara>
<simpara>If you prefer to use <literal>DiscoveryClient</literal> to locate the Config Server, you can do so by setting <literal>spring.cloud.config.discovery.enabled=true</literal> (the default is <literal>false</literal>).
The net result of doing so is that client applications all need a <literal>bootstrap.yml</literal> (or an environment variable) with the appropriate discovery configuration.
For example, with Spring Cloud Netflix, you need to define the Eureka server address (for example, in <literal>eureka.client.serviceUrl.defaultZone</literal>).
The price for using this option is an extra network round trip on startup, to locate the service registration.
The benefit is that, as long as the Discovery Service is a fixed point, the Config Server can change its coordinates.
The default service ID is <literal>configserver</literal>, but you can change that on the client by setting <literal>spring.cloud.config.discovery.serviceId</literal> (and on the server, in the usual way for a service, such as by setting <literal>spring.application.name</literal>).</simpara>
<simpara>The discovery client implementations all support some kind of metadata map (for example, we have <literal>eureka.instance.metadataMap</literal> for Eureka).
Some additional properties of the Config Server may need to be configured in its service registration metadata so that clients can connect correctly.
If the Config Server is secured with HTTP Basic, you can configure the credentials as <literal>username</literal> and <literal>password</literal>.
Also, if the Config Server has a context path, you can set <literal>configPath</literal>.
For example, the following YAML file is for a Config Server that is a Eureka client:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">eureka:
  instance:
    ...
    metadataMap:
      user: osufhalskjrtl
      password: lviuhlszvaorhvlo5847
      configPath: /config</programlisting>
</para>
</formalpara>
</section>
<section xml:id="config-client-fail-fast">
<title>Config Client Fail Fast</title>
<simpara>In some cases, you may want to fail startup of a service if it cannot connect to the Config Server.
If this is the desired behavior, set the bootstrap configuration property <literal>spring.cloud.config.fail-fast=true</literal> to make the client halt with an Exception.</simpara>
</section>
<section xml:id="config-client-retry">
<title>Config Client Retry</title>
<simpara>If you expect that the config server may occasionally be unavailable when your application starts, you can make it keep trying after a failure.
First, you need to set <literal>spring.cloud.config.fail-fast=true</literal>.
Then you need to add <literal>spring-retry</literal> and <literal>spring-boot-starter-aop</literal> to your classpath.
The default behavior is to retry six times with an initial backoff interval of 1000ms and an exponential multiplier of 1.1 for subsequent backoffs.
You can configure these properties (and others) by setting the <literal>spring.cloud.config.retry.*</literal> configuration properties.</simpara>
<tip>
<simpara>To take full control of the retry behavior, add a <literal>@Bean</literal> of type <literal>RetryOperationsInterceptor</literal> with an ID of <literal>configServerRetryInterceptor</literal>.
Spring Retry has a <literal>RetryInterceptorBuilder</literal> that supports creating one.</simpara>
</tip>
</section>
<section xml:id="_locating_remote_configuration_resources">
<title>Locating Remote Configuration Resources</title>
<simpara>The Config Service serves property sources from <literal>/{name}/{profile}/{label}</literal>, where the default bindings in the client app are as follows:</simpara>
<itemizedlist>
<listitem>
<simpara>"name" = <literal>${spring.application.name}</literal></simpara>
</listitem>
<listitem>
<simpara>"profile" = <literal>${spring.profiles.active}</literal> (actually <literal>Environment.getActiveProfiles()</literal>)</simpara>
</listitem>
<listitem>
<simpara>"label" = "master"</simpara>
</listitem>
</itemizedlist>
<simpara>You can override all of them by setting <literal>spring.cloud.config.*</literal> (where <literal>*</literal> is <literal>name</literal>, <literal>profile</literal> or <literal>label</literal>).
The <literal>label</literal> is useful for rolling back to previous versions of configuration.
With the default Config Server implementation, it can be a git label, branch name, or commit ID.
Label can also be provided as a comma-separated list.
In that case, the items in the list are tried one by one until one succeeds.
This behavior can be useful when working on a feature branch.
For instance, you might want to align the config label with your branch but make it optional (in that case, use <literal>spring.cloud.config.label=myfeature,develop</literal>).</simpara>
</section>
<section xml:id="_specifying_multiple_urls_for_the_config_server">
<title>Specifying Multiple Urls for the Config Server</title>
<simpara>To ensure high availability when you have multiple instances of Config Server deployed and expect one or more instances to be unavailable from time to time, you can either specify multiple URLs (as a comma-separated list under the <literal>spring.cloud.config.uri</literal> property) or have all your instances register in a Service Registry like Eureka ( if using Discovery-First Bootstrap mode ). Note that doing so ensures high availability only when the Config Server is not running (that is, when the application has exited) or when a connection timeout has occurred. For example, if the Config Server returns a 500 (Internal Server Error) response or the Config Client receives a 401 from the Config Server (due to bad credentials or other causes), the Config Client does not try to fetch properties from other URLs. An error of that kind indicates a user issue rather than an availability problem.</simpara>
<simpara>If you use HTTP basic security on your Config Server, it is currently possible to support per-Config Server auth credentials only if you embed the credentials in each URL you specify under the <literal>spring.cloud.config.uri</literal> property. If you use any other kind of security mechanism, you cannot (currently) support per-Config Server authentication and authorization.</simpara>
</section>
<section xml:id="_configuring_read_timeouts">
<title>Configuring Read Timeouts</title>
<simpara>If you want to configure read timeout, this can be done by using the property <literal>spring.cloud.config.request-read-timeout</literal>.</simpara>
</section>
<section xml:id="_security_2">
<title>Security</title>
<simpara>If you use HTTP Basic security on the server, clients need to know the password (and username if it is not the default).
You can specify the username and password through the config server URI or via separate username and password properties, as shown in the following example:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
     uri: https://user:secret@myconfig.mycompany.com</programlisting>
</para>
</formalpara>
<simpara>The following example shows an alternate way to pass the same information:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
     uri: https://myconfig.mycompany.com
     username: user
     password: secret</programlisting>
</para>
</formalpara>
<simpara>The <literal>spring.cloud.config.password</literal> and <literal>spring.cloud.config.username</literal> values override anything that is provided in the URI.</simpara>
<simpara>If you deploy your apps on Cloud Foundry, the best way to provide the password is through service credentials (such as in the URI, since it does not need to be in a config file).
The following example works locally and for a user-provided service on Cloud Foundry named <literal>configserver</literal>:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
     uri: ${vcap.services.configserver.credentials.uri:http://user:password@localhost:8888}</programlisting>
</para>
</formalpara>
<simpara>If you use another form of security, you might need to <link linkend="custom-rest-template">provide a <literal>RestTemplate</literal></link> to the <literal>ConfigServicePropertySourceLocator</literal> (for example, by grabbing it in the bootstrap context and injecting it).</simpara>
<section xml:id="_health_indicator_3">
<title>Health Indicator</title>
<simpara>The Config Client supplies a Spring Boot Health Indicator that attempts to load configuration from the Config Server.
The health indicator can be disabled by setting <literal>health.config.enabled=false</literal>.
The response is also cached for performance reasons.
The default cache time to live is 5 minutes.
To change that value, set the <literal>health.config.time-to-live</literal> property (in milliseconds).</simpara>
</section>
<section xml:id="custom-rest-template">
<title>Providing A Custom RestTemplate</title>
<simpara>In some cases, you might need to customize the requests made to the config server from the client.
Typically, doing so involves passing special <literal>Authorization</literal> headers to authenticate requests to the server.
To provide a custom <literal>RestTemplate</literal>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a new configuration bean with an implementation of <literal>PropertySourceLocator</literal>, as shown in the following example:</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>CustomConfigServiceBootstrapConfiguration.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class CustomConfigServiceBootstrapConfiguration {
    @Bean
    public ConfigServicePropertySourceLocator configServicePropertySourceLocator() {
        ConfigClientProperties clientProperties = configClientProperties();
       ConfigServicePropertySourceLocator configServicePropertySourceLocator =  new ConfigServicePropertySourceLocator(clientProperties);
        configServicePropertySourceLocator.setRestTemplate(customRestTemplate(clientProperties));
        return configServicePropertySourceLocator;
    }
}</programlisting>
</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In <literal>resources/META-INF</literal>, create a file called
<literal>spring.factories</literal> and specify your custom configuration, as shown in the following example:</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>spring.factories</title>
<para>
<programlisting language="properties" linenumbering="unnumbered">org.springframework.cloud.bootstrap.BootstrapConfiguration = com.my.config.client.CustomConfigServiceBootstrapConfiguration</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_vault">
<title>Vault</title>
<simpara>When using Vault as a backend to your config server, the client needs to supply a token for the server to retrieve values from Vault.
This token can be provided within the client by setting <literal>spring.cloud.config.token</literal>
in <literal>bootstrap.yml</literal>, as shown in the following example:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    config:
      token: YourVaultToken</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_nested_keys_in_vault">
<title>Nested Keys In Vault</title>
<simpara>Vault supports the ability to nest keys in a value stored in Vault, as shown in the following example:</simpara>
<simpara><literal>echo -n '{"appA": {"secret": "appAsecret"}, "bar": "baz"}' | vault write secret/myapp -</literal></simpara>
<simpara>This command writes a JSON object to your Vault.
To access these values in Spring, you would use the traditional dot(<literal>.</literal>) annotation, as shown in the following example</simpara>
<programlisting language="java" linenumbering="unnumbered">@Value("${appA.secret}")
String name = "World";</programlisting>
<simpara>The preceding code would sets the value of the <literal>name</literal> variable to <literal>appAsecret</literal>.</simpara>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_netflix">
<title>Spring Cloud Netflix</title>
<partintro>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
<simpara>This project provides Netflix OSS integrations for Spring Boot apps through autoconfiguration
and binding to the Spring Environment and other Spring programming model idioms. With a few
simple annotations you can quickly enable and configure the common patterns inside your
application and build large distributed systems with battle-tested Netflix components. The
patterns provided include Service Discovery (Eureka), Circuit Breaker (Hystrix),
Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon).</simpara>
</partintro>
<chapter xml:id="_service_discovery_eureka_clients">
<title>Service Discovery: Eureka Clients</title>
<simpara>Service Discovery is one of the key tenets of a microservice-based architecture.
Trying to hand-configure each client or some form of convention can be difficult to do and can be brittle.
Eureka is the Netflix Service Discovery Server and Client.
The server can be configured and deployed to be highly available, with each server replicating state about the registered services to the others.</simpara>
<section xml:id="netflix-eureka-client-starter">
<title>How to Include Eureka Client</title>
<simpara>To include the Eureka Client in your project, use the starter with a group ID of <literal>org.springframework.cloud</literal> and an artifact ID of  <literal>spring-cloud-starter-netflix-eureka-client</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
</section>
<section xml:id="_registering_with_eureka">
<title>Registering with Eureka</title>
<simpara>When a client registers with Eureka, it provides meta-data about itself&#8201;&#8212;&#8201;such as host, port, health indicator URL, home page, and other details.
Eureka receives heartbeat messages from each instance belonging to a service.
If the heartbeat fails over a configurable timetable, the instance is normally removed from the registry.</simpara>
<simpara>The following example shows a minimal Eureka client application:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello world";
    }

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</programlisting>
<simpara>Note that the preceding example shows a normal <link xl:href="https://projects.spring.io/spring-boot/">Spring Boot</link> application.
By having <literal>spring-cloud-starter-netflix-eureka-client</literal> on the classpath, your application automatically registers with the Eureka Server.  Configuration is required to locate the Eureka server, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/</screen>
</para>
</formalpara>
<simpara>In the preceding example, "defaultZone" is a magic string fallback value that provides the service URL for any client that does not express a preference (in other words, it is a useful default).</simpara>
<simpara>The default application name (that is, the service ID), virtual host, and non-secure port (taken from the <literal>Environment</literal>) are <literal>${spring.application.name}</literal>, <literal>${spring.application.name}</literal> and <literal>${server.port}</literal>, respectively.</simpara>
<simpara>Having <literal>spring-cloud-starter-netflix-eureka-client</literal> on the classpath makes the app into both a Eureka &#8220;instance&#8221; (that is, it registers itself) and a &#8220;client&#8221; (it can query the registry to locate other services).
The instance behaviour is driven by <literal>eureka.instance.*</literal> configuration keys, but the defaults are fine if you ensure that your application has a value for <literal>spring.application.name</literal> (this is the default for the Eureka service ID or VIP).</simpara>
<simpara>See <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java">EurekaInstanceConfigBean</link> and <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java">EurekaClientConfigBean</link> for more details on the configurable options.</simpara>
<simpara>To disable the Eureka Discovery Client, you can set <literal>eureka.client.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_authenticating_with_the_eureka_server">
<title>Authenticating with the Eureka Server</title>
<simpara>HTTP basic authentication is automatically added to your eureka client if one of the <literal>eureka.client.serviceUrl.defaultZone</literal> URLs has credentials embedded in it (curl style, as follows: <literal><link xl:href="http://user:password@localhost:8761/eureka">http://user:password@localhost:8761/eureka</link></literal>).
For more complex needs, you can create a <literal>@Bean</literal> of type <literal>DiscoveryClientOptionalArgs</literal> and inject <literal>ClientFilter</literal> instances into it, all of which is applied to the calls from the client to the server.</simpara>
<note>
<simpara>Because of a limitation in Eureka, it is not possible to support per-server basic auth credentials, so only the first set that are found is used.</simpara>
</note>
</section>
<section xml:id="_status_page_and_health_indicator">
<title>Status Page and Health Indicator</title>
<simpara>The status page and health indicators for a Eureka instance default to <literal>/info</literal> and <literal>/health</literal> respectively, which are the default locations of useful endpoints in a Spring Boot Actuator application.
You need to change these, even for an Actuator application if you use a non-default context path or servlet path (such as <literal>server.servletPath=/custom</literal>) or management endpoint path (such as <literal>management.contextPath=/admin</literal>). The following example shows the default values for the two settings:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  instance:
    statusPageUrlPath: ${management.server.servlet.context-path}/info
    healthCheckUrlPath: ${management.server.servlet.context-path}/health</screen>
</para>
</formalpara>
<simpara>These links show up in the metadata that is consumed by clients and are used in some scenarios to decide whether to send requests to your application, so it is helpful if they are accurate.</simpara>
</section>
<section xml:id="_registering_a_secure_application">
<title>Registering a Secure Application</title>
<simpara>If your app wants to be contacted over HTTPS, you can set two flags in the <literal>EurekaInstanceConfig</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>eureka.instance.[nonSecurePortEnabled]=[false]</literal></simpara>
</listitem>
<listitem>
<simpara><literal>eureka.instance.[securePortEnabled]=[true]</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Doing so makes Eureka publish instance information that shows an explicit preference for secure communication.
The Spring Cloud <literal>DiscoveryClient</literal> always returns a URI starting with <literal>https</literal> for a service configured this way.
Similarly, when a service is configured this way, the Eureka (native) instance information has a secure health check URL.</simpara>
<simpara>Because of the way Eureka works internally, it still publishes a non-secure URL for the status and home pages unless you also override those explicitly.
You can use placeholders to configure the eureka instance URLs, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  instance:
    statusPageUrl: https://${eureka.hostname}/info
    healthCheckUrl: https://${eureka.hostname}/health
    homePageUrl: https://${eureka.hostname}/</screen>
</para>
</formalpara>
<simpara>(Note that <literal>${eureka.hostname}</literal> is a native placeholder only available
in later versions of Eureka. You could achieve the same thing with
Spring placeholders as well&#8201;&#8212;&#8201;for example, by using <literal>${eureka.instance.hostName}</literal>.)</simpara>
<note>
<simpara>If your application runs behind a proxy, and the SSL termination is in the proxy (for example, if you run in Cloud Foundry or other platforms as a service), then you need to ensure that the proxy &#8220;forwarded&#8221; headers are intercepted and handled by the application.
If the Tomcat container embedded in a Spring Boot application has explicit configuration for the 'X-Forwarded-\*` headers, this happens automatically.
The links rendered by your app to itself being wrong (the wrong host, port, or protocol) is a sign that you got this configuration wrong.</simpara>
</note>
</section>
<section xml:id="_eureka_s_health_checks">
<title>Eureka&#8217;s Health Checks</title>
<simpara>By default, Eureka uses the client heartbeat to determine if a client is up.
Unless specified otherwise, the Discovery Client does not propagate the current health check status of the application, per the Spring Boot Actuator.
Consequently, after successful registration, Eureka always announces that the application is in 'UP' state. This behavior can be altered by enabling Eureka health checks, which results in propagating application status to Eureka.
As a consequence, every other application does not send traffic to applications in states other then 'UP'.
The following example shows how to enable health checks for the client:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  client:
    healthcheck:
      enabled: true</screen>
</para>
</formalpara>
<warning>
<simpara><literal>eureka.client.healthcheck.enabled=true</literal> should only be set in <literal>application.yml</literal>. Setting the value in <literal>bootstrap.yml</literal> causes undesirable side effects, such as registering in Eureka with an <literal>UNKNOWN</literal> status.</simpara>
</warning>
<simpara>If you require more control over the health checks, consider implementing your own <literal>com.netflix.appinfo.HealthCheckHandler</literal>.</simpara>
</section>
<section xml:id="_eureka_metadata_for_instances_and_clients">
<title>Eureka Metadata for Instances and Clients</title>
<simpara>It is worth spending a bit of time understanding how the Eureka metadata works, so you can use it in a way that makes sense in your platform.
There is standard metadata for information such as hostname, IP address, port numbers, the status page, and health check.
These are published in the service registry and used by clients to contact the services in a straightforward way.
Additional metadata can be added to the instance registration in the <literal>eureka.instance.metadataMap</literal>, and this metadata is accessible in the remote clients.
In general, additional metadata does not change the behavior of the client, unless the client is made aware of the meaning of the metadata.
There are a couple of special cases, described later in this document, where Spring Cloud already assigns meaning to the metadata map.</simpara>
<section xml:id="_using_eureka_on_cloud_foundry">
<title>Using Eureka on Cloud Foundry</title>
<simpara>Cloud Foundry has a global router so that all instances of the same app have the same hostname (other PaaS solutions with a similar architecture have the same arrangement).
This is not necessarily a barrier to using Eureka.
However, if you use the router (recommended or even mandatory, depending on the way your platform was set up), you need to explicitly set the hostname and port numbers (secure or non-secure) so that they use the router.
You might also want to use instance metadata so that you can distinguish between the instances on the client (for example, in a custom load balancer).
By default, the <literal>eureka.instance.instanceId</literal> is <literal>vcap.application.instance_id</literal>, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  instance:
    hostname: ${vcap.application.uris[0]}
    nonSecurePort: 80</screen>
</para>
</formalpara>
<simpara>Depending on the way the security rules are set up in your Cloud Foundry instance, you might be able to register and use the IP address of the host VM for direct service-to-service calls.
This feature is not yet available on Pivotal Web Services (<link xl:href="https://run.pivotal.io">PWS</link>).</simpara>
</section>
<section xml:id="_using_eureka_on_aws">
<title>Using Eureka on AWS</title>
<simpara>If the application is planned to be deployed to an AWS cloud, the Eureka instance must be configured to be AWS-aware. You can do so by customizing the <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaInstanceConfigBean.java">EurekaInstanceConfigBean</link> as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
@Profile("!default")
public EurekaInstanceConfigBean eurekaInstanceConfig(InetUtils inetUtils) {
  EurekaInstanceConfigBean b = new EurekaInstanceConfigBean(inetUtils);
  AmazonInfo info = AmazonInfo.Builder.newBuilder().autoBuild("eureka");
  b.setDataCenterInfo(info);
  return b;
}</programlisting>
</section>
<section xml:id="_changing_the_eureka_instance_id">
<title>Changing the Eureka Instance ID</title>
<simpara>A vanilla Netflix Eureka instance is registered with an ID that is equal to its host name (that is, there is only one service per host).
Spring Cloud Eureka provides a sensible default, which is defined as follows:</simpara>
<simpara><literal>${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}}</literal></simpara>
<simpara>An example is <literal>myhost:myappname:8080</literal>.</simpara>
<simpara>By using Spring Cloud, you can override this value by providing a unique identifier in <literal>eureka.instance.instanceId</literal>, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>eureka:
  instance:
    instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}</screen>
</para>
</formalpara>
<simpara>With the metadata shown in the preceding example and multiple service instances deployed on localhost, the random value is inserted there to make the instance unique.
In Cloud Foundry, the <literal>vcap.application.instance_id</literal> is populated automatically in a Spring Boot application, so the random value is not needed.</simpara>
</section>
</section>
<section xml:id="_using_the_eurekaclient">
<title>Using the EurekaClient</title>
<simpara>Once you have an application that is a discovery client, you can use it to discover service instances from the <link linkend="spring-cloud-eureka-server">Eureka Server</link>.
One way to do so is to use the native <literal>com.netflix.discovery.EurekaClient</literal> (as opposed to the Spring Cloud <literal>DiscoveryClient</literal>), as shown in the following example:</simpara>
<screen>@Autowired
private EurekaClient discoveryClient;

public String serviceUrl() {
    InstanceInfo instance = discoveryClient.getNextServerFromEureka("STORES", false);
    return instance.getHomePageUrl();
}</screen>
<tip>
<simpara>Do not use the <literal>EurekaClient</literal> in a <literal>@PostConstruct</literal> method or in a <literal>@Scheduled</literal> method (or anywhere where the <literal>ApplicationContext</literal> might not be started yet).
It is initialized in a <literal>SmartLifecycle</literal> (with <literal>phase=0</literal>), so the earliest you can rely on it being available is in another <literal>SmartLifecycle</literal> with a higher phase.</simpara>
</tip>
<section xml:id="_eurekaclient_without_jersey">
<title>EurekaClient without Jersey</title>
<simpara>By default, EurekaClient uses Jersey for HTTP communication.
If you wish to avoid dependencies from Jersey, you can exclude it from your dependencies.
Spring Cloud auto-configures a transport client based on Spring <literal>RestTemplate</literal>.
The following example shows Jersey being excluded:</simpara>
<screen>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
            &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;
        &lt;/exclusion&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
            &lt;artifactId&gt;jersey-core&lt;/artifactId&gt;
        &lt;/exclusion&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;com.sun.jersey.contribs&lt;/groupId&gt;
            &lt;artifactId&gt;jersey-apache-client4&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;</screen>
</section>
</section>
<section xml:id="_alternatives_to_the_native_netflix_eurekaclient">
<title>Alternatives to the Native Netflix EurekaClient</title>
<simpara>You need not use the raw Netflix <literal>EurekaClient</literal>.
Also, it is usually more convenient to use it behind a wrapper of some sort.
Spring Cloud has support for <link linkend="spring-cloud-feign">Feign</link> (a REST client builder) and <link linkend="spring-cloud-ribbon">Spring <literal>RestTemplate</literal></link> through the logical Eureka service identifiers (VIPs) instead of physical URLs.
To configure Ribbon with a fixed list of physical servers, you can set <literal>&lt;client&gt;.ribbon.listOfServers</literal> to a comma-separated list of physical addresses (or hostnames), where <literal>&lt;client&gt;</literal> is the ID of the client.</simpara>
<simpara>You can also use the <literal>org.springframework.cloud.client.discovery.DiscoveryClient</literal>, which provides a simple API (not specific to Netflix) for discovery clients, as shown in the following example:</simpara>
<screen>@Autowired
private DiscoveryClient discoveryClient;

public String serviceUrl() {
    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances("STORES");
    if (list != null &amp;&amp; list.size() &gt; 0 ) {
        return list.get(0).getUri();
    }
    return null;
}</screen>
</section>
<section xml:id="_why_is_it_so_slow_to_register_a_service">
<title>Why Is It so Slow to Register a Service?</title>
<simpara>Being an instance also involves a periodic heartbeat to the registry
(through the client&#8217;s <literal>serviceUrl</literal>) with a default duration of 30 seconds.
A service is not available for discovery by clients until the instance, the server, and the client all have the same metadata in their local
cache (so it could take 3 heartbeats).
You can change the period by setting <literal>eureka.instance.leaseRenewalIntervalInSeconds</literal>.
Setting it to a value of less than 30 speeds up the process of getting clients connected to other services.
In production, it is probably better to stick with the default, because of internal computations in the server that make assumptions about the lease renewal period.</simpara>
</section>
<section xml:id="_zones">
<title>Zones</title>
<simpara>If you have deployed Eureka clients to multiple zones, you may prefer that those clients use services within the same zone before trying services in another zone.
To set that up, you need to configure your Eureka clients correctly.</simpara>
<simpara>First, you need to make sure you have Eureka servers deployed to each zone and that
they are peers of each other.
See the section on <link linkend="spring-cloud-eureka-server-zones-and-regions">zones and regions</link>
for more information.</simpara>
<simpara>Next, you need to tell Eureka which zone your service is in.
You can do so by using the <literal>metadataMap</literal> property.
For example, if <literal>service 1</literal> is deployed to both <literal>zone 1</literal> and <literal>zone 2</literal>, you need to set the following Eureka properties in <literal>service 1</literal>:</simpara>
<simpara><emphasis role="strong">Service 1 in Zone 1</emphasis></simpara>
<screen>eureka.instance.metadataMap.zone = zone1
eureka.client.preferSameZoneEureka = true</screen>
<simpara><emphasis role="strong">Service 1 in Zone 2</emphasis></simpara>
<screen>eureka.instance.metadataMap.zone = zone2
eureka.client.preferSameZoneEureka = true</screen>
</section>
</chapter>
<chapter xml:id="spring-cloud-eureka-server">
<title>Service Discovery: Eureka Server</title>
<simpara>This section describes how to set up a Eureka server.</simpara>
<section xml:id="netflix-eureka-server-starter">
<title>How to Include Eureka Server</title>
<simpara>To include Eureka Server in your project, use the starter with a group ID of <literal>org.springframework.cloud</literal> and an artifact ID of <literal>spring-cloud-starter-netflix-eureka-server</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
</section>
<section xml:id="spring-cloud-running-eureka-server">
<title>How to Run a Eureka Server</title>
<simpara>The following example shows a minimal Eureka server:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableEurekaServer
public class Application {

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</programlisting>
<simpara>The server has a home page with a UI and HTTP API endpoints for the normal Eureka functionality under <literal>/eureka/*</literal>.</simpara>
<simpara>The following links have some Eureka background reading:  <link xl:href="https://github.com/cfregly/fluxcapacitor/wiki/NetflixOSS-FAQ#eureka-service-discovery-load-balancer">flux capacitor</link> and <link xl:href="https://groups.google.com/forum/?fromgroups#!topic/eureka_netflix/g3p2r7gHnN0">google group discussion</link>.</simpara>
<tip>
<simpara>Due to Gradle&#8217;s dependency resolution rules and the lack of a parent bom feature, depending on <literal>spring-cloud-starter-netflix-eureka-server</literal> can cause failures on application startup.
To remedy this issue, add the Spring Boot Gradle plugin and import the Spring cloud starter parent bom as follows:</simpara>
<formalpara>
<title>build.gradle</title>
<para>
<programlisting language="java" linenumbering="unnumbered">buildscript {
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:{spring-boot-docs-version}")
  }
}

apply plugin: "spring-boot"

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:{spring-cloud-version}"
  }
}</programlisting>
</para>
</formalpara>
</tip>
</section>
<section xml:id="spring-cloud-eureka-server-zones-and-regions">
<title>High Availability, Zones and Regions</title>
<simpara>The Eureka server does not have a backend store, but the service instances in the registry all have to send heartbeats to keep their registrations up to date (so this can be done in memory).
Clients also have an in-memory cache of Eureka registrations (so they do not have to go to the registry for every request to a service).</simpara>
<simpara>By default, every Eureka server is also a Eureka client and requires (at least one) service URL to locate a peer.
If you do not provide it, the service runs and works, but it fills your logs with a lot of noise about not being able to register with the peer.</simpara>
<simpara>See also <link linkend="spring-cloud-ribbon">below for details of Ribbon support</link> on the client side for Zones and Regions.</simpara>
</section>
<section xml:id="spring-cloud-eureka-server-standalone-mode">
<title>Standalone Mode</title>
<simpara>The combination of the two caches (client and server) and the heartbeats make a standalone Eureka server fairly resilient to failure, as long as there is some sort of monitor or elastic runtime (such as Cloud Foundry) keeping it alive.
In standalone mode, you might prefer to switch off the client side behavior so that it does not keep trying and failing to reach its peers.
The following example shows how to switch off the client-side behavior:</simpara>
<formalpara>
<title>application.yml (Standalone Eureka Server)</title>
<para>
<screen>server:
  port: 8761

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/</screen>
</para>
</formalpara>
<simpara>Notice that the <literal>serviceUrl</literal> is pointing to the same host as the local instance.</simpara>
</section>
<section xml:id="spring-cloud-eureka-server-peer-awareness">
<title>Peer Awareness</title>
<simpara>Eureka can be made even more resilient and available by running multiple instances and asking them to register with each other.
In fact, this is the default behavior, so all you need to do to make it work is add a valid <literal>serviceUrl</literal> to a peer, as shown in the following example:</simpara>
<formalpara>
<title>application.yml (Two Peer Aware Eureka Servers)</title>
<para>
<screen>---
spring:
  profiles: peer1
eureka:
  instance:
    hostname: peer1
  client:
    serviceUrl:
      defaultZone: http://peer2/eureka/

---
spring:
  profiles: peer2
eureka:
  instance:
    hostname: peer2
  client:
    serviceUrl:
      defaultZone: http://peer1/eureka/</screen>
</para>
</formalpara>
<simpara>In the preceding example, we have a YAML file that can be used to run the same server on two hosts (<literal>peer1</literal> and <literal>peer2</literal>) by running it in different Spring profiles.
You could use this configuration to test the peer awareness on a single host (there is not much value in doing that in production) by manipulating <literal>/etc/hosts</literal> to resolve the host names.
In fact, the <literal>eureka.instance.hostname</literal> is not needed if you are running on a machine that knows its own hostname (by default, it is looked up by using <literal>java.net.InetAddress</literal>).</simpara>
<simpara>You can add multiple peers to a system, and, as long as they are all connected to each other by at least one edge, they synchronize
the registrations amongst themselves.
If the peers are physically separated (inside a data center or between multiple data centers), then the system can, in principle, survive &#8220;split-brain&#8221; type failures.</simpara>
</section>
<section xml:id="spring-cloud-eureka-server-prefer-ip-address">
<title>When to Prefer IP Address</title>
<simpara>In some cases, it is preferable for Eureka to advertise the IP addresses of services rather than the hostname.
Set <literal>eureka.instance.preferIpAddress</literal> to <literal>true</literal> and, when the application registers with eureka, it uses its IP address rather than its hostname.</simpara>
<tip>
<simpara>If the hostname cannot be determined by Java, then the IP address is sent to Eureka.
Only explict way of setting the hostname is by setting <literal>eureka.instance.hostname</literal> property.
You can set your hostname at the run-time by using an environment variable&#8201;&#8212;&#8201;for example, <literal>eureka.instance.hostname=${HOST_NAME}</literal>.</simpara>
</tip>
</section>
<section xml:id="_securing_the_eureka_server">
<title>Securing The Eureka Server</title>
<simpara>You can secure your Eureka server simply by adding Spring Security to your
server&#8217;s classpath via <literal>spring-boot-starter-security</literal>.  By default when Spring Security is on the classpath it will require that
a valid CSRF token be sent with every request to the app.  Eureka clients will not generally possess a valid
cross site request forgery (CSRF) token you will need to disable this requirement for the <literal>/eureka/**</literal> endpoints.
For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableWebSecurity
class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().ignoringAntMatchers("/eureka/**");
        super.configure(http);
    }
}</programlisting>
<simpara>For more information on CSRF see the <link xl:href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#csrf">Spring Security documentation</link>.</simpara>
<simpara>A demo Eureka Server can be found in the Spring Cloud Samples <link xl:href="https://github.com/spring-cloud-samples/eureka/tree/Eureka-With-Security">repo</link>.</simpara>
</section>
</chapter>
<chapter xml:id="_circuit_breaker_hystrix_clients">
<title>Circuit Breaker: Hystrix Clients</title>
<simpara>Netflix has created a library called <link xl:href="https://github.com/Netflix/Hystrix">Hystrix</link> that implements the <link xl:href="https://martinfowler.com/bliki/CircuitBreaker.html">circuit breaker pattern</link>.
In a microservice architecture, it is common to have multiple layers of service calls, as shown in the following example:</simpara>
<figure>
<title>Microservice Graph</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-netflix/master/docs/src/main/asciidoc/images/Hystrix.png"/>
</imageobject>
<textobject><phrase>Hystrix</phrase></textobject>
</mediaobject>
</figure>
<simpara>A service failure in the lower level of services can cause cascading failure all the way up to the user.
When calls to a particular service exceed <literal>circuitBreaker.requestVolumeThreshold</literal> (default: 20 requests) and the failure percentage is greater than <literal>circuitBreaker.errorThresholdPercentage</literal> (default: &gt;50%) in a rolling window defined by <literal>metrics.rollingStats.timeInMilliseconds</literal> (default: 10 seconds), the circuit opens and the call is not made.
In cases of error and an open circuit, a fallback can be provided by the developer.</simpara>
<figure>
<title>Hystrix fallback prevents cascading failures</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-netflix/master/docs/src/main/asciidoc/images/HystrixFallback.png"/>
</imageobject>
<textobject><phrase>HystrixFallback</phrase></textobject>
</mediaobject>
</figure>
<simpara>Having an open circuit stops cascading failures and allows overwhelmed or failing services time to recover.
The fallback can be another Hystrix protected call, static data, or a sensible empty value.
Fallbacks may be chained so that the first fallback makes some other business call, which in turn falls back to static data.</simpara>
<section xml:id="_how_to_include_hystrix">
<title>How to Include Hystrix</title>
<simpara>To include Hystrix in your project, use the starter with a group ID of <literal>org.springframework.cloud</literal>
and a artifact ID of <literal>spring-cloud-starter-netflix-hystrix</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>The following example shows a minimal Eureka server with a Hystrix circuit breaker:</simpara>
<screen>@SpringBootApplication
@EnableCircuitBreaker
public class Application {

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}

@Component
public class StoreIntegration {

    @HystrixCommand(fallbackMethod = "defaultStores")
    public Object getStores(Map&lt;String, Object&gt; parameters) {
        //do stuff that might fail
    }

    public Object defaultStores(Map&lt;String, Object&gt; parameters) {
        return /* something useful */;
    }
}</screen>
<simpara>The <literal>@HystrixCommand</literal> is provided by a Netflix contrib library called <link xl:href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica">&#8220;javanica&#8221;</link>.
Spring Cloud automatically wraps Spring beans with that annotation in a proxy that is connected to the Hystrix circuit breaker.
The circuit breaker calculates when to open and close the circuit and what to do in case of a failure.</simpara>
<simpara>To configure the <literal>@HystrixCommand</literal> you can use the <literal>commandProperties</literal>
attribute with a list of <literal>@HystrixProperty</literal> annotations.  See
<link xl:href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-javanica#configuration">here</link>
for more details.  See the <link xl:href="https://github.com/Netflix/Hystrix/wiki/Configuration">Hystrix wiki</link>
for details on the properties available.</simpara>
</section>
<section xml:id="netflix-hystrix-starter">
<title>Propagating the Security Context or Using Spring Scopes</title>
<simpara>If you want some thread local context to propagate into a <literal>@HystrixCommand</literal>, the default declaration does not work, because it executes the command in a thread pool (in case of timeouts).
You can switch Hystrix to use the same thread as the caller through configuration or directly in the annotation, by asking it to use a different &#8220;Isolation Strategy&#8221;.
The following example demonstrates setting the thread in the annotation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@HystrixCommand(fallbackMethod = "stubMyService",
    commandProperties = {
      @HystrixProperty(name="execution.isolation.strategy", value="SEMAPHORE")
    }
)
...</programlisting>
<simpara>The same thing applies if you are using <literal>@SessionScope</literal> or <literal>@RequestScope</literal>.
If you encounter a runtime exception that says it cannot find the scoped context, you need to use the same thread.</simpara>
<simpara>You also have the option to set the <literal>hystrix.shareSecurityContext</literal> property to <literal>true</literal>.
Doing so auto-configures a Hystrix concurrency strategy plugin hook to transfer the <literal>SecurityContext</literal> from your main thread to the one used by the Hystrix command.
Hystrix does not let multiple Hystrix concurrency strategy be registered so an extension mechanism is available by declaring your own <literal>HystrixConcurrencyStrategy</literal> as a Spring bean.
Spring Cloud looks for your implementation within the Spring context and wrap it inside its own plugin.</simpara>
</section>
<section xml:id="_health_indicator_4">
<title>Health Indicator</title>
<simpara>The state of the connected circuit breakers are also exposed in the <literal>/health</literal> endpoint of the calling application, as shown in the following example:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "hystrix": {
        "openCircuitBreakers": [
            "StoreIntegration::getStoresByLocationLink"
        ],
        "status": "CIRCUIT_OPEN"
    },
    "status": "UP"
}</programlisting>
</section>
<section xml:id="_hystrix_metrics_stream">
<title>Hystrix Metrics Stream</title>
<simpara>To enable the Hystrix metrics stream, include a dependency on <literal>spring-boot-starter-actuator</literal> and set
<literal>management.endpoints.web.exposure.include: hystrix.stream</literal>.
Doing so exposes the <literal>/actuator/hystrix.stream</literal> as a management endpoint, as shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;</programlisting>
</section>
</chapter>
<chapter xml:id="_circuit_breaker_hystrix_dashboard">
<title>Circuit Breaker: Hystrix Dashboard</title>
<simpara>One of the main benefits of Hystrix is the set of metrics it gathers about each HystrixCommand.
The Hystrix Dashboard displays the health of each circuit breaker in an efficient manner.</simpara>
<figure>
<title>Hystrix Dashboard</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-netflix/master/docs/src/main/asciidoc/images/Hystrix.png"/>
</imageobject>
<textobject><phrase>Hystrix</phrase></textobject>
</mediaobject>
</figure>
</chapter>
<chapter xml:id="_hystrix_timeouts_and_ribbon_clients">
<title>Hystrix Timeouts And Ribbon Clients</title>
<simpara>When using Hystrix commands that wrap Ribbon clients you want to make sure your Hystrix timeout
is configured to be longer than the configured Ribbon timeout, including any potential
retries that might be made.  For example, if your Ribbon connection timeout is one second and
the Ribbon client might retry the request three times, than your Hystrix timeout should
be slightly more than three seconds.</simpara>
<section xml:id="netflix-hystrix-dashboard-starter">
<title>How to Include the Hystrix Dashboard</title>
<simpara>To include the Hystrix Dashboard in your project, use the starter with a group ID of  <literal>org.springframework.cloud</literal> and an artifact ID of <literal>spring-cloud-starter-netflix-hystrix-dashboard</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>To run the Hystrix Dashboard, annotate your Spring Boot main class with <literal>@EnableHystrixDashboard</literal>.
Then visit <literal>/hystrix</literal> and point the dashboard to an individual instance&#8217;s <literal>/hystrix.stream</literal> endpoint in a Hystrix client application.</simpara>
<note>
<simpara>When connecting to a <literal>/hystrix.stream</literal> endpoint that uses HTTPS, the certificate used by the server must be trusted by the JVM.
If the certificate is not trusted, you must import the certificate into the JVM in order for the Hystrix Dashboard to make a successful connection to the stream endpoint.</simpara>
</note>
</section>
<section xml:id="_turbine">
<title>Turbine</title>
<simpara>Looking at an individual instance&#8217;s Hystrix data is not very useful in terms of the overall health of the system.  <link xl:href="https://github.com/Netflix/Turbine">Turbine</link> is an application that aggregates all of the relevant <literal>/hystrix.stream</literal> endpoints into a combined <literal>/turbine.stream</literal> for use in the Hystrix Dashboard.
Individual instances are located through Eureka.
Running Turbine requires annotating your main class with the <literal>@EnableTurbine</literal> annotation  (for example, by using spring-cloud-starter-netflix-turbine to set up the classpath).
All of the documented configuration properties from <link xl:href="https://github.com/Netflix/Turbine/wiki/Configuration-(1.x)">the Turbine 1 wiki</link> apply.
The only difference is that the <literal>turbine.instanceUrlSuffix</literal> does not need the port prepended, as this is handled automatically unless <literal>turbine.instanceInsertPort=false</literal>.</simpara>
<note>
<simpara>By default, Turbine looks for the <literal>/hystrix.stream</literal> endpoint on a registered instance by looking up its <literal>hostName</literal> and <literal>port</literal> entries in Eureka and then appending <literal>/hystrix.stream</literal> to it.
If the instance&#8217;s metadata contains <literal>management.port</literal>, it is used instead of the <literal>port</literal> value for the <literal>/hystrix.stream</literal> endpoint.
By default, the metadata entry called <literal>management.port</literal> is equal to the <literal>management.port</literal> configuration property.
It can be overridden though with following configuration:</simpara>
</note>
<screen>eureka:
  instance:
    metadata-map:
      management.port: ${management.port:8081}</screen>
<simpara>The <literal>turbine.appConfig</literal> configuration key is a list of Eureka serviceIds that turbine uses to lookup instances.
The turbine stream is then used in the Hystrix dashboard with a URL similar to the following:</simpara>
<simpara><literal><link xl:href="https://my.turbine.server:8080/turbine.stream?cluster=CLUSTERNAME">https://my.turbine.server:8080/turbine.stream?cluster=CLUSTERNAME</link></literal></simpara>
<simpara>The cluster parameter can be omitted if the name is <literal>default</literal>.
The <literal>cluster</literal> parameter must match an entry in <literal>turbine.aggregator.clusterConfig</literal>.
Values returned from Eureka are upper-case. Consequently, the following example works if there is an application called <literal>customers</literal> registered with Eureka:</simpara>
<screen>turbine:
  aggregator:
    clusterConfig: CUSTOMERS
  appConfig: customers</screen>
<simpara>If you need to customize which cluster names should be used by Turbine (because you do not want to store cluster names in
<literal>turbine.aggregator.clusterConfig</literal> configuration), provide a bean of type <literal>TurbineClustersProvider</literal>.</simpara>
<simpara>The <literal>clusterName</literal> can be customized by a SPEL expression in <literal>turbine.clusterNameExpression</literal> with root as an instance of <literal>InstanceInfo</literal>.
The default value is <literal>appName</literal>, which means that the Eureka <literal>serviceId</literal> becomes the cluster key (that is, the <literal>InstanceInfo</literal> for customers has an <literal>appName</literal> of <literal>CUSTOMERS</literal>).
A different example is <literal>turbine.clusterNameExpression=aSGName</literal>, which gets the cluster name from the AWS ASG name.
The following listing shows another example:</simpara>
<screen>turbine:
  aggregator:
    clusterConfig: SYSTEM,USER
  appConfig: customers,stores,ui,admin
  clusterNameExpression: metadata['cluster']</screen>
<simpara>In the preceding example, the cluster name from four services is pulled from their metadata map and is expected to have values that include <literal>SYSTEM</literal> and <literal>USER</literal>.</simpara>
<simpara>To use the &#8220;default&#8221; cluster for all apps, you need a string literal expression (with single quotes and escaped with double quotes if it is in YAML as well):</simpara>
<screen>turbine:
  appConfig: customers,stores
  clusterNameExpression: "'default'"</screen>
<simpara>Spring Cloud provides a <literal>spring-cloud-starter-netflix-turbine</literal> that has all the dependencies you need to get a Turbine server running. To ad Turnbine, create a Spring Boot application and annotate it with <literal>@EnableTurbine</literal>.</simpara>
<note>
<simpara>By default, Spring Cloud lets Turbine use the host and port to allow multiple processes per host, per cluster.
If you want the native Netflix behavior built into Turbine to <emphasis>not</emphasis> allow multiple processes per host, per cluster (the key to the instance ID is the hostname), set <literal>turbine.combineHostPort=false</literal>.</simpara>
</note>
<section xml:id="_clusters_endpoint">
<title>Clusters Endpoint</title>
<simpara>In some situations it might be useful for other applications to know what custers have been configured
in Turbine.  To support this you can use the <literal>/clusters</literal> endpoint which will return a JSON array of
all the configured clusters.</simpara>
<formalpara>
<title>GET /clusters</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
  {
    "name": "RACES",
    "link": "http://localhost:8383/turbine.stream?cluster=RACES"
  },
  {
    "name": "WEB",
    "link": "http://localhost:8383/turbine.stream?cluster=WEB"
  }
]</programlisting>
</para>
</formalpara>
<simpara>This endpoint can be disabled by setting <literal>turbine.endpoints.clusters.enabled</literal> to <literal>false</literal>.</simpara>
</section>
</section>
<section xml:id="_turbine_stream">
<title>Turbine Stream</title>
<simpara>In some environments (such as in a PaaS setting), the classic Turbine model of pulling metrics from all the distributed Hystrix commands does not work.
In that case, you might want to have your Hystrix commands push metrics to Turbine. Spring Cloud enables that with messaging.
To do so on the client, add a dependency to <literal>spring-cloud-netflix-hystrix-stream</literal> and the <literal>spring-cloud-starter-stream-*</literal> of your choice.
See the <link xl:href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/htmlsingle/">Spring Cloud Stream documentation</link> for details on the brokers and how to configure the client credentials. It should work out of the box for a local broker.</simpara>
<simpara>On the server side, create a Spring Boot application and annotate it with <literal>@EnableTurbineStream</literal>.
The Turbine Stream server requires the use of Spring Webflux, therefore <literal>spring-boot-starter-webflux</literal> needs to be included in your project.
By default <literal>spring-boot-starter-webflux</literal> is included when adding <literal>spring-cloud-starter-netflix-turbine-stream</literal> to your application.</simpara>
<simpara>You can then point the Hystrix Dashboard to the Turbine Stream Server instead of individual Hystrix streams.
If Turbine Stream is running on port 8989 on myhost, then put <literal><link xl:href="http://myhost:8989">http://myhost:8989</link></literal> in the stream input field in the Hystrix Dashboard.
Circuits are prefixed by their respective <literal>serviceId</literal>, followed by a dot (<literal>.</literal>), and then the circuit name.</simpara>
<simpara>Spring Cloud provides a <literal>spring-cloud-starter-netflix-turbine-stream</literal> that has all the dependencies you need to get a Turbine Stream server running.
You can then add the Stream binder of your choice&#8201;&#8212;&#8201;such as <literal>spring-cloud-starter-stream-rabbit</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-ribbon">
<title>Client Side Load Balancer: Ribbon</title>
<simpara>Ribbon is a client-side load balancer that gives you a lot of control over the behavior of HTTP and TCP clients.
Feign already uses Ribbon, so, if you use <literal>@FeignClient</literal>, this section also applies.</simpara>
<simpara>A central concept in Ribbon is that of the named client.
Each load balancer is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer (for example, by using the <literal>@FeignClient</literal> annotation).
On demand, Spring Cloud creates a new ensemble as an <literal>ApplicationContext</literal> for each named client by using
<literal>RibbonClientConfiguration</literal>.
This contains (amongst other things) an <literal>ILoadBalancer</literal>, a <literal>RestClient</literal>, and a <literal>ServerListFilter</literal>.</simpara>
<section xml:id="netflix-ribbon-starter">
<title>How to Include Ribbon</title>
<simpara>To include Ribbon in your project, use the starter with a group ID of <literal>org.springframework.cloud</literal> and an artifact ID of <literal>spring-cloud-starter-netflix-ribbon</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
</section>
<section xml:id="_customizing_the_ribbon_client">
<title>Customizing the Ribbon Client</title>
<simpara>You can configure some bits of a Ribbon client by using external properties in <literal>&lt;client&gt;.ribbon.*</literal>, which is similar to using the Netflix APIs natively, except that you can use Spring Boot configuration files.
The native options can be inspected as static fields in <link xl:href="https://github.com/Netflix/ribbon/blob/master/ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java"><literal>CommonClientConfigKey</literal></link> (part of ribbon-core).</simpara>
<simpara>Spring Cloud also lets you take full control of the client by declaring additional configuration (on top of the <literal>RibbonClientConfiguration</literal>) using <literal>@RibbonClient</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
@RibbonClient(name = "custom", configuration = CustomConfiguration.class)
public class TestConfiguration {
}</programlisting>
<simpara>In this case, the client is composed from the components already in <literal>RibbonClientConfiguration</literal>, together with any in <literal>CustomConfiguration</literal> (where the latter generally overrides the former).</simpara>
<warning>
<simpara>The <literal>CustomConfiguration</literal> clas must be a <literal>@Configuration</literal> class, but take care that it is not in a <literal>@ComponentScan</literal> for the main application context.
Otherwise, it is shared by all the <literal>@RibbonClients</literal>. If you use <literal>@ComponentScan</literal> (or <literal>@SpringBootApplication</literal>), you need to take steps to avoid it being included (for instance, you can put it in a separate, non-overlapping package or specify the packages to scan explicitly in the <literal>@ComponentScan</literal>).</simpara>
</warning>
<simpara>The following table shows the beans that Spring Cloud Netflix provides by default for Ribbon:</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<?dbhtml table-width="60%"?>
<?dbfo table-width="60%"?>
<?dblatex table-width="60%"?>
<tgroup cols="3">
<colspec colname="col_1" colwidth="85*"/>
<colspec colname="col_2" colwidth="85*"/>
<colspec colname="col_3" colwidth="85*"/>
<thead>
<row>
<entry align="center" valign="top">Bean Type</entry>
<entry align="center" valign="top">Bean Name</entry>
<entry align="center" valign="top">Class Name</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>IClientConfig</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonClientConfig</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>DefaultClientConfigImpl</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>IRule</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonRule</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ZoneAvoidanceRule</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>IPing</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonPing</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>DummyPing</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ServerList&lt;Server&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonServerList</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ConfigurationBasedServerList</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ServerListFilter&lt;Server&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonServerListFilter</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ZonePreferenceServerListFilter</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ILoadBalancer</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonLoadBalancer</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ZoneAwareLoadBalancer</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ServerListUpdater</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>ribbonServerListUpdater</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>PollingServerListUpdater</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Creating a bean of one of those type and placing it in a <literal>@RibbonClient</literal> configuration (such as <literal>FooConfiguration</literal> above) lets you override each one of the beans described, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
protected static class FooConfiguration {
	@Bean
	public ZonePreferenceServerListFilter serverListFilter() {
		ZonePreferenceServerListFilter filter = new ZonePreferenceServerListFilter();
		filter.setZone("myTestZone");
		return filter;
	}

	@Bean
	public IPing ribbonPing() {
		return new PingUrl();
	}
}</programlisting>
<simpara>The include statement in the preceding example replaces <literal>NoOpPing</literal> with <literal>PingUrl</literal> and provides a custom <literal>serverListFilter</literal>.</simpara>
</section>
<section xml:id="_customizing_the_default_for_all_ribbon_clients">
<title>Customizing the Default for All Ribbon Clients</title>
<simpara>A default configuration can be provided for all Ribbon Clients by using the <literal>@RibbonClients</literal> annotation and registering a default configuration, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RibbonClients(defaultConfiguration = DefaultRibbonConfig.class)
public class RibbonClientDefaultConfigurationTestsConfig {

	public static class BazServiceList extends ConfigurationBasedServerList {
		public BazServiceList(IClientConfig config) {
			super.initWithNiwsConfig(config);
		}
	}
}

@Configuration
class DefaultRibbonConfig {

	@Bean
	public IRule ribbonRule() {
		return new BestAvailableRule();
	}

	@Bean
	public IPing ribbonPing() {
		return new PingUrl();
	}

	@Bean
	public ServerList&lt;Server&gt; ribbonServerList(IClientConfig config) {
		return new RibbonClientDefaultConfigurationTestsConfig.BazServiceList(config);
	}

	@Bean
	public ServerListSubsetFilter serverListFilter() {
		ServerListSubsetFilter filter = new ServerListSubsetFilter();
		return filter;
	}

}</programlisting>
</section>
<section xml:id="_customizing_the_ribbon_client_by_setting_properties">
<title>Customizing the Ribbon Client by Setting Properties</title>
<simpara>Starting with version 1.2.0, Spring Cloud Netflix now supports customizing Ribbon clients by setting properties to be compatible with the <link xl:href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers#components-of-load-balancer">Ribbon documentation</link>.</simpara>
<simpara>This lets you change behavior at start up time in different environments.</simpara>
<simpara>The following list shows the supported properties&gt;:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>&lt;clientName&gt;.ribbon.NFLoadBalancerClassName</literal>: Should implement <literal>ILoadBalancer</literal></simpara>
</listitem>
<listitem>
<simpara><literal>&lt;clientName&gt;.ribbon.NFLoadBalancerRuleClassName</literal>: Should implement <literal>IRule</literal></simpara>
</listitem>
<listitem>
<simpara><literal>&lt;clientName&gt;.ribbon.NFLoadBalancerPingClassName</literal>: Should implement <literal>IPing</literal></simpara>
</listitem>
<listitem>
<simpara><literal>&lt;clientName&gt;.ribbon.NIWSServerListClassName</literal>: Should implement <literal>ServerList</literal></simpara>
</listitem>
<listitem>
<simpara><literal>&lt;clientName&gt;.ribbon.NIWSServerListFilterClassName</literal>: Should implement <literal>ServerListFilter</literal></simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Classes defined in these properties have precedence over beans defined by using <literal>@RibbonClient(configuration=MyRibbonConfig.class)</literal> and the defaults provided by Spring Cloud Netflix.</simpara>
</note>
<simpara>To set the <literal>IRule</literal> for a service name called <literal>users</literal>, you could set the following properties:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>users:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule</screen>
</para>
</formalpara>
<simpara>See the <link xl:href="https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers">Ribbon documentation</link> for implementations provided by Ribbon.</simpara>
</section>
<section xml:id="_using_ribbon_with_eureka">
<title>Using Ribbon with Eureka</title>
<simpara>When Eureka is used in conjunction with Ribbon (that is, both are on the classpath), the <literal>ribbonServerList</literal> is overridden with an extension of <literal>DiscoveryEnabledNIWSServerList</literal>, which populates the list of servers from Eureka.
It also replaces the <literal>IPing</literal> interface with <literal>NIWSDiscoveryPing</literal>, which delegates to Eureka to determine if a server is up.
The <literal>ServerList</literal> that is installed by default is a <literal>DomainExtractingServerList</literal>. Its purpose is to make metadata available to the load balancer without using AWS AMI metadata (which is what Netflix relies on).
By default, the server list is constructed with &#8220;zone&#8221; information, as provided in the instance metadata (so, on the remote clients, set <literal>eureka.instance.metadataMap.zone</literal>).
If that is missing and if the <literal>approximateZoneFromHostname</literal> flag is set, it can use the domain name from the server hostname as a proxy for the zone.
Once the zone information is available, it can be used in a <literal>ServerListFilter</literal>.
By default, it is used to locate a server in the same zone as the client, because the default is a <literal>ZonePreferenceServerListFilter</literal>.
By default, the zone of the client is determined in the same way as the remote instances (that is, through <literal>eureka.instance.metadataMap.zone</literal>).</simpara>
<note>
<simpara>The orthodox &#8220;archaius&#8221; way to set the client zone is through a configuration property called "@zone".
If it is available, Spring Cloud uses that in preference to all other settings (note that the key must be quoted in YAML configuration).</simpara>
</note>
<note>
<simpara>If there is no other source of zone data, then a guess is made, based on the client configuration (as opposed to the instance configuration).
We take <literal>eureka.client.availabilityZones</literal>, which is a map from region name to a list of zones, and pull out the first zone for the instance&#8217;s own region (that is, the <literal>eureka.client.region</literal>, which defaults to "us-east-1", for compatibility with native Netflix).</simpara>
</note>
</section>
<section xml:id="spring-cloud-ribbon-without-eureka">
<title>Example: How to Use Ribbon Without Eureka</title>
<simpara>Eureka is a convenient way to abstract the discovery of remote servers so that you do not have to hard code their URLs in clients.
However, if you prefer not to use Eureka, Ribbon and Feign also work.
Suppose you have declared a <literal>@RibbonClient</literal> for "stores", and Eureka is not in use (and not even on the classpath).
The Ribbon client defaults to a configured server list.
You can supply the configuration as follows:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>stores:
  ribbon:
    listOfServers: example.com,google.com</screen>
</para>
</formalpara>
</section>
<section xml:id="_example_disable_eureka_use_in_ribbon">
<title>Example: Disable Eureka Use in Ribbon</title>
<simpara>Setting the <literal>ribbon.eureka.enabled</literal> property to <literal>false</literal> explicitly disables the use of Eureka in Ribbon, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>ribbon:
  eureka:
   enabled: false</screen>
</para>
</formalpara>
</section>
<section xml:id="_using_the_ribbon_api_directly">
<title>Using the Ribbon API Directly</title>
<simpara>You can also use the <literal>LoadBalancerClient</literal> directly, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class MyClass {
    @Autowired
    private LoadBalancerClient loadBalancer;

    public void doStuff() {
        ServiceInstance instance = loadBalancer.choose("stores");
        URI storesUri = URI.create(String.format("http://%s:%s", instance.getHost(), instance.getPort()));
        // ... do something with the URI
    }
}</programlisting>
</section>
<section xml:id="ribbon-child-context-eager-load">
<title>Caching of Ribbon Configuration</title>
<simpara>Each Ribbon named client has a corresponding child application Context that Spring Cloud maintains.
This application context is lazily loaded on the first request to the named client.
This lazy loading behavior can be changed to instead eagerly load these child application contexts at startup, by specifying the names of the Ribbon clients, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>ribbon:
  eager-load:
    enabled: true
    clients: client1, client2, client3</screen>
</para>
</formalpara>
</section>
<section xml:id="how-to-configure-hystrix-thread-pools">
<title>How to Configure Hystrix Thread Pools</title>
<simpara>If you change <literal>zuul.ribbonIsolationStrategy</literal> to <literal>THREAD</literal>, the thread isolation strategy for Hystrix is used for all routes.
In that case, the <literal>HystrixThreadPoolKey</literal> is set to <literal>RibbonCommand</literal> as the default.
It means that HystrixCommands for all routes are executed in the same Hystrix thread pool.
This behavior can be changed with the following configuration:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>zuul:
  threadPool:
    useSeparateThreadPools: true</screen>
</para>
</formalpara>
<simpara>The preceding example results in HystrixCommands being executed in the Hystrix thread pool for each route.</simpara>
<simpara>In this case, the default <literal>HystrixThreadPoolKey</literal> is the same as the service ID for each route.
To add a prefix to <literal>HystrixThreadPoolKey</literal>, set <literal>zuul.threadPool.threadPoolKeyPrefix</literal> to the value that you want to add, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>zuul:
  threadPool:
    useSeparateThreadPools: true
    threadPoolKeyPrefix: zuulgw</screen>
</para>
</formalpara>
</section>
<section xml:id="how-to-provdie-a-key-to-ribbon">
<title>How to Provide a Key to Ribbon&#8217;s <literal>IRule</literal></title>
<simpara>If you need to provide your own <literal>IRule</literal> implementation to handle a special routing requirement like a &#8220;canary&#8221; test, pass some information to the <literal>choose</literal> method of <literal>IRule</literal>.</simpara>
<formalpara>
<title>com.netflix.loadbalancer.IRule.java</title>
<para>
<screen>public interface IRule{
    public Server choose(Object key);
         :</screen>
</para>
</formalpara>
<simpara>You can provide some information that is used by your <literal>IRule</literal> implementation to choose a target server, as shown in the following example:</simpara>
<screen>RequestContext.getCurrentContext()
              .set(FilterConstants.LOAD_BALANCER_KEY, "canary-test");</screen>
<simpara>If you put any object into the <literal>RequestContext</literal> with a key of <literal>FilterConstants.LOAD_BALANCER_KEY</literal>, it is passed to the <literal>choose</literal> method of the  <literal>IRule</literal> implementation.
The code shown in the preceding example must be executed before <literal>RibbonRoutingFilter</literal> is executed.
Zuul&#8217;s pre filter is the best place to do that.
You can access HTTP headers and query parameters through the <literal>RequestContext</literal> in pre filter, so it can be used to determine the <literal>LOAD_BALANCER_KEY</literal> that is passed to Ribbon.
If you do not put any value with <literal>LOAD_BALANCER_KEY</literal> in <literal>RequestContext</literal>, null is passed as a parameter of the <literal>choose</literal> method.</simpara>
</section>
</chapter>
<chapter xml:id="_external_configuration_archaius">
<title>External Configuration: Archaius</title>
<simpara><link xl:href="https://github.com/Netflix/archaius">Archaius</link> is the Netflix client-side configuration library.
It is the library used by all of the Netflix OSS components for configuration.
Archaius is an extension of the <link xl:href="https://commons.apache.org/proper/commons-configuration">Apache Commons Configuration</link> project.
It allows updates to configuration by either polling a source for changes or by letting a source push changes to the client.
Archaius uses Dynamic&lt;Type&gt;Property classes as handles to properties, as shown in the following example:</simpara>
<formalpara>
<title>Archaius Example</title>
<para>
<programlisting language="java" linenumbering="unnumbered">class ArchaiusTest {
    DynamicStringProperty myprop = DynamicPropertyFactory
            .getInstance()
            .getStringProperty("my.prop");

    void doSomething() {
        OtherClass.someMethod(myprop.get());
    }
}</programlisting>
</para>
</formalpara>
<simpara>Archaius has its own set of configuration files and loading priorities.
Spring applications should generally not use Archaius directly, but the need to configure the Netflix tools natively remains.
Spring Cloud has a Spring Environment Bridge so that Archaius can read properties from the Spring Environment.
This bridge allows Spring Boot projects to use the normal configuration toolchain while letting them configure the Netflix tools as documented (for the most part).</simpara>
</chapter>
<chapter xml:id="_router_and_filter_zuul">
<title>Router and Filter: Zuul</title>
<simpara>Routing is an integral part of a microservice architecture.
For example, <literal>/</literal> may be mapped to your web application, <literal>/api/users</literal> is mapped to the user service and <literal>/api/shop</literal> is mapped to the shop service.
<link xl:href="https://github.com/Netflix/zuul">Zuul</link> is a JVM-based router and server-side load balancer from Netflix.</simpara>
<simpara><link xl:href="https://www.slideshare.net/MikeyCohen1/edge-architecture-ieee-international-conference-on-cloud-engineering-32240146/27">Netflix uses Zuul</link> for the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Authentication</simpara>
</listitem>
<listitem>
<simpara>Insights</simpara>
</listitem>
<listitem>
<simpara>Stress Testing</simpara>
</listitem>
<listitem>
<simpara>Canary Testing</simpara>
</listitem>
<listitem>
<simpara>Dynamic Routing</simpara>
</listitem>
<listitem>
<simpara>Service Migration</simpara>
</listitem>
<listitem>
<simpara>Load Shedding</simpara>
</listitem>
<listitem>
<simpara>Security</simpara>
</listitem>
<listitem>
<simpara>Static Response handling</simpara>
</listitem>
<listitem>
<simpara>Active/Active traffic management</simpara>
</listitem>
</itemizedlist>
<simpara>Zuul&#8217;s rule engine lets rules and filters be written in essentially any JVM language, with built-in support for Java and Groovy.</simpara>
<note>
<simpara>The configuration property <literal>zuul.max.host.connections</literal> has been replaced by two new properties, <literal>zuul.host.maxTotalConnections</literal> and <literal>zuul.host.maxPerRouteConnections</literal>, which default to 200 and 20 respectively.</simpara>
</note>
<note>
<simpara>The default Hystrix isolation pattern (<literal>ExecutionIsolationStrategy</literal>) for all routes is <literal>SEMAPHORE</literal>.
<literal>zuul.ribbonIsolationStrategy</literal> can be changed to <literal>THREAD</literal> if that isolation pattern is preferred.</simpara>
</note>
<section xml:id="netflix-zuul-starter">
<title>How to Include Zuul</title>
<simpara>To include Zuul in your project, use the starter with a group ID of <literal>org.springframework.cloud</literal> and a artifact ID of <literal>spring-cloud-starter-netflix-zuul</literal>.
See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
</section>
<section xml:id="netflix-zuul-reverse-proxy">
<title>Embedded Zuul Reverse Proxy</title>
<simpara>Spring Cloud has created an embedded Zuul proxy to ease the development of a common use case where a UI application wants to make proxy calls to one or more back end services.
This feature is useful for a user interface to proxy to the backend services it requires, avoiding the need to manage CORS and authentication concerns independently for all the backends.</simpara>
<simpara>To enable it, annotate a Spring Boot main class with <literal>@EnableZuulProxy</literal>. Doing so causes local calls to be forwarded to the appropriate service.
By convention, a service with an ID of <literal>users</literal> receives requests from the proxy located at <literal>/users</literal> (with the prefix stripped).
The proxy uses Ribbon to locate an instance to which to forward through discovery.
All requests are executed in a <link linkend="hystrix-fallbacks-for-routes">hystrix command</link>, so failures appear in Hystrix metrics.
Once the circuit is open, the proxy does not try to contact the service.</simpara>
<note>
<simpara>the Zuul starter does not include a discovery client, so, for routes based on service IDs, you need to provide one of those on the classpath as well (Eureka is one choice).</simpara>
</note>
<simpara>To skip having a service automatically added, set <literal>zuul.ignored-services</literal> to a list of service ID patterns.
If a service matches a pattern that is ignored but is also included in the explicitly configured routes map, it is unignored, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  ignoredServices: '*'
  routes:
    users: /myusers/**</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, all services are ignored, <emphasis role="strong">except</emphasis> for <literal>users</literal>.</simpara>
<simpara>To augment or change the proxy routes, you can add external configuration, as follows:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users: /myusers/**</programlisting>
</para>
</formalpara>
<simpara>The preceding example means that HTTP calls to <literal>/myusers</literal> get forwarded to the <literal>users</literal> service (for example <literal>/myusers/101</literal> is forwarded to <literal>/101</literal>).</simpara>
<simpara>To get more fine-grained control over a route, you can specify the path and the serviceId independently, as follows:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
      serviceId: users_service</programlisting>
</para>
</formalpara>
<simpara>The preceding example means that HTTP calls to <literal>/myusers</literal> get forwarded to the <literal>users_service</literal> service.
The route must have a <literal>path</literal> that can be specified as an ant-style pattern, so <literal>/myusers/*</literal> only matches one level, but <literal>/myusers/**</literal> matches hierarchically.</simpara>
<simpara>The location of the backend can be specified as either a <literal>serviceId</literal> (for a service from discovery) or a <literal>url</literal> (for a physical location), as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
      url: https://example.com/users_service</programlisting>
</para>
</formalpara>
<simpara>These simple url-routes do not get executed as a <literal>HystrixCommand</literal>, nor do they load-balance multiple URLs with Ribbon.
To achieve those goals, you can specify a <literal>serviceId</literal> with a static list of servers, as follows:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">zuul:
  routes:
    echo:
      path: /myusers/**
      serviceId: myusers-service
      stripPrefix: true

hystrix:
  command:
    myusers-service:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: ...

myusers-service:
  ribbon:
    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
    listOfServers: https://example1.com,http://example2.com
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxTotalHttpConnections: 500
    MaxConnectionsPerHost: 100</programlisting>
</para>
</formalpara>
<simpara>Another method is specifiying a service-route and configuring a Ribbon client for the <literal>serviceId</literal> (doing so requires disabling Eureka support in Ribbon&#8201;&#8212;&#8201;see <link linkend="spring-cloud-ribbon-without-eureka">above for more information</link>), as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">zuul:
  routes:
    users:
      path: /myusers/**
      serviceId: users

ribbon:
  eureka:
    enabled: false

users:
  ribbon:
    listOfServers: example.com,google.com</programlisting>
</para>
</formalpara>
<simpara>You can provide a convention between <literal>serviceId</literal> and routes by using <literal>regexmapper</literal>.
It uses regular-expression named groups to extract variables from <literal>serviceId</literal> and inject them into a route pattern, as shown in the following example:</simpara>
<formalpara>
<title>ApplicationConfiguration.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Bean
public PatternServiceRouteMapper serviceRouteMapper() {
    return new PatternServiceRouteMapper(
        "(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)",
        "${version}/${name}");
}</programlisting>
</para>
</formalpara>
<simpara>The preceding example means that a <literal>serviceId</literal> of <literal>myusers-v1</literal> is mapped to route <literal>/v1/myusers/**</literal>.
Any regular expression is accepted, but all named groups must be present in both <literal>servicePattern</literal> and <literal>routePattern</literal>.
If <literal>servicePattern</literal> does not match a <literal>serviceId</literal>, the default behavior is used.
In the preceding example, a <literal>serviceId</literal> of <literal>myusers</literal> is mapped to the "/myusers/**" route (with no version detected).
This feature is disabled by default and only applies to discovered services.</simpara>
<simpara>To add a prefix to all mappings, set <literal>zuul.prefix</literal> to a value, such as <literal>/api</literal>.
By default, the proxy prefix is stripped from the request before the request is forwarded by (you can switch this behavior off with <literal>zuul.stripPrefix=false</literal>).
You can also switch off the stripping of the service-specific prefix from individual routes, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
      stripPrefix: false</programlisting>
</para>
</formalpara>
<note>
<simpara><literal>zuul.stripPrefix</literal> only applies to the prefix set in <literal>zuul.prefix</literal>.
It does not have any effect on prefixes defined within a given route&#8217;s <literal>path</literal>.</simpara>
</note>
<simpara>In the preceding example, requests to <literal>/myusers/101</literal> are forwarded to <literal>/myusers/101</literal> on the <literal>users</literal> service.</simpara>
<simpara>The <literal>zuul.routes</literal> entries actually bind to an object of type <literal>ZuulProperties</literal>.
If you look at the properties of that object, you can see that it also has a <literal>retryable</literal> flag.
Set that flag to <literal>true</literal> to have the Ribbon client automatically retry failed requests.
You can also set that flag to <literal>true</literal> when you need to modify the parameters of the retry operations that use the Ribbon client configuration.</simpara>
<simpara>By default, the <literal>X-Forwarded-Host</literal> header is added to the forwarded requests.
To turn it off, set <literal>zuul.addProxyHeaders = false</literal>.
By default, the prefix path is stripped, and the request to the backend picks up a <literal>X-Forwarded-Prefix</literal> header (<literal>/myusers</literal> in the examples shown earlier).</simpara>
<simpara>If you set a default route (<literal>/</literal>), an application with <literal>@EnableZuulProxy</literal> could act as a standalone server. For example, <literal>zuul.route.home: /</literal> would route all traffic ("/**") to the "home" service.</simpara>
<simpara>If more fine-grained ignoring is needed, you can specify specific patterns to ignore.
These patterns are evaluated at the start of the route location process, which means prefixes should be included in the pattern to warrant a match.
Ignored patterns span all services and supersede any other route specification.
The following example shows how to create ignored patterns:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  ignoredPatterns: /**/admin/**
  routes:
    users: /myusers/**</programlisting>
</para>
</formalpara>
<simpara>The preceding example means that all calls (such as <literal>/myusers/101</literal>) are forwarded to <literal>/101</literal> on the <literal>users</literal> service.
However, calls including <literal>/admin/</literal> do not resolve.</simpara>
<warning>
<simpara>If you need your routes to have their order preserved, you need to use a YAML file, as the ordering is lost when using a properties file.
The following example shows such a YAML file:</simpara>
</warning>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
    legacy:
      path: /**</programlisting>
</para>
</formalpara>
<simpara>If you were to use a properties file, the <literal>legacy</literal> path might end up in front of the <literal>users</literal>
path, rendering the <literal>users</literal> path unreachable.</simpara>
</section>
<section xml:id="_zuul_http_client">
<title>Zuul Http Client</title>
<simpara>The default HTTP client used by Zuul is now backed by the Apache HTTP Client instead of the deprecated Ribbon <literal>RestClient</literal>.
To use <literal>RestClient</literal> or <literal>okhttp3.OkHttpClient</literal>, set <literal>ribbon.restclient.enabled=true</literal> or <literal>ribbon.okhttp.enabled=true</literal>, respectively.
If you would like to customize the Apache HTTP client or the OK HTTP client, provide a bean of type <literal>ClosableHttpClient</literal> or <literal>OkHttpClient</literal>.</simpara>
</section>
<section xml:id="_cookies_and_sensitive_headers">
<title>Cookies and Sensitive Headers</title>
<simpara>You can share headers between services in the same system, but you probably do not want sensitive headers leaking downstream into external servers.
You can specify a list of ignored headers as part of the route configuration.
Cookies play a special role, because they have well defined semantics in browsers, and they are always to be treated as sensitive.
If the consumer of your proxy is a browser, then cookies for downstream services also cause problems for the user, because they all get jumbled up together (all downstream services look like they come from the same place).</simpara>
<simpara>If you are careful with the design of your services, (for example, if only one of the downstream services sets cookies), you might be able to let them flow from the backend all the way up to the caller.
Also, if your proxy sets cookies and all your back-end services are part of the same system, it can be natural to simply share them (and, for instance, use Spring Session to link them up to some shared state).
Other than that, any cookies that get set by downstream services are likely to be not useful to the caller, so it is recommended that you make (at least) <literal>Set-Cookie</literal> and <literal>Cookie</literal> into sensitive headers for routes that are not part of your domain.
Even for routes that are part of your domain, try to think carefully about what it means before letting cookies flow between them and the proxy.</simpara>
<simpara>The sensitive headers can be configured as a comma-separated list per route, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
      sensitiveHeaders: Cookie,Set-Cookie,Authorization
      url: https://downstream</programlisting>
</para>
</formalpara>
<note>
<simpara>This is the default value for <literal>sensitiveHeaders</literal>, so you need not set it unless you want it to be different.
This is new in Spring Cloud Netflix 1.1 (in 1.0, the user had no control over headers, and all cookies flowed in both directions).</simpara>
</note>
<simpara>The <literal>sensitiveHeaders</literal> are a blacklist, and the default is not empty.
Consequently, to make Zuul send all headers (except the <literal>ignored</literal> ones), you must explicitly set it to the empty list.
Doing so is necessary if you want to pass cookie or authorization headers to your back end. The following example shows how to use <literal>sensitiveHeaders</literal>:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    users:
      path: /myusers/**
      sensitiveHeaders:
      url: https://downstream</programlisting>
</para>
</formalpara>
<simpara>You can also set sensitive headers, by setting <literal>zuul.sensitiveHeaders</literal>.
If <literal>sensitiveHeaders</literal> is set on a route, it overrides the global <literal>sensitiveHeaders</literal> setting.</simpara>
</section>
<section xml:id="_ignored_headers">
<title>Ignored Headers</title>
<simpara>In addition to the route-sensitive headers, you can set a global value called <literal>zuul.ignoredHeaders</literal> for values (both request and response) that should be discarded during interactions with downstream services.
By default, if Spring Security is not on the classpath, these are empty.
Otherwise, they are initialized to a set of well known &#8220;security&#8221; headers (for example, involving caching) as specified by Spring Security.
The assumption in this case is that the downstream services might add these headers, too, but we want the values from the proxy.
To not discard these well known security headers when Spring Security is on the classpath, you can set <literal>zuul.ignoreSecurityHeaders</literal> to <literal>false</literal>.
Doing so can be useful if you disabled the HTTP Security response headers in Spring Security and want the values provided by downstream services.</simpara>
</section>
<section xml:id="_management_endpoints">
<title>Management Endpoints</title>
<simpara>By default, if you use <literal>@EnableZuulProxy</literal> with the Spring Boot Actuator, you enable two additional endpoints:</simpara>
<itemizedlist>
<listitem>
<simpara>Routes</simpara>
</listitem>
<listitem>
<simpara>Filters</simpara>
</listitem>
</itemizedlist>
<section xml:id="_routes_endpoint">
<title>Routes Endpoint</title>
<simpara>A GET to the routes endpoint at <literal>/routes</literal> returns a list of the mapped routes:</simpara>
<formalpara>
<title>GET /routes</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  /stores/**: "http://localhost:8081"
}</programlisting>
</para>
</formalpara>
<simpara>Additional route details can be requested by adding the <literal>?format=details</literal> query string to <literal>/routes</literal>.
Doing so produces the following output:</simpara>
<formalpara>
<title>GET /routes/details</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "/stores/**": {
    "id": "stores",
    "fullPath": "/stores/**",
    "location": "http://localhost:8081",
    "path": "/**",
    "prefix": "/stores",
    "retryable": false,
    "customSensitiveHeaders": false,
    "prefixStripped": true
  }
}</programlisting>
</para>
</formalpara>
<simpara>A <literal>POST</literal> to <literal>/routes</literal> forces a refresh of the existing routes (for example, when there have been changes in the service catalog).
You can disable this endpoint by setting <literal>endpoints.routes.enabled</literal> to <literal>false</literal>.</simpara>
<note>
<simpara>the routes should respond automatically to changes in the service catalog, but the <literal>POST</literal> to <literal>/routes</literal> is a way to force the change
to happen immediately.</simpara>
</note>
</section>
<section xml:id="_filters_endpoint">
<title>Filters Endpoint</title>
<simpara>A <literal>GET</literal> to the filters endpoint at <literal>/filters</literal> returns a map of Zuul filters by type.
For each filter type in the map, you get a list of all the filters of that type, along with their details.</simpara>
</section>
</section>
<section xml:id="_strangulation_patterns_and_local_forwards">
<title>Strangulation Patterns and Local Forwards</title>
<simpara>A common pattern when migrating an existing application or API is to &#8220;strangle&#8221; old endpoints, slowly replacing them with different implementations.
The Zuul proxy is a useful tool for this because you can use it to handle all traffic from the clients of the old endpoints but redirect some of the requests to new ones.</simpara>
<simpara>The following example shows the configuration details for a &#8220;strangle&#8221; scenario:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    first:
      path: /first/**
      url: https://first.example.com
    second:
      path: /second/**
      url: forward:/second
    third:
      path: /third/**
      url: forward:/3rd
    legacy:
      path: /**
      url: https://legacy.example.com</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, we are strangle the &#8220;legacy&#8221; application, which is mapped to all requests that do not match one of the other patterns.
Paths in <literal>/first/**</literal> have been extracted into a new service with an external URL.
Paths in <literal>/second/**</literal> are forwarded so that they can be handled locally (for example, with a normal Spring <literal>@RequestMapping</literal>).
Paths in <literal>/third/**</literal> are also forwarded but with a different prefix (<literal>/third/foo</literal> is forwarded to <literal>/3rd/foo</literal>).</simpara>
<note>
<simpara>The ignored patterns aren&#8217;t completely ignored, they just are not handled by the proxy (so they are also effectively forwarded locally).</simpara>
</note>
</section>
<section xml:id="_uploading_files_through_zuul">
<title>Uploading Files through Zuul</title>
<simpara>If you use <literal>@EnableZuulProxy</literal>, you can use the proxy paths to upload files and it should work, so long as the files are small.
For large files there is an alternative path that bypasses the Spring <literal>DispatcherServlet</literal> (to avoid multipart processing) in "/zuul/*".
In other words, if you have <literal>zuul.routes.customers=/customers/**</literal>, then you can <literal>POST</literal> large files to <literal>/zuul/customers/*</literal>.
The servlet path is externalized via <literal>zuul.servletPath</literal>.
If the proxy route takes you through a Ribbon load balancer, extremely large files also require elevated timeout settings, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000
ribbon:
  ConnectTimeout: 3000
  ReadTimeout: 60000</programlisting>
</para>
</formalpara>
<simpara>Note that, for streaming to work with large files, you need to use chunked encoding in the request (which some browsers do not do by default), as shown in the following example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ curl -v -H "Transfer-Encoding: chunked" \
    -F "file=@mylarge.iso" localhost:9999/zuul/simple/file</programlisting>
</section>
<section xml:id="_query_string_encoding">
<title>Query String Encoding</title>
<simpara>When processing the incoming request, query params are decoded so that they can be available for possible modifications in Zuul filters.
They are then re-encoded the backend request is rebuilt in the route filters.
The result can be different than the original input if (for example) it was encoded with Javascript&#8217;s <literal>encodeURIComponent()</literal> method.
While this causes no issues in most cases, some web servers can be picky with the encoding of complex query string.</simpara>
<simpara>To force the original encoding of the query string, it is possible to pass a special flag to <literal>ZuulProperties</literal> so that the query string is taken as is with the <literal>HttpServletRequest::getQueryString</literal> method, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  forceOriginalQueryStringEncoding: true</programlisting>
</para>
</formalpara>
<note>
<simpara>This special flag works only with <literal>SimpleHostRoutingFilter</literal>. Also, you loose the ability to easily override
query parameters with <literal>RequestContext.getCurrentContext().setRequestQueryParams(someOverriddenParameters)</literal>, because
the query string is now fetched directly on the original <literal>HttpServletRequest</literal>.</simpara>
</note>
</section>
<section xml:id="_plain_embedded_zuul">
<title>Plain Embedded Zuul</title>
<simpara>If you use <literal>@EnableZuulServer</literal> (instead of <literal>@EnableZuulProxy</literal>), you can also run a Zuul server without proxying or selectively switch on parts of the proxying platform.
Any beans that you add to the application of type <literal>ZuulFilter</literal> are installed automatically (as they are with <literal>@EnableZuulProxy</literal>) but without any of the proxy filters being added automatically.</simpara>
<simpara>In that case, the routes into the Zuul server are still specified by configuring "zuul.routes.*", but there is no service discovery and no proxying. Consequently, the "serviceId" and "url" settings are ignored.
The following example maps all paths in "/api/**" to the Zuul filter chain:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> zuul:
  routes:
    api: /api/**</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_disable_zuul_filters">
<title>Disable Zuul Filters</title>
<simpara>Zuul for Spring Cloud comes with a number of <literal>ZuulFilter</literal> beans enabled by default in both proxy and server mode.
See <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/tree/master/spring-cloud-netflix-zuul/src/main/java/org/springframework/cloud/netflix/zuul/filters">the Zuul filters package</link> for the list of filters that you can enable.
If you want to disable one, set <literal>zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true</literal>.
By convention, the package after <literal>filters</literal> is the Zuul filter type.
For example to disable <literal>org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter</literal>, set <literal>zuul.SendResponseFilter.post.disable=true</literal>.</simpara>
</section>
<section xml:id="hystrix-fallbacks-for-routes">
<title>Providing Hystrix Fallbacks For Routes</title>
<simpara>When a circuit for a given route in Zuul is tripped, you can provide a fallback response by creating a bean of type <literal>FallbackProvider</literal>.
Within this bean, you need to specify the route ID the fallback is for and provide a <literal>ClientHttpResponse</literal> to return as a fallback.
The following example shows a relatively simple <literal>FallbackProvider</literal> implementation:</simpara>
<programlisting language="java" linenumbering="unnumbered">class MyFallbackProvider implements FallbackProvider {

    @Override
    public String getRoute() {
        return "customers";
    }

    @Override
    public ClientHttpResponse fallbackResponse(String route, final Throwable cause) {
        if (cause instanceof HystrixTimeoutException) {
            return response(HttpStatus.GATEWAY_TIMEOUT);
        } else {
            return response(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ClientHttpResponse response(final HttpStatus status) {
        return new ClientHttpResponse() {
            @Override
            public HttpStatus getStatusCode() throws IOException {
                return status;
            }

            @Override
            public int getRawStatusCode() throws IOException {
                return status.value();
            }

            @Override
            public String getStatusText() throws IOException {
                return status.getReasonPhrase();
            }

            @Override
            public void close() {
            }

            @Override
            public InputStream getBody() throws IOException {
                return new ByteArrayInputStream("fallback".getBytes());
            }

            @Override
            public HttpHeaders getHeaders() {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                return headers;
            }
        };
    }
}</programlisting>
<simpara>The following example shows how the route configuration for the previous example might appear:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">zuul:
  routes:
    customers: /customers/**</programlisting>
<simpara>If you would like to provide a default fallback for all routes, you can create a bean of type <literal>FallbackProvider</literal> and have the <literal>getRoute</literal> method return <literal>*</literal> or <literal>null</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">class MyFallbackProvider implements FallbackProvider {
    @Override
    public String getRoute() {
        return "*";
    }

    @Override
    public ClientHttpResponse fallbackResponse(String route, Throwable throwable) {
        return new ClientHttpResponse() {
            @Override
            public HttpStatus getStatusCode() throws IOException {
                return HttpStatus.OK;
            }

            @Override
            public int getRawStatusCode() throws IOException {
                return 200;
            }

            @Override
            public String getStatusText() throws IOException {
                return "OK";
            }

            @Override
            public void close() {

            }

            @Override
            public InputStream getBody() throws IOException {
                return new ByteArrayInputStream("fallback".getBytes());
            }

            @Override
            public HttpHeaders getHeaders() {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.APPLICATION_JSON);
                return headers;
            }
        };
    }
}</programlisting>
</section>
<section xml:id="_zuul_timeouts">
<title>Zuul Timeouts</title>
<simpara>If you want to configure the socket timeouts and read timeouts for requests proxied through Zuul, you have two options, based on your configuration:</simpara>
<itemizedlist>
<listitem>
<simpara>If Zuul uses service discovery, you need to configure these timeouts with the
<literal>ribbon.ReadTimeout</literal> and <literal>ribbon.SocketTimeout</literal> Ribbon properties.</simpara>
</listitem>
</itemizedlist>
<simpara>If you have configured Zuul routes by specifying URLs, you need to use
<literal>zuul.host.connect-timeout-millis</literal> and <literal>zuul.host.socket-timeout-millis</literal>.</simpara>
</section>
<section xml:id="zuul-redirect-location-rewrite">
<title>Rewriting the <literal>Location</literal> header</title>
<simpara>If Zuul is fronting a web application, you may need to re-write the <literal>Location</literal> header when the web application redirects through a HTTP status code of <literal>3XX</literal>.
Otherwise, the browser redirects to the web application&#8217;s URL instead of the Zuul URL.
You can configure a <literal>LocationRewriteFilter</literal> Zuul filter to re-write the <literal>Location</literal> header to the Zuul&#8217;s URL.
It also adds back the stripped global and route-specific prefixes.
The following example adds a filter by using a Spring Configuration file:</simpara>
<programlisting language="java" linenumbering="unnumbered">import org.springframework.cloud.netflix.zuul.filters.post.LocationRewriteFilter;
...

@Configuration
@EnableZuulProxy
public class ZuulConfig {
    @Bean
    public LocationRewriteFilter locationRewriteFilter() {
        return new LocationRewriteFilter();
    }
}</programlisting>
<caution>
<simpara>Use this filter carefully. The filter acts on the <literal>Location</literal> header of ALL <literal>3XX</literal> response codes, which may not be appropriate in all scenarios, such as when redirecting the user to an external URL.</simpara>
</caution>
</section>
<section xml:id="_metrics">
<title>Metrics</title>
<simpara>Zuul will provide metrics under the Actuator metrics endpoint for any failures that might occur when routing requests.
These metrics can be viewed by hitting <literal>/actuator/metrics</literal>.  The metrics will have a name that has the format
<literal>ZUUL::EXCEPTION:errorCause:statusCode</literal>.</simpara>
</section>
<section xml:id="zuul-developer-guide">
<title>Zuul Developer Guide</title>
<simpara>For a general overview of how Zuul works, see <link xl:href="https://github.com/Netflix/zuul/wiki/How-it-Works">the Zuul Wiki</link>.</simpara>
<section xml:id="_the_zuul_servlet">
<title>The Zuul Servlet</title>
<simpara>Zuul is implemented as a Servlet. For the general cases, Zuul is embedded into the Spring Dispatch mechanism. This lets Spring MVC be in control of the routing.
In this case, Zuul buffers requests.
If there is a need to go through Zuul without buffering requests (for example, for large file uploads), the Servlet is also installed outside of the Spring Dispatcher.
By default, the servlet has an address of <literal>/zuul</literal>.
This path can be changed with the <literal>zuul.servlet-path</literal> property.</simpara>
</section>
<section xml:id="_zuul_requestcontext">
<title>Zuul RequestContext</title>
<simpara>To pass information between filters, Zuul uses a <link xl:href="https://github.com/Netflix/zuul/blob/1.x/zuul-core/src/main/java/com/netflix/zuul/context/RequestContext.java"><literal>RequestContext</literal></link>.
Its data is held in a <literal>ThreadLocal</literal> specific to each request.
Information about where to route requests, errors, and the actual <literal>HttpServletRequest</literal> and <literal>HttpServletResponse</literal> are stored there.
The <literal>RequestContext</literal> extends <literal>ConcurrentHashMap</literal>, so anything can be stored in the context. <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters/support/FilterConstants.java"><literal>FilterConstants</literal></link> contains the keys used by the filters installed by Spring Cloud Netflix (more on these <link linkend="zuul-developer-guide-enable-filters">later</link>).</simpara>
</section>
<section xml:id="__literal_enablezuulproxy_literal_vs_literal_enablezuulserver_literal">
<title><literal>@EnableZuulProxy</literal> vs. <literal>@EnableZuulServer</literal></title>
<simpara>Spring Cloud Netflix installs a number of filters, depending on which annotation was used to enable Zuul. <literal>@EnableZuulProxy</literal> is a superset of <literal>@EnableZuulServer</literal>. In other words, <literal>@EnableZuulProxy</literal> contains all the filters installed by <literal>@EnableZuulServer</literal>. The additional filters in the &#8220;proxy&#8221; enable routing functionality. If you want a &#8220;blank&#8221; Zuul, you should use <literal>@EnableZuulServer</literal>.</simpara>
</section>
<section xml:id="zuul-developer-guide-enable-filters">
<title><literal>@EnableZuulServer</literal> Filters</title>
<simpara><literal>@EnableZuulServer</literal> creates a <literal>SimpleRouteLocator</literal> that loads route definitions from Spring Boot configuration files.</simpara>
<simpara>The following filters are installed (as normal Spring Beans):</simpara>
<itemizedlist>
<listitem>
<simpara>Pre filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ServletDetectionFilter</literal>: Detects whether the request is through the Spring Dispatcher. Sets a boolean with a key of <literal>FilterConstants.IS_DISPATCHER_SERVLET_REQUEST_KEY</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>FormBodyWrapperFilter</literal>: Parses form data and re-encodes it for downstream requests.</simpara>
</listitem>
<listitem>
<simpara><literal>DebugFilter</literal>: If the <literal>debug</literal> request parameter is set, sets <literal>RequestContext.setDebugRouting()</literal> and <literal>RequestContext.setDebugRequest()</literal> to <literal>true</literal>.
*Route filters:</simpara>
</listitem>
<listitem>
<simpara><literal>SendForwardFilter</literal>: Forwards requests by using the Servlet <literal>RequestDispatcher</literal>. The forwarding location is stored in the <literal>RequestContext</literal> attribute, <literal>FilterConstants.FORWARD_TO_KEY</literal>. This is useful for forwarding to endpoints in the current application.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Post filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>SendResponseFilter</literal>: Writes responses from proxied requests to the current response.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Error filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>SendErrorFilter</literal>: Forwards to <literal>/error</literal> (by default) if <literal>RequestContext.getThrowable()</literal> is not null. You can change the default forwarding path (<literal>/error</literal>) by setting the <literal>error.path</literal> property.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="__literal_enablezuulproxy_literal_filters">
<title><literal>@EnableZuulProxy</literal> Filters</title>
<simpara>Creates a <literal>DiscoveryClientRouteLocator</literal> that loads route definitions from a <literal>DiscoveryClient</literal> (such as Eureka) as well as from properties. A route is created for each <literal>serviceId</literal> from the <literal>DiscoveryClient</literal>. As new services are added, the routes are refreshed.</simpara>
<simpara>In addition to the filters described earlier, the following filters are installed (as normal Spring Beans):</simpara>
<itemizedlist>
<listitem>
<simpara>Pre filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>PreDecorationFilter</literal>: Determines where and how to route, depending on the supplied <literal>RouteLocator</literal>. It also sets various proxy-related headers for downstream requests.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Route filters:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>RibbonRoutingFilter</literal>: Uses Ribbon, Hystrix, and pluggable HTTP clients to send requests. Service IDs are found in the <literal>RequestContext</literal> attribute, <literal>FilterConstants.SERVICE_ID_KEY</literal>. This filter can use different HTTP clients:</simpara>
<itemizedlist>
<listitem>
<simpara>Apache <literal>HttpClient</literal>: The default client.</simpara>
</listitem>
<listitem>
<simpara>Squareup <literal>OkHttpClient</literal> v3: Enabled by having the <literal>com.squareup.okhttp3:okhttp</literal> library on the classpath and setting <literal>ribbon.okhttp.enabled=true</literal>.</simpara>
</listitem>
<listitem>
<simpara>Netflix Ribbon HTTP client: Enabled by setting <literal>ribbon.restclient.enabled=true</literal>. This client has limitations, including that it does not support the PATCH method, but it also has built-in retry.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>SimpleHostRoutingFilter</literal>: Sends requests to predetermined URLs through an Apache HttpClient. URLs are found in <literal>RequestContext.getRouteHost()</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="_custom_zuul_filter_examples">
<title>Custom Zuul Filter Examples</title>
<simpara>Most of the following "How to Write" examples below are included <link xl:href="https://github.com/spring-cloud-samples/sample-zuul-filters">Sample Zuul Filters</link> project. There are also examples of manipulating the request or response body in that repository.</simpara>
<simpara>This section includes the following examples:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="zuul-developer-guide-sample-pre-filter"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="zuul-developer-guide-sample-route-filter"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="zuul-developer-guide-sample-post-filter"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="zuul-developer-guide-sample-pre-filter">
<title>How to Write a Pre Filter</title>
<simpara>Pre filters set up data in the <literal>RequestContext</literal> for use in filters downstream.
The main use case is to set information required for route filters.
The following example shows a Zuul pre filter:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class QueryParamPreFilter extends ZuulFilter {
	@Override
	public int filterOrder() {
		return PRE_DECORATION_FILTER_ORDER - 1; // run before PreDecoration
	}

	@Override
	public String filterType() {
		return PRE_TYPE;
	}

	@Override
	public boolean shouldFilter() {
		RequestContext ctx = RequestContext.getCurrentContext();
		return !ctx.containsKey(FORWARD_TO_KEY) // a filter has already forwarded
				&amp;&amp; !ctx.containsKey(SERVICE_ID_KEY); // a filter has already determined serviceId
	}
    @Override
    public Object run() {
        RequestContext ctx = RequestContext.getCurrentContext();
		HttpServletRequest request = ctx.getRequest();
		if (request.getParameter("sample") != null) {
		    // put the serviceId in `RequestContext`
    		ctx.put(SERVICE_ID_KEY, request.getParameter("foo"));
    	}
        return null;
    }
}</programlisting>
<simpara>The preceding filter populates <literal>SERVICE_ID_KEY</literal> from the <literal>sample</literal> request parameter.
In practice, you should not do that kind of direct mapping. Instead, the service ID should be looked up from the value of <literal>sample</literal> instead.</simpara>
<simpara>Now that <literal>SERVICE_ID_KEY</literal> is populated, <literal>PreDecorationFilter</literal> does not run and <literal>RibbonRoutingFilter</literal> runs.</simpara>
<tip>
<simpara>If you want to route to a full URL, call <literal>ctx.setRouteHost(url)</literal> instead.</simpara>
</tip>
<simpara>To modify the path to which routing filters forward, set the <literal>REQUEST_URI_KEY</literal>.</simpara>
</section>
<section xml:id="zuul-developer-guide-sample-route-filter">
<title>How to Write a Route Filter</title>
<simpara>Route filters run after pre filters and make requests to other services.
Much of the work here is to translate request and response data to and from the model required by the client.
The following example shows a Zuul route filter:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class OkHttpRoutingFilter extends ZuulFilter {
	@Autowired
	private ProxyRequestHelper helper;

	@Override
	public String filterType() {
		return ROUTE_TYPE;
	}

	@Override
	public int filterOrder() {
		return SIMPLE_HOST_ROUTING_FILTER_ORDER - 1;
	}

	@Override
	public boolean shouldFilter() {
		return RequestContext.getCurrentContext().getRouteHost() != null
				&amp;&amp; RequestContext.getCurrentContext().sendZuulResponse();
	}

    @Override
    public Object run() {
		OkHttpClient httpClient = new OkHttpClient.Builder()
				// customize
				.build();

		RequestContext context = RequestContext.getCurrentContext();
		HttpServletRequest request = context.getRequest();

		String method = request.getMethod();

		String uri = this.helper.buildZuulRequestURI(request);

		Headers.Builder headers = new Headers.Builder();
		Enumeration&lt;String&gt; headerNames = request.getHeaderNames();
		while (headerNames.hasMoreElements()) {
			String name = headerNames.nextElement();
			Enumeration&lt;String&gt; values = request.getHeaders(name);

			while (values.hasMoreElements()) {
				String value = values.nextElement();
				headers.add(name, value);
			}
		}

		InputStream inputStream = request.getInputStream();

		RequestBody requestBody = null;
		if (inputStream != null &amp;&amp; HttpMethod.permitsRequestBody(method)) {
			MediaType mediaType = null;
			if (headers.get("Content-Type") != null) {
				mediaType = MediaType.parse(headers.get("Content-Type"));
			}
			requestBody = RequestBody.create(mediaType, StreamUtils.copyToByteArray(inputStream));
		}

		Request.Builder builder = new Request.Builder()
				.headers(headers.build())
				.url(uri)
				.method(method, requestBody);

		Response response = httpClient.newCall(builder.build()).execute();

		LinkedMultiValueMap&lt;String, String&gt; responseHeaders = new LinkedMultiValueMap&lt;&gt;();

		for (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : response.headers().toMultimap().entrySet()) {
			responseHeaders.put(entry.getKey(), entry.getValue());
		}

		this.helper.setResponse(response.code(), response.body().byteStream(),
				responseHeaders);
		context.setRouteHost(null); // prevent SimpleHostRoutingFilter from running
		return null;
    }
}</programlisting>
<simpara>The preceding filter translates Servlet request information into OkHttp3 request information, executes an HTTP request, and translates OkHttp3 response information to the Servlet response.</simpara>
</section>
<section xml:id="zuul-developer-guide-sample-post-filter">
<title>How to Write a Post Filter</title>
<simpara>Post filters typically manipulate the response. The following filter adds a random <literal>UUID</literal> as the <literal>X-Sample</literal> header:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class AddResponseHeaderFilter extends ZuulFilter {
	@Override
	public String filterType() {
		return POST_TYPE;
	}

	@Override
	public int filterOrder() {
		return SEND_RESPONSE_FILTER_ORDER - 1;
	}

	@Override
	public boolean shouldFilter() {
		return true;
	}

	@Override
	public Object run() {
		RequestContext context = RequestContext.getCurrentContext();
    	HttpServletResponse servletResponse = context.getResponse();
		servletResponse.addHeader("X-Sample", UUID.randomUUID().toString());
		return null;
	}
}</programlisting>
<note>
<simpara>Other manipulations, such as transforming the response body, are much more complex and computationally intensive.</simpara>
</note>
</section>
</section>
<section xml:id="_how_zuul_errors_work">
<title>How Zuul Errors Work</title>
<simpara>If an exception is thrown during any portion of the Zuul filter lifecycle, the error filters are executed.
The <literal>SendErrorFilter</literal> is only run if <literal>RequestContext.getThrowable()</literal> is not <literal>null</literal>.
It then sets specific <literal>javax.servlet.error.*</literal> attributes in the request and forwards the request to the Spring Boot error page.</simpara>
</section>
<section xml:id="_zuul_eager_application_context_loading">
<title>Zuul Eager Application Context Loading</title>
<simpara>Zuul internally uses Ribbon for calling the remote URLs.
By default, Ribbon clients are lazily loaded by Spring Cloud on first call.
This behavior can be changed for Zuul by using the following configuration, which results eager loading of the child Ribbon related Application contexts at application startup time.
The following example shows how to enable eager loading:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>zuul:
  ribbon:
    eager-load:
      enabled: true</screen>
</para>
</formalpara>
</section>
</section>
</chapter>
<chapter xml:id="_polyglot_support_with_sidecar">
<title>Polyglot support with Sidecar</title>
<simpara>Do you have non-JVM languages with which you want to take advantage of Eureka, Ribbon, and Config Server?
The Spring Cloud Netflix Sidecar was inspired by <link xl:href="https://github.com/Netflix/Prana">Netflix Prana</link>.
It includes an HTTP API to get all of the instances (by host and port) for a given service.
You can also proxy service calls through an embedded Zuul proxy that gets its route entries from Eureka.
The Spring Cloud Config Server can be accessed directly through host lookup or through the Zuul Proxy.
The non-JVM application should implement a health check so the Sidecar can report to Eureka whether the app is up or down.</simpara>
<simpara>To include Sidecar in your project, use the dependency with a group ID of <literal>org.springframework.cloud</literal>
and artifact ID or <literal>spring-cloud-netflix-sidecar</literal>.</simpara>
<simpara>To enable the Sidecar, create a Spring Boot application with <literal>@EnableSidecar</literal>.
This annotation includes <literal>@EnableCircuitBreaker</literal>, <literal>@EnableDiscoveryClient</literal>, and <literal>@EnableZuulProxy</literal>.
Run the resulting application on the same host as the non-JVM application.</simpara>
<simpara>To configure the side car, add <literal>sidecar.port</literal> and <literal>sidecar.health-uri</literal> to <literal>application.yml</literal>.
The <literal>sidecar.port</literal> property is the port on which the non-JVM application listens.
This is so the Sidecar can properly register the application with Eureka.
The <literal>sidecar.health-uri</literal> is a URI accessible on the non-JVM application that mimics a Spring Boot health indicator.
It should return a JSON document that resembles the following:</simpara>
<formalpara>
<title>health-uri-document</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "status":"UP"
}</programlisting>
</para>
</formalpara>
<simpara>HThe following application.yml example shows sample configuration for a Sidecar application:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">server:
  port: 5678
spring:
  application:
    name: sidecar

sidecar:
  port: 8000
  health-uri: http://localhost:8000/health.json</programlisting>
</para>
</formalpara>
<simpara>The API for the <literal>DiscoveryClient.getInstances()</literal> method is <literal>/hosts/{serviceId}</literal>.
The following example response for <literal>/hosts/customers</literal> returns two instances on different hosts:</simpara>
<formalpara>
<title>/hosts/customers</title>
<para>
<programlisting language="json" linenumbering="unnumbered">[
    {
        "host": "myhost",
        "port": 9000,
        "uri": "http://myhost:9000",
        "serviceId": "CUSTOMERS",
        "secure": false
    },
    {
        "host": "myhost2",
        "port": 9000,
        "uri": "http://myhost2:9000",
        "serviceId": "CUSTOMERS",
        "secure": false
    }
]</programlisting>
</para>
</formalpara>
<simpara>This API is accessible to the non-JVM application (if the sidecar is on port 5678) at <literal><link xl:href="http://localhost:5678/hosts/{serviceId}">http://localhost:5678/hosts/{serviceId}</link></literal>.</simpara>
<simpara>The Zuul proxy automatically adds routes for each service known in Eureka to <literal>/&lt;serviceId&gt;</literal>, so the customers service is available at <literal>/customers</literal>.
The non-JVM application can access the customer service at <literal><link xl:href="http://localhost:5678/customers">http://localhost:5678/customers</link></literal> (assuming the sidecar is listening on port 5678).</simpara>
<simpara>If the Config Server is registered with Eureka, the non-JVM application can access it through the Zuul proxy.
If the <literal>serviceId</literal> of the ConfigServer is <literal>configserver</literal> and the Sidecar is on port 5678, then it can be accessed at <link xl:href="http://localhost:5678/configserver">http://localhost:5678/configserver</link>.</simpara>
<simpara>Non-JVM applications can take advantage of the Config Server&#8217;s ability to return YAML documents.
For example, a call to <link xl:href="https://sidecar.local.spring.io:5678/configserver/default-master.yml">https://sidecar.local.spring.io:5678/configserver/default-master.yml</link>
might result in a YAML document resembling the following:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  password: password
info:
  description: Spring Cloud Samples
  url: https://github.com/spring-cloud-samples</programlisting>
</chapter>
<chapter xml:id="retrying-failed-requests">
<title>Retrying Failed Requests</title>
<simpara>Spring Cloud Netflix offers a variety of ways to make HTTP requests.
You can use a load balanced <literal>RestTemplate</literal>, Ribbon, or Feign.
No matter how you choose to create your HTTP requests, there is always a chance that a request may fail.
When a request fails, you may want to have the request be retried automatically.
To do so when using Sping Cloud Netflix, you need to include <link xl:href="https://github.com/spring-projects/spring-retry">Spring Retry</link> on your application&#8217;s classpath.
When Spring Retry is present, load-balanced <literal>RestTemplates</literal>, Feign, and Zuul automatically retry any failed requests (assuming your configuration allows doing so).</simpara>
<section xml:id="_backoff_policies">
<title>BackOff Policies</title>
<simpara>By default, no backoff policy is used when retrying requests.
If you would like to configure a backoff policy, you need to create a bean of type <literal>LoadBalancedBackOffPolicyFactory</literal>, which is used to create a <literal>BackOffPolicy</literal> for a given service, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class MyConfiguration {
    @Bean
    LoadBalancedBackOffPolicyFactory backOffPolicyFactory() {
        return new LoadBalancedBackOffPolicyFactory() {
            @Override
            public BackOffPolicy createBackOffPolicy(String service) {
                return new ExponentialBackOffPolicy();
            }
        };
    }
}</programlisting>
</section>
<section xml:id="_configuration">
<title>Configuration</title>
<simpara>When you use Ribbon with Spring Retry, you can control the retry functionality by configuring certain Ribbon properties.
To do so, set the <literal>client.ribbon.MaxAutoRetries</literal>, <literal>client.ribbon.MaxAutoRetriesNextServer</literal>, and <literal>client.ribbon.OkToRetryOnAllOperations</literal> properties.
See the <link xl:href="https://github.com/Netflix/ribbon/wiki/Getting-Started#the-properties-file-sample-clientproperties">Ribbon documentation</link> for a description of what these properties do.</simpara>
<warning>
<simpara>Enabling <literal>client.ribbon.OkToRetryOnAllOperations</literal> includes retrying POST requests, which can have an impact
on the server&#8217;s resources, due to the buffering of the request body.</simpara>
</warning>
<simpara>In addition, you may want to retry requests when certain status codes are returned in the response.
You can list the response codes you would like the Ribbon client to retry by setting the <literal>clientName.ribbon.retryableStatusCodes</literal> property, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">clientName:
  ribbon:
    retryableStatusCodes: 404,502</programlisting>
<simpara>You can also create a bean of type <literal>LoadBalancedRetryPolicy</literal> and implement the <literal>retryableStatusCode</literal> method to retry a request given the status code.</simpara>
<section xml:id="_zuul">
<title>Zuul</title>
<simpara>You can turn off Zuul&#8217;s retry functionality by setting <literal>zuul.retryable</literal> to <literal>false</literal>.
You can also disable retry functionality on a route-by-route basis by setting <literal>zuul.routes.routename.retryable</literal> to <literal>false</literal>.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_http_clients">
<title>HTTP Clients</title>
<simpara>Spring Cloud Netflix automatically creates the HTTP client used by Ribbon, Feign, and Zuul for you.
However, you can also provide your own HTTP clients customized as you need them to be.
To do so, you can create a bean of type <literal>ClosableHttpClient</literal> if you
are using the Apache Http Cient or <literal>OkHttpClient</literal> if you are using OK HTTP.</simpara>
<note>
<simpara>When you create your own HTTP client, you are also responsible for implementing the correct connection management strategies for these clients.
Doing so improperly can result in resource management issues.</simpara>
</note>
</chapter>
</part>
<part xml:id="_spring_cloud_openfeign">
<title>Spring Cloud OpenFeign</title>
<partintro>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
<simpara>This project provides OpenFeign integrations for Spring Boot apps through autoconfiguration
and binding to the Spring Environment and other Spring programming model idioms.</simpara>
</partintro>
<chapter xml:id="spring-cloud-feign">
<title>Declarative REST Client: Feign</title>
<simpara><link xl:href="https://github.com/Netflix/feign">Feign</link> is a declarative web service client.  It makes writing web service clients easier.  To use Feign create an interface and annotate it.  It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders.  Spring Cloud adds support for Spring MVC annotations and for using the same <literal>HttpMessageConverters</literal> used by default in Spring Web.  Spring Cloud integrates Ribbon and Eureka to provide a load balanced http client when using Feign.</simpara>
<section xml:id="netflix-feign-starter">
<title>How to Include Feign</title>
<simpara>To include Feign in your project use the starter with group <literal>org.springframework.cloud</literal>
and artifact id <literal>spring-cloud-starter-openfeign</literal>. See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link>
for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>Example spring boot app</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableFeignClients
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}</programlisting>
<formalpara>
<title>StoreClient.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@FeignClient("stores")
public interface StoreClient {
    @RequestMapping(method = RequestMethod.GET, value = "/stores")
    List&lt;Store&gt; getStores();

    @RequestMapping(method = RequestMethod.POST, value = "/stores/{storeId}", consumes = "application/json")
    Store update(@PathVariable("storeId") Long storeId, Store store);
}</programlisting>
</para>
</formalpara>
<simpara>In the <literal>@FeignClient</literal> annotation the String value ("stores" above) is
an arbitrary client name, which is used to create a Ribbon load
balancer (see <link linkend="spring-cloud-ribbon">below for details of Ribbon
support</link>). You can also specify a URL using the <literal>url</literal> attribute
(absolute value or just a hostname). The name of the bean in the
application context is the fully qualified name of the interface.
To specify your own alias value you can use the <literal>qualifier</literal> value
of the <literal>@FeignClient</literal> annotation.</simpara>
<simpara>The Ribbon client above will want to discover the physical addresses
for the "stores" service. If your application is a Eureka client then
it will resolve the service in the Eureka service registry. If you
don&#8217;t want to use Eureka, you can simply configure a list of servers
in your external configuration (see
<link linkend="spring-cloud-ribbon-without-eureka">above for example</link>).</simpara>
</section>
<section xml:id="spring-cloud-feign-overriding-defaults">
<title>Overriding Feign Defaults</title>
<simpara>A central concept in Spring Cloud&#8217;s Feign support is that of the named client. Each feign client is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer using the <literal>@FeignClient</literal> annotation. Spring Cloud creates a new ensemble as an
<literal>ApplicationContext</literal> on demand for each named client using <literal>FeignClientsConfiguration</literal>. This contains (amongst other things) an <literal>feign.Decoder</literal>, a <literal>feign.Encoder</literal>, and a <literal>feign.Contract</literal>.</simpara>
<simpara>Spring Cloud lets you take full control of the feign client by declaring additional configuration (on top of the <literal>FeignClientsConfiguration</literal>) using <literal>@FeignClient</literal>. Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient(name = "stores", configuration = FooConfiguration.class)
public interface StoreClient {
    //..
}</programlisting>
<simpara>In this case the client is composed from the components already in <literal>FeignClientsConfiguration</literal> together with any in <literal>FooConfiguration</literal> (where the latter will override the former).</simpara>
<note>
<simpara><literal>FooConfiguration</literal> does not need to be annotated with <literal>@Configuration</literal>. However, if it is, then take care to exclude it from any <literal>@ComponentScan</literal> that would otherwise include this configuration as it will become the default source for <literal>feign.Decoder</literal>, <literal>feign.Encoder</literal>, <literal>feign.Contract</literal>, etc., when specified. This can be avoided by putting it in a separate, non-overlapping package from any <literal>@ComponentScan</literal> or <literal>@SpringBootApplication</literal>, or it can be explicitly excluded in <literal>@ComponentScan</literal>.</simpara>
</note>
<note>
<simpara>The <literal>serviceId</literal> attribute is now deprecated in favor of the <literal>name</literal> attribute.</simpara>
</note>
<warning>
<simpara>Previously, using the <literal>url</literal> attribute, did not require the <literal>name</literal> attribute. Using <literal>name</literal> is now required.</simpara>
</warning>
<simpara>Placeholders are supported in the <literal>name</literal> and <literal>url</literal> attributes.</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient(name = "${feign.name}", url = "${feign.url}")
public interface StoreClient {
    //..
}</programlisting>
<simpara>Spring Cloud Netflix provides the following beans by default for feign (<literal>BeanType</literal> beanName: <literal>ClassName</literal>):</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Decoder</literal> feignDecoder: <literal>ResponseEntityDecoder</literal> (which wraps a <literal>SpringDecoder</literal>)</simpara>
</listitem>
<listitem>
<simpara><literal>Encoder</literal> feignEncoder: <literal>SpringEncoder</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Logger</literal> feignLogger: <literal>Slf4jLogger</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Contract</literal> feignContract: <literal>SpringMvcContract</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Feign.Builder</literal> feignBuilder: <literal>HystrixFeign.Builder</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Client</literal> feignClient: if Ribbon is enabled it is a <literal>LoadBalancerFeignClient</literal>, otherwise the default feign client is used.</simpara>
</listitem>
</itemizedlist>
<simpara>The OkHttpClient and ApacheHttpClient feign clients can be used by setting <literal>feign.okhttp.enabled</literal> or <literal>feign.httpclient.enabled</literal> to <literal>true</literal>, respectively, and having them on the classpath.
You can customize the HTTP client used by providing a bean of either <literal>ClosableHttpClient</literal> when using Apache or <literal>OkHttpClient</literal> when using OK HTTP.</simpara>
<simpara>Spring Cloud Netflix <emphasis>does not</emphasis> provide the following beans by default for feign, but still looks up beans of these types from the application context to create the feign client:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Logger.Level</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Retryer</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ErrorDecoder</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Request.Options</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Collection&lt;RequestInterceptor&gt;</literal></simpara>
</listitem>
<listitem>
<simpara><literal>SetterFactory</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Creating a bean of one of those type and placing it in a <literal>@FeignClient</literal> configuration (such as <literal>FooConfiguration</literal> above) allows you to override each one of the beans described.  Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class FooConfiguration {
    @Bean
    public Contract feignContract() {
        return new feign.Contract.Default();
    }

    @Bean
    public BasicAuthRequestInterceptor basicAuthRequestInterceptor() {
        return new BasicAuthRequestInterceptor("user", "password");
    }
}</programlisting>
<simpara>This replaces the <literal>SpringMvcContract</literal> with <literal>feign.Contract.Default</literal> and adds a <literal>RequestInterceptor</literal> to the collection of <literal>RequestInterceptor</literal>.</simpara>
<simpara><literal>@FeignClient</literal> also can be configured using configuration properties.</simpara>
<simpara>application.yml</simpara>
<programlisting language="yaml" linenumbering="unnumbered">feign:
  client:
    config:
      feignName:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full
        errorDecoder: com.example.SimpleErrorDecoder
        retryer: com.example.SimpleRetryer
        requestInterceptors:
          - com.example.FooRequestInterceptor
          - com.example.BarRequestInterceptor
        decode404: false
        encoder: com.example.SimpleEncoder
        decoder: com.example.SimpleDecoder
        contract: com.example.SimpleContract</programlisting>
<simpara>Default configurations can be specified in the <literal>@EnableFeignClients</literal> attribute <literal>defaultConfiguration</literal> in a similar manner as described above. The difference is that this configuration will apply to <emphasis>all</emphasis> feign clients.</simpara>
<simpara>If you prefer using configuration properties to configured all <literal>@FeignClient</literal>, you can create configuration properties with <literal>default</literal> feign name.</simpara>
<simpara>application.yml</simpara>
<programlisting language="yaml" linenumbering="unnumbered">feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic</programlisting>
<simpara>If we create both <literal>@Configuration</literal> bean and configuration properties, configuration properties will win.
It will override <literal>@Configuration</literal> values. But if you want to change the priority to <literal>@Configuration</literal>,
you can change <literal>feign.client.default-to-properties</literal> to <literal>false</literal>.</simpara>
<note>
<simpara>If you need to use <literal>ThreadLocal</literal> bound variables in your <literal>RequestInterceptor`s you will need to either set the
thread isolation strategy for Hystrix to `SEMAPHORE</literal> or disable Hystrix in Feign.</simpara>
</note>
<simpara>application.yml</simpara>
<programlisting language="yaml" linenumbering="unnumbered"># To disable Hystrix in Feign
feign:
  hystrix:
    enabled: false

# To set thread isolation to SEMAPHORE
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE</programlisting>
</section>
<section xml:id="_creating_feign_clients_manually">
<title>Creating Feign Clients Manually</title>
<simpara>In some cases it might be necessary to customize your Feign Clients in a way that is not
possible using the methods above.  In this case you can create Clients using the
<link xl:href="https://github.com/OpenFeign/feign/#basics">Feign Builder API</link>. Below is an example
which creates two Feign Clients with the same interface but configures each one with
a separate request interceptor.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Import(FeignClientsConfiguration.class)
class FooController {

	private FooClient fooClient;

	private FooClient adminClient;

    	@Autowired
	public FooController(Decoder decoder, Encoder encoder, Client client, Contract contract) {
		this.fooClient = Feign.builder().client(client)
				.encoder(encoder)
				.decoder(decoder)
				.contract(contract)
				.requestInterceptor(new BasicAuthRequestInterceptor("user", "user"))
				.target(FooClient.class, "http://PROD-SVC");

		this.adminClient = Feign.builder().client(client)
				.encoder(encoder)
				.decoder(decoder)
				.contract(contract)
				.requestInterceptor(new BasicAuthRequestInterceptor("admin", "admin"))
				.target(FooClient.class, "http://PROD-SVC");
    }
}</programlisting>
<note>
<simpara>In the above example <literal>FeignClientsConfiguration.class</literal> is the default configuration
provided by Spring Cloud Netflix.</simpara>
</note>
<note>
<simpara><literal>PROD-SVC</literal> is the name of the service the Clients will be making requests to.</simpara>
</note>
<note>
<simpara>The Feign <literal>Contract</literal> object defines what annotations and values are valid on interfaces. The
autowired <literal>Contract</literal> bean provides supports for SpringMVC annotations, instead of
the default Feign native annotations.</simpara>
</note>
</section>
<section xml:id="spring-cloud-feign-hystrix">
<title>Feign Hystrix Support</title>
<simpara>If Hystrix is on the classpath and <literal>feign.hystrix.enabled=true</literal>, Feign will wrap all methods with a circuit breaker. Returning a <literal>com.netflix.hystrix.HystrixCommand</literal> is also available. This lets you use reactive patterns (with a call to <literal>.toObservable()</literal> or <literal>.observe()</literal> or asynchronous use (with a call to <literal>.queue()</literal>).</simpara>
<simpara>To disable Hystrix support on a per-client basis create a vanilla <literal>Feign.Builder</literal> with the "prototype" scope, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class FooConfiguration {
    	@Bean
	@Scope("prototype")
	public Feign.Builder feignBuilder() {
		return Feign.builder();
	}
}</programlisting>
<warning>
<simpara>Prior to the Spring Cloud Dalston release, if Hystrix was on the classpath Feign would have wrapped
all methods in a circuit breaker by default.  This default behavior was changed in Spring Cloud Dalston in
favor for an opt-in approach.</simpara>
</warning>
</section>
<section xml:id="spring-cloud-feign-hystrix-fallback">
<title>Feign Hystrix Fallbacks</title>
<simpara>Hystrix supports the notion of a fallback: a default code path that is executed when they circuit is open or there is an error. To enable fallbacks for a given <literal>@FeignClient</literal> set the <literal>fallback</literal> attribute to the class name that implements the fallback. You also need to declare your implementation as a Spring bean.</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient(name = "hello", fallback = HystrixClientFallback.class)
protected interface HystrixClient {
    @RequestMapping(method = RequestMethod.GET, value = "/hello")
    Hello iFailSometimes();
}

static class HystrixClientFallback implements HystrixClient {
    @Override
    public Hello iFailSometimes() {
        return new Hello("fallback");
    }
}</programlisting>
<simpara>If one needs access to the cause that made the fallback trigger, one can use the <literal>fallbackFactory</literal> attribute inside <literal>@FeignClient</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient(name = "hello", fallbackFactory = HystrixClientFallbackFactory.class)
protected interface HystrixClient {
	@RequestMapping(method = RequestMethod.GET, value = "/hello")
	Hello iFailSometimes();
}

@Component
static class HystrixClientFallbackFactory implements FallbackFactory&lt;HystrixClient&gt; {
	@Override
	public HystrixClient create(Throwable cause) {
		return new HystrixClient() {
			@Override
			public Hello iFailSometimes() {
				return new Hello("fallback; reason was: " + cause.getMessage());
			}
		};
	}
}</programlisting>
<warning>
<simpara>There is a limitation with the implementation of fallbacks in Feign and how Hystrix fallbacks work. Fallbacks are currently not supported for methods that return <literal>com.netflix.hystrix.HystrixCommand</literal> and <literal>rx.Observable</literal>.</simpara>
</warning>
</section>
<section xml:id="_feign_and_literal_primary_literal">
<title>Feign and <literal>@Primary</literal></title>
<simpara>When using Feign with Hystrix fallbacks, there are multiple beans in the <literal>ApplicationContext</literal> of the same type. This will cause <literal>@Autowired</literal> to not work because there isn&#8217;t exactly one bean, or one marked as primary. To work around this, Spring Cloud Netflix marks all Feign instances as <literal>@Primary</literal>, so Spring Framework will know which bean to inject. In some cases, this may not be desirable. To turn off this behavior set the <literal>primary</literal> attribute of <literal>@FeignClient</literal> to false.</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient(name = "hello", primary = false)
public interface HelloClient {
	// methods here
}</programlisting>
</section>
<section xml:id="spring-cloud-feign-inheritance">
<title>Feign Inheritance Support</title>
<simpara>Feign supports boilerplate apis via single-inheritance interfaces.
This allows grouping common operations into convenient base interfaces.</simpara>
<formalpara>
<title>UserService.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">public interface UserService {

    @RequestMapping(method = RequestMethod.GET, value ="/users/{id}")
    User getUser(@PathVariable("id") long id);
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>UserResource.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@RestController
public class UserResource implements UserService {

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>UserClient.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">package project.user;

@FeignClient("users")
public interface UserClient extends UserService {

}</programlisting>
</para>
</formalpara>
<note>
<simpara>It is generally not advisable to share an interface between a
server and a client. It introduces tight coupling, and also actually
doesn&#8217;t work with Spring MVC in its current form (method parameter
mapping is not inherited).</simpara>
</note>
</section>
<section xml:id="_feign_request_response_compression">
<title>Feign request/response compression</title>
<simpara>You may consider enabling the request or response GZIP compression for your
Feign requests. You can do this by enabling one of the properties:</simpara>
<programlisting language="java" linenumbering="unnumbered">feign.compression.request.enabled=true
feign.compression.response.enabled=true</programlisting>
<simpara>Feign request compression gives you settings similar to what you may set for your web server:</simpara>
<programlisting language="java" linenumbering="unnumbered">feign.compression.request.enabled=true
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048</programlisting>
<simpara>These properties allow you to be selective about the compressed media types and minimum request threshold length.</simpara>
</section>
<section xml:id="_feign_logging">
<title>Feign logging</title>
<simpara>A logger is created for each Feign client created. By default the name of the logger is the full class name of the interface used to create the Feign client. Feign logging only responds to the <literal>DEBUG</literal> level.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">logging.level.project.user.UserClient: DEBUG</programlisting>
</para>
</formalpara>
<simpara>The <literal>Logger.Level</literal> object that you may configure per client, tells Feign how much to log. Choices are:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>NONE</literal>, No logging (<emphasis role="strong">DEFAULT</emphasis>).</simpara>
</listitem>
<listitem>
<simpara><literal>BASIC</literal>, Log only the request method and URL and the response status code and execution time.</simpara>
</listitem>
<listitem>
<simpara><literal>HEADERS</literal>, Log the basic information along with request and response headers.</simpara>
</listitem>
<listitem>
<simpara><literal>FULL</literal>, Log the headers, body, and metadata for both requests and responses.</simpara>
</listitem>
</itemizedlist>
<simpara>For example, the following would set the <literal>Logger.Level</literal> to <literal>FULL</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
public class FooConfiguration {
    @Bean
    Logger.Level feignLoggerLevel() {
        return Logger.Level.FULL;
    }
}</programlisting>
<literallayout class="monospaced">        OtherClass.someMethod(myprop.get());
    }
}
stripped). The proxy uses Ribbon to locate an instance to forward to
via discovery, and all requests are executed in a
&lt;&lt;hystrix-fallbacks-for-routes, hystrix command&gt;&gt;, so
failures will show up in Hystrix metrics, and once the circuit is open
the proxy will not try to contact the service.</literallayout>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_stream">
<title>Spring Cloud Stream</title>
<chapter xml:id="_quick_start_2">
<title>Quick Start</title>
<simpara>You can try Spring Cloud Stream in less then 5 min even before you jump into any details by following this three-step guide.</simpara>
<simpara>We show you how to create a Spring Cloud Stream application that receives messages coming from the messaging middleware of your choice (more on this later) and logs received messages to the console.
We call it <literal>LoggingConsumer</literal>.
While not very practical, it provides a good introduction to some of the main concepts
and abstractions, making it easier to digest the rest of this user guide.</simpara>
<simpara>The three steps are as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-creating-sample-application"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-importing-project"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-adding-message-handler"/></simpara>
</listitem>
</orderedlist>
<section xml:id="spring-cloud-stream-preface-creating-sample-application">
<title>Creating a Sample Application by Using Spring Initializr</title>
<simpara>To get started, visit the <link xl:href="https://start.spring.io">Spring Initializr</link>. From there, you can generate our <literal>LoggingConsumer</literal> application. To do so:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>In the <emphasis role="strong">Dependencies</emphasis> section, start typing <literal>stream</literal>.
When the &#8220;Cloud Stream&#8221; option should appears, select it.</simpara>
</listitem>
<listitem>
<simpara>Start typing either 'kafka' or 'rabbit'.</simpara>
</listitem>
<listitem>
<simpara>Select &#8220;Kafka&#8221; or &#8220;RabbitMQ&#8221;.</simpara>
<simpara>Basically, you choose the messaging middleware to which your application binds.
We recommend using the one you have already installed or feel more comfortable with installing and running.
Also, as you can see from the Initilaizer screen, there are a few other options you can choose.
For example, you can choose Gradle as your build tool instead of Maven (the default).</simpara>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Artifact</emphasis> field, type 'logging-consumer'.</simpara>
<simpara>The value of the <emphasis role="strong">Artifact</emphasis> field becomes the application name.
If you chose RabbitMQ for the middleware, your Spring Initializr should now be as follows:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/stream-initializr.png"/>
</imageobject>
<textobject><phrase>stream initializr</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
<listitem>
<simpara>Click the <emphasis role="strong">Generate Project</emphasis> button.</simpara>
<simpara>Doing so downloads the zipped version of the generated project to your hard drive.</simpara>
</listitem>
<listitem>
<simpara>Unzip the file into the folder you want to use as your project directory.</simpara>
</listitem>
</orderedlist>
<tip>
<simpara>We encourage you to explore the many possibilities available in the Spring Initializr.
It lets you create many different kinds of Spring applications.</simpara>
</tip>
</section>
<section xml:id="spring-cloud-stream-preface-importing-project">
<title>Importing the Project into Your IDE</title>
<simpara>Now you can import the project into your IDE.
Keep in mind that, depending on the IDE, you may need to follow a specific import procedure.
For example, depending on how the project was generated (Maven or Gradle), you may need to follow specific import procedure (for example, in Eclipse or STS, you need to use File &#8594; Import &#8594; Maven &#8594; Existing Maven Project).</simpara>
<simpara>Once imported, the project must have no errors of any kind. Also, <literal>src/main/java</literal> should contain <literal>com.example.loggingconsumer.LoggingConsumerApplication</literal>.</simpara>
<simpara>Technically, at this point, you can run the application&#8217;s main class.
It is already a valid Spring Boot application.
However, it does not do anything, so we want to add some code.</simpara>
</section>
<section xml:id="spring-cloud-stream-preface-adding-message-handler">
<title>Adding a Message Handler, Building, and Running</title>
<simpara>Modify the <literal>com.example.loggingconsumer.LoggingConsumerApplication</literal> class to look as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class LoggingConsumerApplication {

	public static void main(String[] args) {
		SpringApplication.run(LoggingConsumerApplication.class, args);
	}

	@StreamListener(Sink.INPUT)
	public void handle(Person person) {
		System.out.println("Received: " + person);
	}

	public static class Person {
		private String name;
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String toString() {
			return this.name;
		}
	}
}</programlisting>
<simpara>As you can see from the preceding listing:</simpara>
<itemizedlist>
<listitem>
<simpara>We have enabled <literal>Sink</literal> binding (input-no-output) by using <literal>@EnableBinding(Sink.class)</literal>.
Doing so signals to the framework to initiate binding to the messaging middleware, where it automatically creates the destination (that is, queue, topic, and others) that are bound to the <literal>Sink.INPUT</literal> channel.</simpara>
</listitem>
<listitem>
<simpara>We have added a <literal>handler</literal> method to receive incoming messages of type <literal>Person</literal>.
Doing so lets you see one of the core features of the framework: It tries to automatically convert incoming message payloads to type <literal>Person</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>You now have a fully functional Spring Cloud Stream application that does listens for messages.
From here, for simplicity, we assume you selected RabbitMQ in <link linkend="spring-cloud-stream-preface-creating-sample-application">step one</link>.
Assuming you have RabbitMQ installed and running, you can start the application by running its <literal>main</literal> method in your IDE.</simpara>
<simpara>You should see following output:</simpara>
<screen>	--- [ main] c.s.b.r.p.RabbitExchangeQueueProvisioner : declaring queue for inbound: input.anonymous.CbMIwdkJSBO1ZoPDOtHtCg, bound to: input
	--- [ main] o.s.a.r.c.CachingConnectionFactory       : Attempting to connect to: [localhost:5672]
	--- [ main] o.s.a.r.c.CachingConnectionFactory       : Created new connection: rabbitConnectionFactory#2a3a299:0/SimpleConnection@66c83fc8. . .
	. . .
	--- [ main] o.s.i.a.i.AmqpInboundChannelAdapter      : started inbound.input.anonymous.CbMIwdkJSBO1ZoPDOtHtCg
	. . .
	--- [ main] c.e.l.LoggingConsumerApplication         : Started LoggingConsumerApplication in 2.531 seconds (JVM running for 2.897)</screen>
<simpara>Go to the RabbitMQ management console or any other RabbitMQ client and send a message to <literal>input.anonymous.CbMIwdkJSBO1ZoPDOtHtCg</literal>.
The <literal>anonymous.CbMIwdkJSBO1ZoPDOtHtCg</literal> part represents the group name and is generated, so it is bound to be different in your environment.
For something more predictable, you can use an explicit group name by setting <literal>spring.cloud.stream.bindings.input.group=hello</literal> (or whatever name you like).</simpara>
<simpara>The contents of the message should be a JSON representation of the <literal>Person</literal> class, as follows:</simpara>
<literallayout class="monospaced">{"name":"Sam Spade"}</literallayout>
<simpara>Then, in your console, you should see:</simpara>
<simpara><literal>Received: Sam Spade</literal></simpara>
<simpara>You can also build and package your application into a boot jar (by using <literal>./mvnw clean install</literal>) and run the built JAR by using the <literal>java -jar</literal> command.</simpara>
<simpara>Now you have a working (albeit very basic) Spring Cloud Stream application.</simpara>
</section>
</chapter>
<chapter xml:id="_what_s_new_in_2_0">
<title>What&#8217;s New in 2.0?</title>
<simpara>Spring Cloud Stream introduces a number of new features, enhancements, and changes. The following sections outline the most notable ones:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-new-features"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-notable-enhancements"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-preface-new-features">
<title>New Features and Components</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Polling Consumers</emphasis>: Introduction of polled consumers, which lets the application control message processing rates.
See &#8220;<xref linkend="spring-cloud-streams-overview-using-polled-consumers"/>&#8221; for more details.
You can also read <link xl:href="https://spring.io/blog/2018/02/27/spring-cloud-stream-2-0-polled-consumers">this blog post</link> for more details.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Micrometer Support</emphasis>: Metrics has been switched to use <link xl:href="https://micrometer.io/">Micrometer</link>.
<literal>MeterRegistry</literal> is also provided as a bean so that custom applications can autowire it to capture custom metrics.
See &#8220;<xref linkend="spring-cloud-stream-overview-metrics-emitter"/>&#8221; for more details.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">New Actuator Binding Controls</emphasis>: New actuator binding controls let you both visualize and control the Bindings lifecycle.
For more details, see <xref linkend="_binding_visualization_and_control"/>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Configurable RetryTemplate</emphasis>: Aside from providing properties to configure <literal>RetryTemplate</literal>, we now let you provide your own template, effectively overriding the one provided by the framework.
To use it, configure it as a <literal>@Bean</literal> in your application.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-stream-preface-notable-enhancements">
<title>Notable Enhancements</title>
<simpara>This version includes the following notable enhancements:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-actuator-web-dependencies"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-content-type-negotiation-improvements"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-notable-deprecations"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-preface-actuator-web-dependencies">
<title>Both Actuator and Web Dependencies Are Now Optional</title>
<simpara>This change slims down the footprint of the deployed application in the event neither actuator nor web dependencies required.
It also lets you switch between the reactive and conventional web paradigms by manually adding one of the following dependencies.</simpara>
<simpara>The following listing shows how to add the conventional web framework:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The following listing shows how to add the reactive web framework:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The following list shows how to add the actuator dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</section>
<section xml:id="spring-cloud-stream-preface-content-type-negotiation-improvements">
<title>Content-type Negotiation Improvements</title>
<simpara>One of the core themes for verion 2.0 is improvements (in both consistency and performance) around content-type negotiation and message conversion.
The following summary outlines the notable changes and improvements in this area.
See the &#8220;<xref linkend="content-type-management"/>&#8221; section for more details.
Also <link xl:href="https://spring.io/blog/2018/02/26/spring-cloud-stream-2-0-content-type-negotiation-and-transformation">this blog post</link> contains more detail.</simpara>
<itemizedlist>
<listitem>
<simpara>All message conversion is now handled <emphasis role="strong">only</emphasis> by <literal>MessageConverter</literal> objects.</simpara>
</listitem>
<listitem>
<simpara>We introduced the <literal>@StreamMessageConverter</literal> annotation to provide custom <literal>MessageConverter</literal> objects.</simpara>
</listitem>
<listitem>
<simpara>We introduced the default <literal>Content Type</literal> as <literal>application/json</literal>, which needs to be taken into consideration when migrating 1.3 application or operating in the mixed mode (that is, 1.3 producer &#8594; 2.0 consumer).</simpara>
</listitem>
<listitem>
<simpara>Messages with textual payloads and a <literal>contentType</literal> of <literal>text/&#8230;&#8203;</literal> or <literal>&#8230;&#8203;/json</literal> are no longer converted to <literal>Message&lt;String&gt;</literal> for cases where the argument type of the provided <literal>MessageHandler</literal> can not be determined (that is, <literal>public void handle(Message&lt;?&gt; message)</literal> or <literal>public void handle(Object payload)</literal>).
Furthermore, a strong argument type may not be enough to properly convert messages, so the <literal>contentType</literal> header may be used as a supplement by some <literal>MessageConverters</literal>.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="spring-cloud-stream-preface-notable-deprecations">
<title>Notable Deprecations</title>
<simpara>As of version 2.0, the following items have been deprecated:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-deprecation-java-serialization"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-preface-deprecation-classes-methods"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-preface-deprecation-java-serialization">
<title>Java Serialization (Java Native and Kryo)</title>
<simpara><literal>JavaSerializationMessageConverter</literal> and <literal>KryoMessageConverter</literal> remain for now. However, we plan to move them out of the core packages and support in the future.
The main reason for this deprecation is to flag the issue that type-based, language-specific serialization could cause in distributed environments, where Producers and Consumers may depend on different JVM versions or have different versions of supporting libraries (that is, Kryo).
We also wanted to draw the attention to the fact that Consumers and Producers may not even be Java-based, so polyglot style serialization (i.e., JSON) is better suited.</simpara>
</section>
<section xml:id="spring-cloud-stream-preface-deprecation-classes-methods">
<title>Deprecated Classes and Methods</title>
<simpara>The following is a quick summary of notable deprecations. See the corresponding {spring-cloud-stream-javadoc-current}[javadoc] for more details.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>SharedChannelRegistry</literal>. Use <literal>SharedBindingTargetRegistry</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Bindings</literal>.
Beans qualified by it are already uniquely identified by their type&#8201;&#8212;&#8201;for example, provided <literal>Source</literal>, <literal>Processor</literal>, or custom bindings:</simpara>
</listitem>
</itemizedlist>
<screen>public interface Sample {
	String OUTPUT = "sampleOutput";

	@Output(Sample.OUTPUT)
	MessageChannel output();
}</screen>
<itemizedlist>
<listitem>
<simpara><literal>HeaderMode.raw</literal>. Use <literal>none</literal>, <literal>headers</literal> or <literal>embeddedHeaders</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ProducerProperties.partitionKeyExtractorClass</literal> in favor of <literal>partitionKeyExtractorName</literal> and <literal>ProducerProperties.partitionSelectorClass</literal> in favor of <literal>partitionSelectorName</literal>.
This change ensures that both components are Spring configured and managed and are referenced in a Spring-friendly way.</simpara>
</listitem>
<listitem>
<simpara><literal>BinderAwareRouterBeanPostProcessor</literal>. While the component remains, it is no longer a <literal>BeanPostProcessor</literal> and will be renamed in the future.</simpara>
</listitem>
<listitem>
<simpara><literal>BinderProperties.setEnvironment(Properties environment)</literal>. Use <literal>BinderProperties.setEnvironment(Map&lt;String, Object&gt; environment)</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>This section goes into more detail about how you can work with Spring Cloud Stream.
It covers topics such as creating and running stream applications.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="spring-cloud-stream-overview-introducing">
<title>Introducing Spring Cloud Stream</title>
<simpara>Spring Cloud Stream is a framework for building message-driven microservice applications.
Spring Cloud Stream builds upon Spring Boot to create standalone, production-grade Spring applications and uses Spring Integration to provide connectivity to message brokers.
It provides opinionated configuration of middleware from several vendors, introducing the concepts of persistent publish-subscribe semantics, consumer groups, and partitions.</simpara>
<simpara>You can add the <literal>@EnableBinding</literal> annotation to your application to get immediate connectivity to a message broker, and you can add <literal>@StreamListener</literal> to a method to cause it to receive events for stream processing.
The following example shows a sink application that receives external messages:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class VoteRecordingSinkApplication {

  public static void main(String[] args) {
    SpringApplication.run(VoteRecordingSinkApplication.class, args);
  }

  @StreamListener(Sink.INPUT)
  public void processVote(Vote vote) {
      votingService.recordVote(vote);
  }
}</programlisting>
<simpara>The <literal>@EnableBinding</literal> annotation takes one or more interfaces as parameters (in this case, the parameter is a single <literal>Sink</literal> interface).
An interface declares input and output channels.
Spring Cloud Stream provides the <literal>Source</literal>, <literal>Sink</literal>, and <literal>Processor</literal> interfaces. You can also define your own interfaces.</simpara>
<simpara>The following listing shows the definition of the <literal>Sink</literal> interface:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface Sink {
  String INPUT = "input";

  @Input(Sink.INPUT)
  SubscribableChannel input();
}</programlisting>
<simpara>The <literal>@Input</literal> annotation identifies an input channel, through which received messages enter the application.
The <literal>@Output</literal> annotation identifies an output channel, through which published messages leave the application.
The <literal>@Input</literal> and <literal>@Output</literal> annotations can take a channel name as a parameter.
If a name is not provided, the name of the annotated method is used.</simpara>
<simpara>Spring Cloud Stream creates an implementation of the interface for you.
You can use this in the application by autowiring it, as shown in the following example (from a test case):</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = VoteRecordingSinkApplication.class)
@WebAppConfiguration
@DirtiesContext
public class StreamApplicationTests {

  @Autowired
  private Sink sink;

  @Test
  public void contextLoads() {
    assertNotNull(this.sink.input());
  }
}</programlisting>
</chapter>
<chapter xml:id="_main_concepts">
<title>Main Concepts</title>
<simpara>Spring Cloud Stream provides a number of abstractions and primitives that simplify the writing of message-driven microservice applications.
This section gives an overview of the following:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="spring-cloud-stream-overview-application-model">Spring Cloud Stream&#8217;s application model</link></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-stream-overview-binder-abstraction"/></simpara>
</listitem>
<listitem>
<simpara><link linkend="spring-cloud-stream-overview-persistent-publish-subscribe-support">Persistent publish-subscribe support</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="consumer-groups">Consumer group support</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="partitioning">Partitioning support</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="spring-cloud-stream-overview-binder-api">A pluggable Binder SPI</link></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-overview-application-model">
<title>Application Model</title>
<simpara>A Spring Cloud Stream application consists of a middleware-neutral core.
The application communicates with the outside world through input and output channels injected into it by Spring Cloud Stream.
Channels are connected to external brokers through middleware-specific Binder implementations.</simpara>
<figure>
<title>Spring Cloud Stream Application</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/SCSt-with-binder.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>SCSt with binder</phrase></textobject>
</mediaobject>
</figure>
<section xml:id="_fat_jar">
<title>Fat JAR</title>
<simpara>Spring Cloud Stream applications can be run in stand-alone mode from your IDE for testing.
To run a Spring Cloud Stream application in production, you can create an executable (or &#8220;fat&#8221;) JAR by using the standard Spring Boot tooling provided for Maven or Gradle. See the  <link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-create-an-executable-jar-with-maven">Spring Boot Reference Guide</link> for more details.</simpara>
</section>
</section>
<section xml:id="spring-cloud-stream-overview-binder-abstraction">
<title>The Binder Abstraction</title>
<simpara>Spring Cloud Stream provides Binder implementations for <link xl:href="https://github.com/spring-cloud/spring-cloud-stream/tree/master/spring-cloud-stream-binders/spring-cloud-stream-binder-kafka">Kafka</link> and <link xl:href="https://github.com/spring-cloud/spring-cloud-stream/tree/master/spring-cloud-stream-binders/spring-cloud-stream-binder-rabbit">Rabbit MQ</link>.
Spring Cloud Stream also includes a <link xl:href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream-test-support/src/main/java/org/springframework/cloud/stream/test/binder/TestSupportBinder.java">TestSupportBinder</link>, which leaves a channel unmodified so that tests can interact with channels directly and reliably assert on what is received.
You can also use the extensible API to write your own Binder.</simpara>
<simpara>Spring Cloud Stream uses Spring Boot for configuration, and the Binder abstraction makes it possible for a Spring Cloud Stream application to be flexible in how it connects to middleware.
For example, deployers can dynamically choose, at runtime, the destinations (such as the Kafka topics or RabbitMQ exchanges) to which channels connect.
Such configuration can be provided through external configuration properties and in any form supported by Spring Boot (including application arguments, environment variables, and <literal>application.yml</literal> or <literal>application.properties</literal> files).
In the sink example from the <xref linkend="spring-cloud-stream-overview-introducing"/> section, setting the <literal>spring.cloud.stream.bindings.input.destination</literal> application property to <literal>raw-sensor-data</literal> causes it to read from the <literal>raw-sensor-data</literal> Kafka topic or from a queue bound to the <literal>raw-sensor-data</literal> RabbitMQ exchange.</simpara>
<simpara>Spring Cloud Stream automatically detects and uses a binder found on the classpath.
You can use different types of middleware with the same code.
To do so, include a different binder at build time.
For more complex use cases, you can also package multiple binders with your application and have it choose the binder( and even whether to use different binders for different channels) at runtime.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-persistent-publish-subscribe-support">
<title>Persistent Publish-Subscribe Support</title>
<simpara>Communication between applications follows a publish-subscribe model, where data is broadcast through shared topics.
This can be seen in the following figure, which shows a typical deployment for a set of interacting Spring Cloud Stream applications.</simpara>
<figure>
<title>Spring Cloud Stream Publish-Subscribe</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/SCSt-sensors.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>SCSt sensors</phrase></textobject>
</mediaobject>
</figure>
<simpara>Data reported by sensors to an HTTP endpoint is sent to a common destination named <literal>raw-sensor-data</literal>.
From the destination, it is independently processed by a microservice application that computes time-windowed averages and by another microservice application that ingests the raw data into HDFS (Hadoop Distributed File System).
In order to process the data, both applications declare the topic as their input at runtime.</simpara>
<simpara>The publish-subscribe communication model reduces the complexity of both the producer and the consumer and lets new applications be added to the topology without disruption of the existing flow.
For example, downstream from the average-calculating application, you can add an application that calculates the highest temperature values for display and monitoring.
You can then add another application that interprets the same flow of averages for fault detection.
Doing all communication through shared topics rather than point-to-point queues reduces coupling between microservices.</simpara>
<simpara>While the concept of publish-subscribe messaging is not new, Spring Cloud Stream takes the extra step of making it an opinionated choice for its application model.
By using native middleware support, Spring Cloud Stream also simplifies use of the publish-subscribe model across different platforms.</simpara>
</section>
<section xml:id="consumer-groups">
<title>Consumer Groups</title>
<simpara>While the publish-subscribe model makes it easy to connect applications through shared topics, the ability to scale up by creating multiple instances of a given application is equally important.
When doing so, different instances of an application are placed in a competing consumer relationship, where only one of the instances is expected to handle a given message.</simpara>
<simpara>Spring Cloud Stream models this behavior through the concept of a consumer group.
(Spring Cloud Stream consumer groups are similar to and inspired by Kafka consumer groups.)
Each consumer binding can use the <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.group</literal> property to specify a group name.
For the consumers shown in the following figure, this property would be set as <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.group=hdfsWrite</literal> or <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.group=average</literal>.</simpara>
<figure>
<title>Spring Cloud Stream Consumer Groups</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/SCSt-groups.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>SCSt groups</phrase></textobject>
</mediaobject>
</figure>
<simpara>All groups that subscribe to a given destination receive a copy of published data, but only one member of each group receives a given message from that destination.
By default, when a group is not specified, Spring Cloud Stream assigns the application to an anonymous and independent single-member consumer group that is in a publish-subscribe relationship with all other consumer groups.</simpara>
</section>
<section xml:id="consumer-types">
<title>Consumer Types</title>
<simpara>Two types of consumer are supported:</simpara>
<itemizedlist>
<listitem>
<simpara>Message-driven (sometimes referred to as Asynchronous)</simpara>
</listitem>
<listitem>
<simpara>Polled (sometimes referred to as Synchronous)</simpara>
</listitem>
</itemizedlist>
<simpara>Prior to version 2.0, only asynchronous consumers were supported. A message is delivered as soon as it is available and a thread is available to process it.</simpara>
<simpara>When you wish to control the rate at which messages are processed, you might want to use a synchronous consumer.</simpara>
<section xml:id="durability">
<title>Durability</title>
<simpara>Consistent with the opinionated application model of Spring Cloud Stream, consumer group subscriptions are durable.
That is, a binder implementation ensures that group subscriptions are persistent and that, once at least one subscription for a group has been created, the group receives messages, even if they are sent while all applications in the group are stopped.</simpara>
<note>
<simpara>Anonymous subscriptions are non-durable by nature.
For some binder implementations (such as RabbitMQ), it is possible to have non-durable group subscriptions.</simpara>
</note>
<simpara>In general, it is preferable to always specify a consumer group when binding an application to a given destination.
When scaling up a Spring Cloud Stream application, you must specify a consumer group for each of its input bindings.
Doing so prevents the application&#8217;s instances from receiving duplicate messages (unless that behavior is desired, which is unusual).</simpara>
</section>
</section>
<section xml:id="partitioning">
<title>Partitioning Support</title>
<simpara>Spring Cloud Stream provides support for partitioning data between multiple instances of a given application.
In a partitioned scenario, the physical communication medium (such as the broker topic) is viewed as being structured into multiple partitions.
One or more producer application instances send data to multiple consumer application instances and ensure that data identified by common characteristics are processed by the same consumer instance.</simpara>
<simpara>Spring Cloud Stream provides a common abstraction for implementing partitioned processing use cases in a uniform fashion.
Partitioning can thus be used whether the broker itself is naturally partitioned (for example, Kafka) or not (for example, RabbitMQ).</simpara>
<figure>
<title>Spring Cloud Stream Partitioning</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/SCSt-partitioning.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>SCSt partitioning</phrase></textobject>
</mediaobject>
</figure>
<simpara>Partitioning is a critical concept in stateful processing, where it is critical (for either performance or consistency reasons) to ensure that all related data is processed together.
For example, in the time-windowed average calculation example, it is important that all measurements from any given sensor are processed by the same application instance.</simpara>
<note>
<simpara>To set up a partitioned processing scenario, you must configure both the data-producing and the data-consuming ends.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="_programming_model">
<title>Programming Model</title>
<simpara>To understand the programming model, you should be familiar with the following core concepts:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Destination Binders:</emphasis> Components responsible to provide integration with the external messaging systems.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Destination Bindings:</emphasis> Bridge between the external messaging systems and application provided <emphasis>Producers</emphasis> and <emphasis>Consumers</emphasis> of messages (created by the Destination Binders).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Message:</emphasis> The canonical data structure used by producers and consumers to communicate with Destination Binders (and thus other applications via external messaging systems).</simpara>
</listitem>
</itemizedlist>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/SCSt-overview.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>SCSt overview</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_destination_binders">
<title>Destination Binders</title>
<simpara>Destination Binders are extension components of Spring Cloud Stream responsible for providing the necessary configuration and implementation to facilitate
integration with external messaging systems.
This integration is responsible for connectivity, delegation, and routing of messages to and from producers and consumers, data type conversion,
invocation of the user code, and more.</simpara>
<simpara>Binders handle a lot of the boiler plate responsibilities that would otherwise fall on your shoulders. However, to accomplish that, the binder still needs
some help in the form of minimalistic yet required set of instructions from the user, which typically come in the form of some type of configuration.</simpara>
<simpara>While it is out of scope of this section to discuss all of the available binder and binding configuration options (the rest of the manual covers them extensively),
<emphasis>Destination Binding</emphasis> does require special attention. The next section discusses it in detail.</simpara>
</section>
<section xml:id="_destination_bindings">
<title>Destination Bindings</title>
<simpara>As stated earlier, <emphasis>Destination Bindings</emphasis> provide a bridge between the external messaging system and application-provided <emphasis>Producers</emphasis> and <emphasis>Consumers</emphasis>.</simpara>
<simpara>Applying the @EnableBinding annotation to one of the application’s configuration classes defines a destination binding.
The <literal>@EnableBinding</literal> annotation itself is meta-annotated with <literal>@Configuration</literal> and triggers the configuration of the Spring Cloud Stream infrastructure.</simpara>
<simpara>The following example shows a fully configured and functioning Spring Cloud Stream application that receives the payload of the message from the <literal>INPUT</literal>
destination as a <literal>String</literal> type (see <xref linkend="content-type-management"/> section), logs it to the console and sends it to the <literal>OUTPUT</literal> destination after converting it to upper case.</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Processor.class)
public class MyApplication {

	public static void main(String[] args) {
		SpringApplication.run(MyApplication.class, args);
	}

	@StreamListener(Processor.INPUT)
	@SendTo(Processor.OUTPUT)
	public String handle(String value) {
		System.out.println("Received: " + value);
		return value.toUpperCase();
	}
}</programlisting>
<simpara>As you can see the <literal>@EnableBinding</literal> annotation can take one or more interface classes as parameters. The parameters are referred to as <emphasis>bindings</emphasis>,
and they contain methods representing <emphasis>bindable components</emphasis>.
These components are typically message channels (see <link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-messaging.html">Spring Messaging</link>)
for channel-based binders (such as Rabbit, Kafka, and others). However other types of bindings can
provide support for the native features of the corresponding technology. For example Kafka Streams binder (formerly known as KStream) allows native bindings directly to Kafka Streams
(see <link xl:href="https://docs.spring.io/autorepo/docs/spring-cloud-stream-binder-kafka-docs/1.1.0.M1/reference/htmlsingle/">Kafka Streams</link> for more details).</simpara>
<simpara>Spring Cloud Stream already provides <emphasis>binding</emphasis> interfaces for typical message exchange contracts, which include:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Sink:</emphasis> Identifies the contract for the message consumer by providing the destination from which the message is consumed.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Source:</emphasis> Identifies the contract for the message producer by providing the destination to which the produced message is sent.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Processor:</emphasis> Encapsulates both the sink and the source contracts by exposing two destinations that allow consumption and production of messages.</simpara>
</listitem>
</itemizedlist>
<programlisting language="java" linenumbering="unnumbered">public interface Sink {

  String INPUT = "input";

  @Input(Sink.INPUT)
  SubscribableChannel input();
}</programlisting>
<programlisting language="java" linenumbering="unnumbered">public interface Source {

  String OUTPUT = "output";

  @Output(Source.OUTPUT)
  MessageChannel output();
}</programlisting>
<programlisting language="java" linenumbering="unnumbered">public interface Processor extends Source, Sink {}</programlisting>
<simpara>While the preceding example satisfies the majority of cases, you can also define your own contracts by defining your own bindings interfaces and use <literal>@Input</literal> and <literal>@Output</literal>
annotations to identify the actual <emphasis>bindable components</emphasis>.</simpara>
<simpara>For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface Barista {

    @Input
    SubscribableChannel orders();

    @Output
    MessageChannel hotDrinks();

    @Output
    MessageChannel coldDrinks();
}</programlisting>
<simpara>Using the interface shown in the preceding example as a parameter to <literal>@EnableBinding</literal> triggers the creation of the three bound channels named <literal>orders</literal>, <literal>hotDrinks</literal>, and <literal>coldDrinks</literal>,
respectively.</simpara>
<simpara>You can provide as many binding interfaces as you need, as arguments to the <literal>@EnableBinding</literal> annotation, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(value={Orders.class, Payment.class}</programlisting>
<simpara>In Spring Cloud Stream, the bindable <literal>MessageChannel</literal> components are the Spring Messaging <literal>MessageChannel</literal> (for outbound) and its extension, <literal>SubscribableChannel</literal>,
(for inbound).</simpara>
<simpara><emphasis role="strong">Pollable Destination Binding</emphasis></simpara>
<simpara>While the previously described bindings support event-based message consumption, sometimes you need more control, such as rate of consumption.</simpara>
<simpara>Starting with version 2.0, you can now bind a pollable consumer:</simpara>
<simpara>The following example shows how to bind a pollable consumer:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface PolledBarista {

    @Input
    PollableMessageSource orders();
	. . .
}</programlisting>
<simpara>In this case, an implementation of <literal>PollableMessageSource</literal> is bound to the <literal>orders</literal> “channel”. See <xref linkend="spring-cloud-streams-overview-using-polled-consumers"/> for more details.</simpara>
<simpara><emphasis role="strong">Customizing Channel Names</emphasis></simpara>
<simpara>By using the <literal>@Input</literal> and <literal>@Output</literal> annotations, you can specify a customized channel name for the channel, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface Barista {
    @Input("inboundOrders")
    SubscribableChannel orders();
}</programlisting>
<simpara>In the preceding example, the created bound channel is named <literal>inboundOrders</literal>.</simpara>
<simpara>Normally, you need not access individual channels or bindings directly  (other then configuring them via <literal>@EnableBinding</literal> annotation). However there may be
times, such as testing or other corner cases, when you do.</simpara>
<simpara>Aside from generating channels for each binding and registering them as Spring beans, for each bound interface, Spring Cloud Stream generates a bean that implements the interface.
That means you can have access to the interfaces representing the bindings or individual channels by auto-wiring either in your application, as shown in the following two examples:</simpara>
<simpara><emphasis>Autowire Binding interface</emphasis></simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowire
private Source source

public void sayHello(String name) {
    source.output().send(MessageBuilder.withPayload(name).build());
}</programlisting>
<simpara><emphasis>Autowire individual channel</emphasis></simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowire
private MessageChannel output;

public void sayHello(String name) {
    output.send(MessageBuilder.withPayload(name).build());
}</programlisting>
<simpara>You can also use standard Spring&#8217;s <literal>@Qualifier</literal> annotation for cases when channel names are customized or in multiple-channel scenarios that require specifically named channels.</simpara>
<simpara>The following example shows how to use the @Qualifier annotation in this way:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowire
@Qualifier("myChannel")
private MessageChannel output;</programlisting>
</section>
<section xml:id="spring-cloud-stream-overview-producing-consuming-messages">
<title>Producing and Consuming Messages</title>
<simpara>You can write a Spring Cloud Stream application by using either Spring Integration annotations or Spring Cloud Stream native annotation.</simpara>
<section xml:id="_spring_integration_support">
<title>Spring Integration Support</title>
<simpara>Spring Cloud Stream is built on the concepts and patterns defined by <link xl:href="https://www.enterpriseintegrationpatterns.com/">Enterprise Integration Patterns</link> and relies
in its internal implementation on an already established and popular implementation of Enterprise Integration Patterns within the Spring portfolio of projects:
<link xl:href="https://projects.spring.io/spring-integration/">Spring Integration</link> framework.</simpara>
<simpara>So its only natiural for it to support the foundation, semantics, and configuration options that are already established by Spring Integration</simpara>
<simpara>For example, you can attach the output channel of a <literal>Source</literal> to a <literal>MessageSource</literal> and use the familiar <literal>@InboundChannelAdapter</literal> annotation, as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Source.class)
public class TimerSource {

  @Bean
  @InboundChannelAdapter(value = Source.OUTPUT, poller = @Poller(fixedDelay = "10", maxMessagesPerPoll = "1"))
  public MessageSource&lt;String&gt; timerMessageSource() {
    return () -&gt; new GenericMessage&lt;&gt;("Hello Spring Cloud Stream");
  }
}</programlisting>
<simpara>Similarly, you can use @Transformer or @ServiceActivator while providing an implementation of a message handler method for a <emphasis>Processor</emphasis> binding contract, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Processor.class)
public class TransformProcessor {
  @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)
  public Object transform(String message) {
    return message.toUpperCase();
  }
}</programlisting>
<note>
<simpara>While this may be skipping ahead a bit, it is important to understand that, when you consume from the same binding using <literal>@StreamListener</literal> annotation, a pub-sub model is used.
Each method annotated with <literal>@StreamListener</literal> receives its own copy of a message, and each one has its own consumer group.
However, if you consume from the same binding by using one of the Spring Integration annotation (such as <literal>@Aggregator</literal>, <literal>@Transformer</literal>, or <literal>@ServiceActivator</literal>), those consume in a competing model.
No individual consumer group is created for each subscription.</simpara>
</note>
</section>
<section xml:id="_using_streamlistener_annotation">
<title>Using @StreamListener Annotation</title>
<simpara>Complementary to its Spring Integration support, Spring Cloud Stream provides its own <literal>@StreamListener</literal> annotation, modeled after other Spring Messaging annotations
(<literal>@MessageMapping</literal>, <literal>@JmsListener</literal>, <literal>@RabbitListener</literal>, and others) and provides conviniences, such as content-based routing and others.</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
public class VoteHandler {

  @Autowired
  VotingService votingService;

  @StreamListener(Sink.INPUT)
  public void handle(Vote vote) {
    votingService.record(vote);
  }
}</programlisting>
<simpara>As with other Spring Messaging methods, method arguments can be annotated with <literal>@Payload</literal>, <literal>@Headers</literal>, and <literal>@Header</literal>.</simpara>
<simpara>For methods that return data, you must use the <literal>@SendTo</literal> annotation to specify the output binding destination for data returned by the method, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Processor.class)
public class TransformProcessor {

  @Autowired
  VotingService votingService;

  @StreamListener(Processor.INPUT)
  @SendTo(Processor.OUTPUT)
  public VoteResult handle(Vote vote) {
    return votingService.record(vote);
  }
}</programlisting>
</section>
<section xml:id="_using_streamlistener_for_content_based_routing">
<title>Using @StreamListener for Content-based routing</title>
<simpara>Spring Cloud Stream supports dispatching messages to multiple handler methods annotated with <literal>@StreamListener</literal> based on conditions.</simpara>
<simpara>In order to be eligible to support conditional dispatching, a method must satisfy the follow conditions:</simpara>
<itemizedlist>
<listitem>
<simpara>It must not return a value.</simpara>
</listitem>
<listitem>
<simpara>It must be an individual message handling method (reactive API methods are not supported).</simpara>
</listitem>
</itemizedlist>
<simpara>The condition is specified by a SpEL expression in the <literal>condition</literal> argument of the annotation and is evaluated for each message.
All the handlers that match the condition are invoked in the same thread, and no assumption must be made about the order in which the invocations take place.</simpara>
<simpara>In the following example of a <literal>@StreamListener</literal> with dispatching conditions, all the messages bearing a header <literal>type</literal> with the value <literal>bogey</literal> are dispatched to the
<literal>receiveBogey</literal> method, and all the messages bearing a header <literal>type</literal> with the value <literal>bacall</literal> are dispatched to the <literal>receiveBacall</literal> method.</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
@EnableAutoConfiguration
public static class TestPojoWithAnnotatedArguments {

    @StreamListener(target = Sink.INPUT, condition = "headers['type']=='bogey'")
    public void receiveBogey(@Payload BogeyPojo bogeyPojo) {
       // handle the message
    }

    @StreamListener(target = Sink.INPUT, condition = "headers['type']=='bacall'")
    public void receiveBacall(@Payload BacallPojo bacallPojo) {
       // handle the message
    }
}</programlisting>
<simpara><emphasis role="strong">Content Type Negotiation in the Context of <literal>condition</literal></emphasis></simpara>
<simpara>It is important to understand some of the mechanics behind content-based routing using the <literal>condition</literal> argument of <literal>@StreamListener</literal>, especially in the context of the type of the message as a whole.
It may also help if you familiarize yourself with the <xref linkend="content-type-management"/>  before you proceed.</simpara>
<simpara>Consider the following scenario:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
@EnableAutoConfiguration
public static class CatsAndDogs {

    @StreamListener(target = Sink.INPUT, condition = "payload.class.simpleName=='Dog'")
    public void bark(Dog dog) {
       // handle the message
    }

    @StreamListener(target = Sink.INPUT, condition = "payload.class.simpleName=='Cat'")
    public void purr(Cat cat) {
       // handle the message
    }
}</programlisting>
<simpara>The preceding code is perfectly valid. It compiles and deploys without any issues, yet it never produces the result you expect.</simpara>
<simpara>That is because you are testing something that does not yet exist in a state you expect. That is becouse the payload of the message is not yet converted from the
wire format (<literal>byte[]</literal>) to the desired type.
In other words, it has not yet gone through the type conversion process described in the <xref linkend="content-type-management"/>.</simpara>
<simpara>So, unless you use a SPeL expression that evaluates raw data (for example, the value of the first byte in the byte array), use message header-based expressions
(such as <literal>condition = "headers['type']=='dog'"</literal>).</simpara>
<note>
<simpara>At the moment, dispatching through <literal>@StreamListener</literal> conditions is supported only for channel-based binders (not for reactive programming)
support.</simpara>
</note>
</section>
<section xml:id="spring-cloud-streams-overview-using-polled-consumers">
<title>Using Polled Consumers</title>
<simpara>When using polled consumers, you poll the <literal>PollableMessageSource</literal> on demand.
Consider the following example of a polled consumer:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface PolledConsumer {

    @Input
    PollableMessageSource destIn();

    @Output
    MessageChannel destOut();

}</programlisting>
<simpara>Given the polled consumer in the preceding example, you might use it as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public ApplicationRunner poller(PollableMessageSource destIn, MessageChannel destOut) {
    return args -&gt; {
        while (someCondition()) {
            try {
                if (!destIn.poll(m -&gt; {
                    String newPayload = ((String) m.getPayload()).toUpperCase();
                    destOut.send(new GenericMessage&lt;&gt;(newPayload));
                })) {
                    Thread.sleep(1000);
                }
            }
            catch (Exception e) {
                // handle failure (throw an exception to reject the message);
            }
        }
    };
}</programlisting>
<simpara>The <literal>PollableMessageSource.poll()</literal> method takes a <literal>MessageHandler</literal> argument (often a lambda expression, as shown here).
It returns <literal>true</literal> if the message was received and successfully processed.</simpara>
<simpara>As with message-driven consumers, if the <literal>MessageHandler</literal> throws an exception, messages are published to error channels, as discussed in &#8220;<xref linkend="binder-error-channels"/>&#8221;.</simpara>
<simpara>Normally, the <literal>poll()</literal> method acknowledges the message when the <literal>MessageHandler</literal> exits.
If the method exits abnormally, the message is rejected (not re-queued).
You can override that behavior by taking responsibility for the acknowledgment, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public ApplicationRunner poller(PollableMessageSource dest1In, MessageChannel dest2Out) {
    return args -&gt; {
        while (someCondition()) {
            if (!dest1In.poll(m -&gt; {
                StaticMessageHeaderAccessor.getAcknowledgmentCallback(m).noAutoAck();
                // e.g. hand off to another thread which can perform the ack
                // or acknowledge(Status.REQUEUE)

            })) {
                Thread.sleep(1000);
            }
        }
    };
}</programlisting>
<important>
<simpara>You must <literal>ack</literal> (or <literal>nack</literal>) the message at some point, to avoid resource leaks.</simpara>
</important>
<important>
<simpara>Some messaging systems (such as Apache Kafka) maintain a simple offset in a log. If a delivery fails and is re-queued with  <literal>StaticMessageHeaderAccessor.getAcknowledgmentCallback(m).acknowledge(Status.REQUEUE);</literal>, any later successfully ack&#8217;d messages are redelivered.</simpara>
</important>
<simpara>There is also an overloaded <literal>poll</literal> method, for which the definition is as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">poll(MessageHandler handler, ParameterizedTypeReference&lt;?&gt; type)</programlisting>
<simpara>The <literal>type</literal> is a conversion hint that allows the incoming message payload to be converted, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">boolean result = pollableSource.poll(received -&gt; {
			Map&lt;String, Foo&gt; payload = (Map&lt;String, Foo&gt;) received.getPayload();
            ...

		}, new ParameterizedTypeReference&lt;Map&lt;String, Foo&gt;&gt;() {});</programlisting>
</section>
</section>
<section xml:id="spring-cloud-stream-overview-error-handling">
<title>Error Handling</title>
<simpara>Errors happen, and Spring Cloud Stream provides several flexible mechanisms to handle them.
The error handling comes in two flavors:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">application:</emphasis> The error handling is done within the application (custom error handler).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">system:</emphasis> The error handling is delegated to the binder (re-queue, DL, and others). Note that the techniques are dependent on binder implementation and the
capability of the underlying messaging middleware.</simpara>
</listitem>
</itemizedlist>
<simpara>Spring Cloud Stream uses the <link xl:href="https://github.com/spring-projects/spring-retry">Spring Retry</link> library to facilitate successful message processing. See <xref linkend="_retry_template"/> for more details.
However, when all fails, the exceptions thrown by the message handlers are propagated back to the binder. At that point, binder invokes custom error handler or communicates
the error back to the messaging system (re-queue, DLQ, and others).</simpara>
<section xml:id="_application_error_handling">
<title>Application Error Handling</title>
<simpara>There are two types of application-level error handling. Errors can be handled at each binding subscription or a global handler can handle all the binding subscription errors. Let&#8217;s review the details.</simpara>
<figure>
<title>A Spring Cloud Stream Sink Application with Custom and Global Error Handlers</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/custom_vs_global_error_channels.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>custom vs global error channels</phrase></textobject>
</mediaobject>
</figure>
<simpara>For each input binding, Spring Cloud Stream creates a dedicated error channel with the following semantics <literal>&lt;destinationName&gt;.errors</literal>.</simpara>
<note>
<simpara>The <literal>&lt;destinationName&gt;</literal> consists of the name of the binding (such as <literal>input</literal>) and the name of the group (such as <literal>myGroup</literal>).</simpara>
</note>
<simpara>Consider the following:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.bindings.input.group=myGroup</programlisting>
<programlisting language="java" linenumbering="unnumbered">@StreamListener(Sink.INPUT) // destination name 'input.myGroup'
public void handle(Person value)
	throw new RuntimeException("BOOM!");
}

@ServiceActivator(inputChannel = Processor.INPUT + ".myGroup.errors") //channel name 'input.myGroup.errors'
public void error(Message&lt;?&gt; message) {
	System.out.println("Handling ERROR: " + message);
}</programlisting>
<simpara>In the preceeding example the destination name is <literal>input.myGroup</literal> and the dedicated error channel name is <literal>input.myGroup.errors</literal>.</simpara>
<note>
<simpara>The use of @StreamListener annotation is intended specifically to define bindings that bridge internal channels and external destinations. Given that the destination
specific error channel does NOT have an associated external destination, such channel is a prerogative of Spring Integration (SI). This means that the handler
for such destination must be defined using one of the SI handler annotations (i.e., @ServiceActivator, @Transformer etc.).</simpara>
</note>
<note>
<simpara>If <literal>group</literal> is not specified anonymous group is used (something like <literal>input.anonymous.2K37rb06Q6m2r51-SPIDDQ</literal>), which is not suitable for error
handling scenarious, since you don&#8217;t know what it&#8217;s going to be until the destination is created.</simpara>
</note>
<simpara>Also, in the event you are binidng to the existing destination such as:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.bindings.input.destination=myFooDestination
spring.cloud.stream.bindings.input.group=myGroup</programlisting>
<simpara>the full destination name is <literal>myFooDestination.myGroup</literal> and then the dedicated error channel name is <literal>myFooDestination.myGroup.errors</literal>.</simpara>
<simpara>Back to the example. . .</simpara>
<simpara>The <literal>handle(..)</literal> method, which subscribes to the channel named <literal>input</literal>, throws an exception.  Given there is also a subscriber to the error channel <literal>input.myGroup.errors</literal>
all error messages are handled by this subscriber.</simpara>
<simpara>If you have multiple bindings, you may want to have a single error handler. Spring Cloud Stream automatically provides support for
a <emphasis>global error channel</emphasis> by bridging each individual error channel to the channel named <literal>errorChannel</literal>, allowing a single subscriber to handle all errors,
as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@StreamListener(“errorChannel")
public void error(Message&lt;?&gt; message) {
	System.out.println("Handling ERROR: " + message);
}</programlisting>
<simpara>This may be a convenient option if error handling logic is the same regardless of which handler produced the error.</simpara>
<simpara>Also, error messages sent to the <literal>errorChannel</literal> can be published to the specific destination at the broker by configuring a binding named <literal>error</literal> for the outbound target.
This option provides a mechanism to automatically send error messages to another application bound to that destination or for later retrieval (for example, audit).
For example, to publish error messages to a broker destination named <literal>myErrors</literal>, set the following property:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.bindings.error.destination=myErrors.</programlisting>
<note>
<simpara>The ability to bridge global error channel to a broker destination essentially provides a mechanism which connects
the <emphasis>application-level</emphasis> error handling with the <emphasis>system-level</emphasis> error handling.</simpara>
</note>
</section>
<section xml:id="_system_error_handling">
<title>System Error Handling</title>
<simpara>System-level error handling implies that the errors are communicated back to the messaging system and, given that not every messaging system
is the same, the capabilities may differ from binder to binder.</simpara>
<simpara>That said, in this section we explain the general idea behind system level error handling and use Rabbit binder as an example. NOTE: Kafka binder provides similar
support, although some configuration properties do differ. Also, for more details and configuration options, see the individual binder&#8217;s documentation.</simpara>
<simpara>If no internal error handlers are configured, the errors propagate to the binders, and the binders subsequently propagate those errors back to the messaging system.
Depending on the capabilities of the messaging system such a system may <emphasis>drop</emphasis> the message, <emphasis>re-queue</emphasis> the message for re-processing or <emphasis>send the failed message to DLQ</emphasis>.
Both Rabbit and Kafka support these concepts. However, other binders may not, so refer to your individual binder’s documentation for details on supported system-level
error-handling options.</simpara>
<section xml:id="_drop_failed_messages">
<title>Drop Failed Messages</title>
<simpara>By default, if no additional system-level configuration is provided, the messaging system drops the failed message.
While acceptable in some cases, for most cases, it is not, and we need some recovery mechanism to avoid message loss.</simpara>
</section>
<section xml:id="_dlq_dead_letter_queue">
<title>DLQ - Dead Letter Queue</title>
<simpara>DLQ allows failed messages to be sent to a special destination: - <emphasis>Dead Letter Queue</emphasis>.</simpara>
<simpara>When configured, failed messages are sent to this destination for subsequent re-processing or auditing and reconciliation.</simpara>
<simpara>For example, continuing on the previous example and to set up the DLQ with Rabbit binder, you need to set the following property:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.rabbit.bindings.input.consumer.auto-bind-dlq=true</programlisting>
<simpara>Keep in mind that, in the above property, <literal>input</literal> corresponds to the name of the input destination binding.
The <literal>consumer</literal> indicates that it is a consumer property and <literal>auto-bind-dlq</literal> instructs the binder to configure DLQ for <literal>input</literal>
destination, which results in an additional Rabbit queue named <literal>input.myGroup.dlq</literal>.</simpara>
<simpara>Once configured, all failed messages are routed to this queue with an error message similar to the following:</simpara>
<programlisting language="text" linenumbering="unnumbered">delivery_mode:	1
headers:
x-death:
count:	1
reason:	rejected
queue:	input.hello
time:	1522328151
exchange:
routing-keys:	input.myGroup
Payload {"name”:"Bob"}</programlisting>
<simpara>As you can see from the above, your original message is preserved for further actions.</simpara>
<simpara>However, one thing you may have noticed is that there is limited information on the original issue with the message processing. For example, you do not see a stack
trace corresponding to the original error.
To get more relevant information about the original error, you must set an additional property:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.rabbit.bindings.input.consumer.republish-to-dlq=true</programlisting>
<simpara>Doing so forces the internal error handler to intercept the error message and add additional information to it before publishing it to DLQ.
Once configured, you can see that the error message contains more information relevant to the original error, as follows:</simpara>
<programlisting language="text" linenumbering="unnumbered">delivery_mode:	2
headers:
x-original-exchange:
x-exception-message:	has an error
x-original-routingKey:	input.myGroup
x-exception-stacktrace:	org.springframework.messaging.MessageHandlingException: nested exception is
      org.springframework.messaging.MessagingException: has an error, failedMessage=GenericMessage [payload=byte[15],
      headers={amqp_receivedDeliveryMode=NON_PERSISTENT, amqp_receivedRoutingKey=input.hello, amqp_deliveryTag=1,
      deliveryAttempt=3, amqp_consumerQueue=input.hello, amqp_redelivered=false, id=a15231e6-3f80-677b-5ad7-d4b1e61e486e,
      amqp_consumerTag=amq.ctag-skBFapilvtZhDsn0k3ZmQg, contentType=application/json, timestamp=1522327846136}]
      at org.spring...integ...han...MethodInvokingMessageProcessor.processMessage(MethodInvokingMessageProcessor.java:107)
      at. . . . .
Payload {"name”:"Bob"}</programlisting>
<simpara>This effectively combines application-level and system-level error handling to further assist with downstream troubleshooting mechanics.</simpara>
</section>
<section xml:id="_re_queue_failed_messages">
<title>Re-queue Failed Messages</title>
<simpara>As mentioned earlier, the currently supported binders (Rabbit and Kafka) rely on <literal>RetryTemplate</literal> to facilitate successful message processing. See <xref linkend="_retry_template"/> for details.
However, for cases when <literal>max-attempts</literal> property is set to 1, internal reprocessing of the message is disabled. At this point, you can facilitate message re-processing (re-tries)
by instructing the messaging system to re-queue the failed message. Once re-queued, the failed message is sent back to the original handler, essentially creating a retry loop.</simpara>
<simpara>This option may be feasible for cases where the nature of the error is related to some sporadic yet short-term unavailability of some resource.</simpara>
<simpara>To accomplish that, you must set the following properties:</simpara>
<programlisting language="text" linenumbering="unnumbered">spring.cloud.stream.bindings.input.consumer.max-attempts=1
spring.cloud.stream.rabbit.bindings.input.consumer.requeue-rejected=true</programlisting>
<simpara>In the preceding example, the <literal>max-attempts</literal> set to 1 essentially disabling internal re-tries and <literal>requeue-rejected</literal> (short for <emphasis>requeue rejected messages</emphasis>) is set to <literal>true</literal>.
Once set, the failed message is resubmitted to the same handler and loops continuously or until the handler throws <literal>AmqpRejectAndDontRequeueException</literal>
essentially allowing you to build your own re-try logic within the handler itself.</simpara>
</section>
</section>
<section xml:id="_retry_template">
<title>Retry Template</title>
<simpara>The <literal>RetryTemplate</literal> is part of the <link xl:href="https://github.com/spring-projects/spring-retry">Spring Retry</link> library.
While it is out of scope of this dcument to cover all of the capabilities of the <literal>RetryTemplate</literal>, we will mention the following consumer properties that are specifically related to
the <literal>RetryTemplate</literal>:</simpara>
<variablelist>
<varlistentry>
<term>maxAttempts</term>
<listitem>
<simpara>The number of attempts to process the message.</simpara>
<simpara>Default: 3.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffInitialInterval</term>
<listitem>
<simpara>The backoff initial interval on retry.</simpara>
<simpara>Default 1000 milliseconds.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffMaxInterval</term>
<listitem>
<simpara>The maximum backoff interval.</simpara>
<simpara>Default 10000 milliseconds.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffMultiplier</term>
<listitem>
<simpara>The backoff multiplier.</simpara>
<simpara>Default 2.0.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>While the preceding settings are sufficient for majority of the customization requirements, they may not satisfy certain complex requirements at, which
point you may want to provide your own instance of the <literal>RetryTemplate</literal>. To do so configure it as a <literal>@Bean</literal> in your application configuration. The application provided
instance overrides the one provided by the framework.</simpara>
</section>
</section>
<section xml:id="spring-cloud-stream-overview-reactive-programming-support">
<title>Reactive Programming Support</title>
<simpara>Spring Cloud Stream also supports the use of reactive APIs where incoming and outgoing data is handled as continuous data flows.
Support for reactive APIs is available through <literal>spring-cloud-stream-reactive</literal>, which needs to be added explicitly to your project.</simpara>
<simpara>The programming model with reactive APIs is declarative. Instead of specifying how each individual message should be handled, you can use operators that describe functional transformations from inbound to outbound data flows.</simpara>
<simpara>At present Spring Cloud Stream supports the only the <link xl:href="https://projectreactor.io/">Reactor API</link>.
In the future, we intend to support a more generic model based on Reactive Streams.</simpara>
<simpara>The reactive programming model also uses the <literal>@StreamListener</literal> annotation for setting up reactive handlers.
The differences are that:</simpara>
<itemizedlist>
<listitem>
<simpara>The <literal>@StreamListener</literal> annotation must not specify an input or output, as they are provided as arguments and return values from the method.</simpara>
</listitem>
<listitem>
<simpara>The arguments of the method must be annotated with <literal>@Input</literal> and <literal>@Output</literal>, indicating which input or output the incoming and outgoing data flows connect to, respectively.</simpara>
</listitem>
<listitem>
<simpara>The return value of the method, if any, is annotated with <literal>@Output</literal>, indicating the input where data should be sent.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Reactive programming support requires Java 1.8.</simpara>
</note>
<note>
<simpara>As of Spring Cloud Stream 1.1.1 and later (starting with release train Brooklyn.SR2), reactive programming support requires the use of Reactor 3.0.4.RELEASE and higher.
Earlier Reactor versions (including 3.0.1.RELEASE, 3.0.2.RELEASE and 3.0.3.RELEASE) are not supported.
<literal>spring-cloud-stream-reactive</literal> transitively retrieves the proper version, but it is possible for the project structure to manage the version of the <literal>io.projectreactor:reactor-core</literal> to an earlier release, especially when using Maven.
This is the case for projects generated by using Spring Initializr with Spring Boot 1.x, which overrides the Reactor version to <literal>2.0.8.RELEASE</literal>.
In such cases, you must ensure that the proper version of the artifact is released.
You can do so by adding a direct dependency on <literal>io.projectreactor:reactor-core</literal> with a version of <literal>3.0.4.RELEASE</literal> or later to your project.</simpara>
</note>
<note>
<simpara>The use of term, &#8220;reactive&#8221;, currently refers to the reactive APIs being used and not to the execution model being reactive (that is, the bound endpoints still use a 'push' rather than a 'pull' model). While some backpressure support is provided by the use of Reactor, we do intend, in a future release, to support entirely reactive pipelines by the use of native reactive clients for the connected middleware.</simpara>
</note>
<section xml:id="_reactor_based_handlers">
<title>Reactor-based Handlers</title>
<simpara>A Reactor-based handler can have the following argument types:</simpara>
<itemizedlist>
<listitem>
<simpara>For arguments annotated with <literal>@Input</literal>, it supports the  Reactor <literal>Flux</literal> type.
The parameterization of the inbound Flux follows the same rules as in the case of individual message handling: It can be the entire <literal>Message</literal>, a POJO that can be the <literal>Message</literal> payload, or a POJO that is the result of a transformation based on the <literal>Message</literal> content-type header. Multiple inputs are provided.</simpara>
</listitem>
<listitem>
<simpara>For arguments annotated with <literal>Output</literal>, it supports the <literal>FluxSender</literal> type, which connects a <literal>Flux</literal> produced by the method with an output. Generally speaking, specifying outputs as arguments is only recommended when the method can have multiple outputs.</simpara>
</listitem>
</itemizedlist>
<simpara>A Reactor-based handler supports a return type of <literal>Flux</literal>. In that case, it must be annotated with <literal>@Output</literal>. We recommend using the return value of the method when a single output <literal>Flux</literal> is available.</simpara>
<simpara>The following example shows a Reactor-based <literal>Processor</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Processor.class)
@EnableAutoConfiguration
public static class UppercaseTransformer {

  @StreamListener
  @Output(Processor.OUTPUT)
  public Flux&lt;String&gt; receive(@Input(Processor.INPUT) Flux&lt;String&gt; input) {
    return input.map(s -&gt; s.toUpperCase());
  }
}</programlisting>
<simpara>The same processor using output arguments looks like the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Processor.class)
@EnableAutoConfiguration
public static class UppercaseTransformer {

  @StreamListener
  public void receive(@Input(Processor.INPUT) Flux&lt;String&gt; input,
     @Output(Processor.OUTPUT) FluxSender output) {
     output.send(input.map(s -&gt; s.toUpperCase()));
  }
}</programlisting>
</section>
<section xml:id="_reactive_sources">
<title>Reactive Sources</title>
<simpara>Spring Cloud Stream reactive support also provides the ability for creating reactive sources through the <literal>@StreamEmitter</literal> annotation.
By using the <literal>@StreamEmitter</literal> annotation, a regular source may be converted to a reactive one.
<literal>@StreamEmitter</literal> is a method level annotation that marks a method to be an emitter to outputs declared with <literal>@EnableBinding</literal>.
You cannot use the <literal>@Input</literal> annotation along with <literal>@StreamEmitter</literal>, as the methods marked with this annotation are not listening for any input. Rather, methods marked with <literal>@StreamEmitter</literal> generate output.
Following the same programming model used in <literal>@StreamListener</literal>, <literal>@StreamEmitter</literal> also allows flexible ways of using the <literal>@Output</literal> annotation, depending on whether the method has any arguments, a return type, and other considerations.</simpara>
<simpara>The remainder of this section contains examples of using the <literal>@StreamEmitter</literal> annotation in various styles.</simpara>
<simpara>The following example emits the <literal>Hello, World</literal> message every millisecond and publishes to a Reactor <literal>Flux</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Source.class)
@EnableAutoConfiguration
public static class HelloWorldEmitter {

  @StreamEmitter
  @Output(Source.OUTPUT)
  public Flux&lt;String&gt; emit() {
    return Flux.intervalMillis(1)
            .map(l -&gt; "Hello World");
  }
}</programlisting>
<simpara>In the preceding example, the resulting messages in the <literal>Flux</literal> are sent to the output channel of the <literal>Source</literal>.</simpara>
<simpara>The next example is another flavor of an <literal>@StreamEmmitter</literal> that sends a Reactor <literal>Flux</literal>.
Instead of returning a <literal>Flux</literal>, the following method uses a <literal>FluxSender</literal> to programmatically send a <literal>Flux</literal> from a source:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Source.class)
@EnableAutoConfiguration
public static class HelloWorldEmitter {

  @StreamEmitter
  @Output(Source.OUTPUT)
  public void emit(FluxSender output) {
    output.send(Flux.intervalMillis(1)
            .map(l -&gt; "Hello World"));
  }
}</programlisting>
<simpara>The next example is exactly same as the above snippet in functionality and style.
However, instead of using an explicit <literal>@Output</literal> annotation on the method, it uses the annotation on the method parameter.</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Source.class)
@EnableAutoConfiguration
public static class HelloWorldEmitter {

  @StreamEmitter
  public void emit(@Output(Source.OUTPUT) FluxSender output) {
    output.send(Flux.intervalMillis(1)
            .map(l -&gt; "Hello World"));
  }
}</programlisting>
<simpara>The last example in this section is yet another flavor of writing reacting sources by using the Reactive Streams Publisher API and taking advantage of the support for it in <link xl:href="https://github.com/spring-projects/spring-integration-java-dsl/wiki/Spring-Integration-Java-DSL-Reference">Spring Integration Java DSL</link>.
The <literal>Publisher</literal> in the following example still uses Reactor <literal>Flux</literal> under the hood, but, from an application perspective, that is transparent to the user and only needs Reactive Streams and Java DSL for Spring Integration:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Source.class)
@EnableAutoConfiguration
public static class HelloWorldEmitter {

  @StreamEmitter
  @Output(Source.OUTPUT)
  @Bean
  public Publisher&lt;Message&lt;String&gt;&gt; emit() {
    return IntegrationFlows.from(() -&gt;
                new GenericMessage&lt;&gt;("Hello World"),
        e -&gt; e.poller(p -&gt; p.fixedDelay(1)))
        .toReactivePublisher();
  }
}</programlisting>
</section>
</section>
</chapter>
<chapter xml:id="spring-cloud-stream-overview-binders">
<title>Binders</title>
<simpara>Spring Cloud Stream provides a Binder abstraction for use in connecting to physical destinations at the external middleware.
This section provides information about the main concepts behind the Binder SPI, its main components, and implementation-specific details.</simpara>
<section xml:id="_producers_and_consumers">
<title>Producers and Consumers</title>
<simpara>The following image shows the general relationship of producers and consumers:</simpara>
<figure>
<title>Producers and Consumers</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/producers-consumers.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>producers consumers</phrase></textobject>
</mediaobject>
</figure>
<simpara>A producer is any component that sends messages to a channel.
The channel can be bound to an external message broker with a <literal>Binder</literal> implementation for that broker.
When invoking the <literal>bindProducer()</literal> method, the first parameter is the name of the destination within the broker, the second parameter is the local channel instance to which the producer sends messages, and the third parameter contains properties (such as a partition key expression) to be used within the adapter that is created for that channel.</simpara>
<simpara>A consumer is any component that receives messages from a channel.
As with a producer, the consumer&#8217;s channel can be bound to an external message broker.
When invoking the <literal>bindConsumer()</literal> method, the first parameter is the destination name, and a second parameter provides the name of a logical group of consumers.
Each group that is represented by consumer bindings for a given destination receives a copy of each message that a producer sends to that destination (that is, it follows normal publish-subscribe semantics).
If there are multiple consumer instances bound with the same group name, then messages are load-balanced across those consumer instances so that each message sent by a producer is consumed by only a single consumer instance within each group (that is, it follows normal queueing semantics).</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-binder-api">
<title>Binder SPI</title>
<simpara>The Binder SPI consists of a number of interfaces, out-of-the box utility classes, and discovery strategies that provide a pluggable mechanism for connecting to external middleware.</simpara>
<simpara>The key point of the SPI is the <literal>Binder</literal> interface, which is a strategy for connecting inputs and outputs to external middleware. The following listing shows the definnition of the <literal>Binder</literal> interface:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface Binder&lt;T, C extends ConsumerProperties, P extends ProducerProperties&gt; {
    Binding&lt;T&gt; bindConsumer(String name, String group, T inboundBindTarget, C consumerProperties);

    Binding&lt;T&gt; bindProducer(String name, T outboundBindTarget, P producerProperties);
}</programlisting>
<simpara>The interface is parameterized, offering a number of extension points:</simpara>
<itemizedlist>
<listitem>
<simpara>Input and output bind targets. As of version 1.0, only <literal>MessageChannel</literal> is supported, but this is intended to be used as an extension point in the future.</simpara>
</listitem>
<listitem>
<simpara>Extended consumer and producer properties, allowing specific Binder implementations to add supplemental properties that can be supported in a type-safe manner.</simpara>
</listitem>
</itemizedlist>
<simpara>A typical binder implementation consists of the following:</simpara>
<itemizedlist>
<listitem>
<simpara>A class that implements the <literal>Binder</literal> interface;</simpara>
</listitem>
<listitem>
<simpara>A Spring <literal>@Configuration</literal> class that creates a bean of type <literal>Binder</literal> along with the middleware connection infrastructure.</simpara>
</listitem>
<listitem>
<simpara>A <literal>META-INF/spring.binders</literal> file found on the classpath containing one or more binder definitions, as shown in the following example:</simpara>
<screen>kafka:\
org.springframework.cloud.stream.binder.kafka.config.KafkaBinderConfiguration</screen>
</listitem>
</itemizedlist>
</section>
<section xml:id="_binder_detection">
<title>Binder Detection</title>
<simpara>Spring Cloud Stream relies on implementations of the Binder SPI to perform the task of connecting channels to message brokers.
Each Binder implementation typically connects to one type of messaging system.</simpara>
<section xml:id="_classpath_detection">
<title>Classpath Detection</title>
<simpara>By default, Spring Cloud Stream relies on Spring Boot&#8217;s auto-configuration to configure the binding process.
If a single Binder implementation is found on the classpath, Spring Cloud Stream automatically uses it.
For example, a Spring Cloud Stream project that aims to bind only to RabbitMQ can add the following dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>For the specific Maven coordinates of other binder dependencies, see the documentation of that binder implementation.</simpara>
</section>
</section>
<section xml:id="multiple-binders">
<title>Multiple Binders on the Classpath</title>
<simpara>When multiple binders are present on the classpath, the application must indicate which binder is to be used for each channel binding.
Each binder configuration contains a <literal>META-INF/spring.binders</literal> file, which is a simple properties file, as shown in the following example:</simpara>
<screen>rabbit:\
org.springframework.cloud.stream.binder.rabbit.config.RabbitServiceAutoConfiguration</screen>
<simpara>Similar files exist for the other provided binder implementations (such as Kafka), and custom binder implementations are expected to provide them as well.
The key represents an identifying name for the binder implementation, whereas the value is a comma-separated list of configuration classes that each contain one and only one bean definition of type <literal>org.springframework.cloud.stream.binder.Binder</literal>.</simpara>
<simpara>Binder selection can either be performed globally, using the <literal>spring.cloud.stream.defaultBinder</literal> property (for example, <literal>spring.cloud.stream.defaultBinder=rabbit</literal>) or individually, by configuring the binder on each channel binding.
For instance, a processor application (that has channels named <literal>input</literal> and <literal>output</literal> for read and write respectively) that reads from Kafka and writes to RabbitMQ can specify the following configuration:</simpara>
<screen>spring.cloud.stream.bindings.input.binder=kafka
spring.cloud.stream.bindings.output.binder=rabbit</screen>
</section>
<section xml:id="multiple-systems">
<title>Connecting to Multiple Systems</title>
<simpara>By default, binders share the application&#8217;s Spring Boot auto-configuration, so that one instance of each binder found on the classpath is created.
If your application should connect to more than one broker of the same type, you can specify multiple binder configurations, each with different environment settings.</simpara>
<note>
<simpara>Turning on explicit binder configuration disables the default binder configuration process altogether.
If you do so, all binders in use must be included in the configuration.
Frameworks that intend to use Spring Cloud Stream transparently may create binder configurations that can be referenced by name, but they do not affect the default binder configuration.
In order to do so, a binder configuration may have its <literal>defaultCandidate</literal> flag set to false (for example, <literal>spring.cloud.stream.binders.&lt;configurationName&gt;.defaultCandidate=false</literal>).
This denotes a configuration that exists independently of the default binder configuration process.</simpara>
</note>
<simpara>The following example shows a typical configuration for a processor application that connects to two RabbitMQ broker instances:</simpara>
<programlisting language="yml" linenumbering="unnumbered">spring:
  cloud:
    stream:
      bindings:
        input:
          destination: thing1
          binder: rabbit1
        output:
          destination: thing2
          binder: rabbit2
      binders:
        rabbit1:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: &lt;host1&gt;
        rabbit2:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: &lt;host2&gt;</programlisting>
</section>
<section xml:id="_binding_visualization_and_control">
<title>Binding visualization and control</title>
<simpara>Since version 2.0, Spring Cloud Stream supports visualization and control of the Bindings through Actuator endpoints.</simpara>
<simpara>Starting with version 2.0 actuator and web are optional, you must first add one of the web dependencies as well as add the actuator dependency manually.
The following example shows how to add the dependency for the Web framework:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The following example shows how to add the dependency for the WebFlux framework:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
       &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>You can add the Actuator dependency as follows:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<note>
<simpara>To run Spring Cloud Stream 2.0 apps in Cloud Foundry, you must add <literal>spring-boot-starter-web</literal> and <literal>spring-boot-starter-actuator</literal> to the classpath. Otherwise, the
application will not start due to health check failures.</simpara>
</note>
<simpara>You must also enable the <literal>bindings</literal> actuator endpoints by setting the following property: <literal>--management.endpoints.web.exposure.include=bindings</literal>.</simpara>
<simpara>Once those prerequisites are satisfied. you should see the following in the logs when application start:</simpara>
<literallayout class="monospaced">: Mapped "{[/actuator/bindings/{name}],methods=[POST]. . .
: Mapped "{[/actuator/bindings],methods=[GET]. . .
: Mapped "{[/actuator/bindings/{name}],methods=[GET]. . .</literallayout>
<simpara>To visualize the current bindings, access the following URL:
<literal><link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings</link></literal></simpara>
<simpara>Alternative, to see a single binding, access one of the URLs similar to the following:
<literal><link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName</link></literal></simpara>
<simpara>You can also stop, start, pause, and resume individual bindings by posting to the same URL while providing a <literal>state</literal> argument as JSON, as shown in the following examples:</simpara>
<simpara>curl -d '{"state":"STOPPED"}' -H "Content-Type: application/json" -X POST <link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName</link>
curl -d '{"state":"STARTED"}' -H "Content-Type: application/json" -X POST <link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName</link>
curl -d '{"state":"PAUSED"}' -H "Content-Type: application/json" -X POST <link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName</link>
curl -d '{"state":"RESUMED"}' -H "Content-Type: application/json" -X POST <link xl:href="http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName">http://&lt;host&gt;:&lt;port&gt;/actuator/bindings/myBindingName</link></simpara>
<note>
<simpara><literal>PAUSED</literal> and <literal>RESUMED</literal> work only when the corresponding binder and its underlying technology supports it. Otherwise, you see the warning message in the logs.
Currently, only Kafka binder supports the <literal>PAUSED</literal> and <literal>RESUMED</literal> states.</simpara>
</note>
</section>
<section xml:id="_binder_configuration_properties">
<title>Binder Configuration Properties</title>
<simpara>The following properties are available when customizing binder configurations. These properties exposed via <literal>org.springframework.cloud.stream.config.BinderProperties</literal></simpara>
<simpara>They must be prefixed with <literal>spring.cloud.stream.binders.&lt;configurationName&gt;</literal>.</simpara>
<variablelist>
<varlistentry>
<term>type</term>
<listitem>
<simpara>The binder type.
It typically references one of the binders found on the classpath&#8201;&#8212;&#8201;in particular, a key in a <literal>META-INF/spring.binders</literal> file.</simpara>
<simpara>By default, it has the same value as the configuration name.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>inheritEnvironment</term>
<listitem>
<simpara>Whether the configuration inherits the environment of the application itself.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>environment</term>
<listitem>
<simpara>Root for a set of properties that can be used to customize the environment of the binder.
When this property is set, the context in which the binder is being created is not a child of the application context.
This setting allows for complete separation between the binder components and the application components.</simpara>
<simpara>Default: <literal>empty</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>defaultCandidate</term>
<listitem>
<simpara>Whether the binder configuration is a candidate for being considered a default binder or can be used only when explicitly referenced.
This setting allows adding binder configurations without interfering with the default processing.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>
<chapter xml:id="_configuration_options">
<title>Configuration Options</title>
<simpara>Spring Cloud Stream supports general configuration options as well as configuration for bindings and binders.
Some binders let additional binding properties support middleware-specific features.</simpara>
<simpara>Configuration options can be provided to Spring Cloud Stream applications through any mechanism supported by Spring Boot.
This includes application arguments, environment variables, and YAML or .properties files.</simpara>
<section xml:id="_binding_service_properties">
<title>Binding Service Properties</title>
<simpara>These properties are exposed via <literal>org.springframework.cloud.stream.config.BindingServiceProperties</literal></simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.instanceCount</term>
<listitem>
<simpara>The number of deployed instances of an application.
Must be set for partitioning on the producer side. Must be set on the consumer side when using RabbitMQ and with Kafka if <literal>autoRebalanceEnabled=false</literal>.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.instanceIndex</term>
<listitem>
<simpara>The instance index of the application: A number from <literal>0</literal> to <literal>instanceCount - 1</literal>.
Used for partitioning with RabbitMQ and with Kafka if <literal>autoRebalanceEnabled=false</literal>.
Automatically set in Cloud Foundry to match the application&#8217;s instance index.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.dynamicDestinations</term>
<listitem>
<simpara>A list of destinations that can be bound dynamically (for example, in a dynamic routing scenario).
If set, only listed destinations can be bound.</simpara>
<simpara>Default: empty (letting any destination be bound).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.defaultBinder</term>
<listitem>
<simpara>The default binder to use, if multiple binders are configured.
See <link linkend="multiple-binders">Multiple Binders on the Classpath</link>.</simpara>
<simpara>Default: empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.overrideCloudConnectors</term>
<listitem>
<simpara>This property is only applicable when the <literal>cloud</literal> profile is active and Spring Cloud Connectors are provided with the application.
If the property is <literal>false</literal> (the default), the binder detects a suitable bound service (for example, a RabbitMQ service bound in Cloud Foundry for the RabbitMQ binder) and uses it for creating connections (usually through Spring Cloud Connectors).
When set to <literal>true</literal>, this property instructs binders to completely ignore the bound services and rely on Spring Boot properties (for example, relying on the <literal>spring.rabbitmq.*</literal> properties provided in the environment for the RabbitMQ binder).
The typical usage of this property is to be nested in a customized environment <link linkend="multiple-systems">when connecting to multiple systems</link>.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.bindingRetryInterval</term>
<listitem>
<simpara>The interval (in seconds) between retrying binding creation when, for example, the binder does not support late binding and the broker (for example, Apache Kafka) is down.
Set it to zero to treat such conditions as fatal, preventing the application from starting.</simpara>
<simpara>Default: <literal>30</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="binding-properties">
<title>Binding Properties</title>
<simpara>Binding properties are supplied by using the format of <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.&lt;property&gt;=&lt;value&gt;</literal>.
The <literal>&lt;channelName&gt;</literal> represents the name of the channel being configured (for example, <literal>output</literal> for a <literal>Source</literal>).</simpara>
<simpara>To avoid repetition, Spring Cloud Stream supports setting values for all channels, in the format of <literal>spring.cloud.stream.default.&lt;property&gt;=&lt;value&gt;</literal>.</simpara>
<simpara>In what follows, we indicate where we have omitted the <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.</literal> prefix and focus just on the property name, with the understanding that the prefix ise included at runtime.</simpara>
<section xml:id="_common_binding_properties">
<title>Common Binding Properties</title>
<simpara>These properties are exposed via <literal>org.springframework.cloud.stream.config.BindingProperties</literal></simpara>
<simpara>The following binding properties are available for both input and output bindings and must be prefixed with <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.</literal> (for example, <literal>spring.cloud.stream.bindings.input.destination=ticktock</literal>).</simpara>
<simpara>Default values can be set by using the <literal>spring.cloud.stream.default</literal> prefix (for example`spring.cloud.stream.default.contentType=application/json`).</simpara>
<variablelist>
<varlistentry>
<term>destination</term>
<listitem>
<simpara>The target destination of a channel on the bound middleware (for example, the RabbitMQ exchange or Kafka topic).
If the channel is bound as a consumer, it could be bound to multiple destinations, and the destination names can be specified as comma-separated <literal>String</literal> values.
If not set, the channel name is used instead.
The default value of this property cannot be overridden.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>group</term>
<listitem>
<simpara>The consumer group of the channel.
Applies only to inbound bindings.
See <link linkend="consumer-groups">Consumer Groups</link>.</simpara>
<simpara>Default: <literal>null</literal> (indicating an anonymous consumer).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>contentType</term>
<listitem>
<simpara>The content type of the channel.
See &#8220;<xref linkend="content-type-management"/>&#8221;.</simpara>
<simpara>Default: <literal>null</literal> (no type coercion is performed).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>binder</term>
<listitem>
<simpara>The binder used by this binding.
See &#8220;<xref linkend="multiple-binders"/>&#8221; for details.</simpara>
<simpara>Default: <literal>null</literal> (the default binder is used, if it exists).</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_consumer_properties">
<title>Consumer Properties</title>
<simpara>These properties are exposed via <literal>org.springframework.cloud.stream.binder.ConsumerProperties</literal></simpara>
<simpara>The following binding properties are available for input bindings only and must be prefixed with <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.consumer.</literal> (for example, <literal>spring.cloud.stream.bindings.input.consumer.concurrency=3</literal>).</simpara>
<simpara>Default values can be set by using the <literal>spring.cloud.stream.default.consumer</literal> prefix (for example, <literal>spring.cloud.stream.default.consumer.headerMode=none</literal>).</simpara>
<variablelist>
<varlistentry>
<term>concurrency</term>
<listitem>
<simpara>The concurrency of the inbound consumer.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>partitioned</term>
<listitem>
<simpara>Whether the consumer receives data from a partitioned producer.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>headerMode</term>
<listitem>
<simpara>When set to <literal>none</literal>, disables header parsing on input.
Effective only for messaging middleware that does not support message headers natively and requires header embedding.
This option is useful when consuming data from non-Spring Cloud Stream applications when native headers are not supported.
When set to <literal>headers</literal>, it uses the middleware&#8217;s native header mechanism.
When set to <literal>embeddedHeaders</literal>, it embeds headers into the message payload.</simpara>
<simpara>Default: depends on the binder implementation.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxAttempts</term>
<listitem>
<simpara>If processing fails, the number of attempts to process the message (including the first).
Set to <literal>1</literal> to disable retry.</simpara>
<simpara>Default: <literal>3</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffInitialInterval</term>
<listitem>
<simpara>The backoff initial interval on retry.</simpara>
<simpara>Default: <literal>1000</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffMaxInterval</term>
<listitem>
<simpara>The maximum backoff interval.</simpara>
<simpara>Default: <literal>10000</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>backOffMultiplier</term>
<listitem>
<simpara>The backoff multiplier.</simpara>
<simpara>Default: <literal>2.0</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>instanceIndex</term>
<listitem>
<simpara>When set to a value greater than equal to zero, it allows customizing the instance index of this consumer (if different from <literal>spring.cloud.stream.instanceIndex</literal>).
When set to a negative value, it defaults to <literal>spring.cloud.stream.instanceIndex</literal>.
See &#8220;<xref linkend="spring-cloud-stream-overview-instance-index-instance-count"/>&#8221; for more information.</simpara>
<simpara>Default: <literal>-1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>instanceCount</term>
<listitem>
<simpara>When set to a value greater than equal to zero, it allows customizing the instance count of this consumer (if different from <literal>spring.cloud.stream.instanceCount</literal>).
When set to a negative value, it defaults to <literal>spring.cloud.stream.instanceCount</literal>.
See &#8220;<xref linkend="spring-cloud-stream-overview-instance-index-instance-count"/>&#8221; for more information.</simpara>
<simpara>Default: <literal>-1</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_producer_properties">
<title>Producer Properties</title>
<simpara>These properties are exposed via <literal>org.springframework.cloud.stream.binder.ProducerProperties</literal></simpara>
<simpara>The following binding properties are available for output bindings only and must be prefixed with <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.producer.</literal> (for example, <literal>spring.cloud.stream.bindings.input.producer.partitionKeyExpression=payload.id</literal>).</simpara>
<simpara>Default values can be set by using the prefix <literal>spring.cloud.stream.default.producer</literal> (for example, <literal>spring.cloud.stream.default.producer.partitionKeyExpression=payload.id</literal>).</simpara>
<variablelist>
<varlistentry>
<term>partitionKeyExpression</term>
<listitem>
<simpara>A SpEL expression that determines how to partition outbound data.
If set, or if <literal>partitionKeyExtractorClass</literal> is set, outbound data on this channel is partitioned. <literal>partitionCount</literal> must be set to a value greater than 1 to be effective.
Mutually exclusive with <literal>partitionKeyExtractorClass</literal>.
See &#8220;<xref linkend="partitioning"/>&#8221;.</simpara>
<simpara>Default: null.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>partitionKeyExtractorClass</term>
<listitem>
<simpara>A <literal>PartitionKeyExtractorStrategy</literal> implementation.
If set, or if <literal>partitionKeyExpression</literal> is set, outbound data on this channel is partitioned. <literal>partitionCount</literal> must be set to a value greater than 1 to be effective.
Mutually exclusive with <literal>partitionKeyExpression</literal>.
See &#8220;<xref linkend="partitioning"/>&#8221;.</simpara>
<simpara>Default: <literal>null</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>partitionSelectorClass</term>
<listitem>
<simpara>  A <literal>PartitionSelectorStrategy</literal> implementation.
Mutually exclusive with <literal>partitionSelectorExpression</literal>.
If neither is set, the partition is selected as the <literal>hashCode(key) % partitionCount</literal>, where <literal>key</literal> is computed through either <literal>partitionKeyExpression</literal> or <literal>partitionKeyExtractorClass</literal>.</simpara>
<simpara>Default: <literal>null</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>partitionSelectorExpression</term>
<listitem>
<simpara>A SpEL expression for customizing partition selection.
Mutually exclusive with <literal>partitionSelectorClass</literal>.
If neither is set, the partition is selected as the <literal>hashCode(key) % partitionCount</literal>, where <literal>key</literal> is computed through either <literal>partitionKeyExpression</literal> or <literal>partitionKeyExtractorClass</literal>.</simpara>
<simpara>Default: <literal>null</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>partitionCount</term>
<listitem>
<simpara>The number of target partitions for the data, if partitioning is enabled.
Must be set to a value greater than 1 if the producer is partitioned.
On Kafka, it is interpreted as a hint. The larger of this and the partition count of the target topic is used instead.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>requiredGroups</term>
<listitem>
<simpara>A comma-separated list of groups to which the producer must ensure message delivery even if they start after it has been created (for example, by pre-creating durable queues in RabbitMQ).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>headerMode</term>
<listitem>
<simpara>When set to <literal>none</literal>, it disables header embedding on output.
It is effective only for messaging middleware that does not support message headers natively and requires header embedding.
This option is useful when producing data for non-Spring Cloud Stream applications when native headers are not supported.
When set to <literal>headers</literal>, it uses the middleware&#8217;s native header mechanism.
When set to <literal>embeddedHeaders</literal>, it embeds headers into the message payload.</simpara>
<simpara>Default: Depends on the binder implementation.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>useNativeEncoding</term>
<listitem>
<simpara>When set to <literal>true</literal>, the outbound message is serialized directly by client library, which must be configured correspondingly (for example, setting an appropriate Kafka producer value serializer).
When this configuration is being used, the outbound message marshalling is not based on the <literal>contentType</literal> of the binding.
When native encoding is used, it is the responsibility of the consumer to use an appropriate decoder (for example, the Kafka consumer value de-serializer) to deserialize the inbound message.
Also, when native encoding and decoding is used, the <literal>headerMode=embeddedHeaders</literal> property is ignored and headers are not embedded in the message.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>errorChannelEnabled</term>
<listitem>
<simpara>When set to <literal>true</literal>, if the binder supports asynchroous send results, send failures are sent to an error channel for the destination.
See &#8220;<xref linkend="binder-error-channels"/>&#8221; for more information.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="dynamicdestination">
<title>Using Dynamically Bound Destinations</title>
<simpara>Besides the channels defined by using <literal>@EnableBinding</literal>, Spring Cloud Stream lets applications send messages to dynamically bound destinations.
This is useful, for example, when the target destination needs to be determined at runtime.
Applications can do so by using the <literal>BinderAwareChannelResolver</literal> bean, registered automatically by the <literal>@EnableBinding</literal> annotation.</simpara>
<simpara>The 'spring.cloud.stream.dynamicDestinations' property can be used for restricting the dynamic destination names to a known set (whitelisting).
If this property is not set, any destination can be bound dynamically.</simpara>
<simpara>The <literal>BinderAwareChannelResolver</literal> can be used directly, as shown in the following example of a REST controller using a path variable to decide the target channel:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding
@Controller
public class SourceWithDynamicDestination {

    @Autowired
    private BinderAwareChannelResolver resolver;

    @RequestMapping(path = "/{target}", method = POST, consumes = "*/*")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public void handleRequest(@RequestBody String body, @PathVariable("target") target,
           @RequestHeader(HttpHeaders.CONTENT_TYPE) Object contentType) {
        sendMessage(body, target, contentType);
    }

    private void sendMessage(String body, String target, Object contentType) {
        resolver.resolveDestination(target).send(MessageBuilder.createMessage(body,
                new MessageHeaders(Collections.singletonMap(MessageHeaders.CONTENT_TYPE, contentType))));
    }
}</programlisting>
<simpara>Now consider what happens when we start the application on the default port (8080) and make the following requests with CURL:</simpara>
<screen>curl -H "Content-Type: application/json" -X POST -d "customer-1" http://localhost:8080/customers

curl -H "Content-Type: application/json" -X POST -d "order-1" http://localhost:8080/orders</screen>
<simpara>The destinations, 'customers' and 'orders', are created in the broker (in the exchange for Rabbit or in the topic for Kafka) with names of 'customers' and 'orders', and the data is published to the appropriate destinations.</simpara>
<simpara>The <literal>BinderAwareChannelResolver</literal> is a general-purpose Spring Integration <literal>DestinationResolver</literal> and can be injected in other components&#8201;&#8212;&#8201;for example, in a router using a SpEL expression based on the <literal>target</literal> field of an incoming JSON message. The following example includes a router that reads SpEL expressions:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding
@Controller
public class SourceWithDynamicDestination {

    @Autowired
    private BinderAwareChannelResolver resolver;


    @RequestMapping(path = "/", method = POST, consumes = "application/json")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public void handleRequest(@RequestBody String body, @RequestHeader(HttpHeaders.CONTENT_TYPE) Object contentType) {
        sendMessage(body, contentType);
    }

    private void sendMessage(Object body, Object contentType) {
        routerChannel().send(MessageBuilder.createMessage(body,
                new MessageHeaders(Collections.singletonMap(MessageHeaders.CONTENT_TYPE, contentType))));
    }

    @Bean(name = "routerChannel")
    public MessageChannel routerChannel() {
        return new DirectChannel();
    }

    @Bean
    @ServiceActivator(inputChannel = "routerChannel")
    public ExpressionEvaluatingRouter router() {
        ExpressionEvaluatingRouter router =
            new ExpressionEvaluatingRouter(new SpelExpressionParser().parseExpression("payload.target"));
        router.setDefaultOutputChannelName("default-output");
        router.setChannelResolver(resolver);
        return router;
    }
}</programlisting>
<simpara>The <link xl:href="https://github.com/spring-cloud-stream-app-starters/router">Router Sink Application</link> uses this technique to create the destinations on-demand.</simpara>
<simpara>If the channel names are known in advance, you can configure the producer properties as with any other destination.
Alternatively, if you register a <literal>NewBindingCallback&lt;&gt;</literal> bean, it is invoked just before the binding is created.
The callback takes the generic type of the extended producer properties used by the binder.
It has one method:</simpara>
<programlisting language="java" linenumbering="unnumbered">void configure(String channelName, MessageChannel channel, ProducerProperties producerProperties,
        T extendedProducerProperties);</programlisting>
<simpara>The following example shows how to use the RabbitMQ binder:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public NewBindingCallback&lt;RabbitProducerProperties&gt; dynamicConfigurer() {
    return (name, channel, props, extended) -&gt; {
        props.setRequiredGroups("bindThisQueue");
        extended.setQueueNameGroupOnly(true);
        extended.setAutoBindDlq(true);
        extended.setDeadLetterQueueName("myDLQ");
    };
}</programlisting>
<note>
<simpara>If you need to support dynamic destinations with multiple binder types, use <literal>Object</literal> for the generic type and cast the <literal>extended</literal> argument as needed.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="content-type-management">
<title>Content Type Negotiation</title>
<simpara>Data transformation is one of the core features of any message-driven microservice architecture. Given that, in Spring Cloud Stream, such data
is represented as a Spring <literal>Message</literal>, a message may have to be transformed to a desired shape or size before reaching its destination. This is required for two reasons:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>To convert the contents of the incoming message to match the signature of the application-provided handler.</simpara>
</listitem>
<listitem>
<simpara>To convert the contents of the outgoing message to the wire format.</simpara>
</listitem>
</orderedlist>
<simpara>The wire format is typically <literal>byte[]</literal> (that is true for the Kafka and Rabbit binders), but it is governed by the binder implementation.</simpara>
<simpara>In Spring Cloud Stream, message transformation is accomplished with an <literal>org.springframework.messaging.converter.MessageConverter</literal>.</simpara>
<note>
<simpara>As a supplement to the details to follow, you may also want to read the following <link xl:href="https://spring.io/blog/2018/02/26/spring-cloud-stream-2-0-content-type-negotiation-and-transformation">blog post</link>.</simpara>
</note>
<section xml:id="_mechanics">
<title>Mechanics</title>
<simpara>To better understand the mechanics and the necessity behind content-type negotiation, we take a look at a very simple use case by using the following message handler as an example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@StreamListener(Processor.INPUT)
@SendTo(Processor.OUTPUT)
public String handle(Person person) {..}</programlisting>
<note>
<simpara>For simplicity, we assume that this is the only handler in the application (we assume there is no internal pipeline).</simpara>
</note>
<simpara>The handler shown in the preceding example expects a <literal>Person</literal> object as an argument and produces a <literal>String</literal> type as an output.
In order for the framework to succeed in passing the incoming <literal>Message</literal> as an argument to this handler, it has to somehow transform the payload of the <literal>Message</literal> type from the wire format to a <literal>Person</literal> type.
In other words, the framework must locate and apply the appropriate <literal>MessageConverter</literal>.
To accomplish that, the framework needs some instructions from the user.
One of these instructions is already provided by the signature of the handler method itself (<literal>Person</literal> type).
Consequently, in theory, that should be (and, in some cases, is) enough.
However, for the majority of use cases, in order to select the appropriate <literal>MessageConverter</literal>, the framework needs an additional piece of information.
That missing piece is <literal>contentType</literal>.</simpara>
<simpara>Spring Cloud Stream provides three mechanisms to define <literal>contentType</literal> (in order of precedence):</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">HEADER</emphasis>: The <literal>contentType</literal> can be communicated through the Message itself. By providing a <literal>contentType</literal> header, you declare the content type to use to locate and apply the appropriate <literal>MessageConverter</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">BINDING</emphasis>: The <literal>contentType</literal> can be set per destination binding by setting the <literal>spring.cloud.stream.bindings.input.content-type</literal> property.</simpara>
<note>
<simpara>The <literal>input</literal> segment in the property name corresponds to the actual name of the destination (which is “input” in our case). This approach lets you declare, on a per-binding basis, the content type to use to locate and apply the appropriate <literal>MessageConverter</literal>.</simpara>
</note>
</listitem>
<listitem>
<simpara><emphasis role="strong">DEFAULT</emphasis>: If <literal>contentType</literal> is not present in the <literal>Message</literal> header or the binding, the default <literal>application/json</literal> content type is used to
locate and apply the appropriate <literal>MessageConverter</literal>.</simpara>
</listitem>
</orderedlist>
<simpara>As mentioned earlier, the preceding list also demonstrates the order of precedence in case of a tie. For example, a header-provided content type takes precedence over any other content type.
The same applies for a content type set on a per-binding basis, which essentially lets you override the default content type.
However, it also provides a sensible default (which was determined from community feedback).</simpara>
<simpara>Another reason for making <literal>application/json</literal> the default stems from the interoperability requirements driven by distributed microservices architectures, where producer and consumer not only run in different JVMs but can also run on different non-JVM platforms.</simpara>
<simpara>When the non-void handler method returns, if the the return value is already a <literal>Message</literal>, that <literal>Message</literal> becomes the payload. However, when the return value is not a <literal>Message</literal>, the new <literal>Message</literal> is constructed with the return value as the payload while inheriting
headers from the input <literal>Message</literal> minus the headers defined or filtered by <literal>SpringIntegrationProperties.messageHandlerNotPropagatedHeaders</literal>.
By default, there is only one header set there: <literal>contentType</literal>. This means that the new <literal>Message</literal> does not have <literal>contentType</literal> header set, thus ensuring that the <literal>contentType</literal> can evolve.
You can always opt out of returning a <literal>Message</literal> from the handler method where you can inject any header you wish.</simpara>
<simpara>If there is an internal pipeline, the <literal>Message</literal> is sent to the next handler by going through the same process of conversion. However, if there is no internal pipeline or you have reached the end of it, the <literal>Message</literal> is sent back to the output destination.</simpara>
<section xml:id="_content_type_versus_argument_type">
<title>Content Type versus Argument Type</title>
<simpara>As mentioned earlier, for the framework to select the appropriate <literal>MessageConverter</literal>, it requires argument type and, optionally, content type information.
The logic for selecting the appropriate <literal>MessageConverter</literal> resides with the argument resolvers (<literal>HandlerMethodArgumentResolvers</literal>), which trigger right before the invocation of the user-defined handler method (which is when the actual argument type is known to the framework).
If the argument type does not match the type of the current payload, the framework delegates to the stack of the
pre-configured <literal>MessageConverters</literal> to see if any one of them can convert the payload.
As you can see, the  <literal>Object fromMessage(Message&lt;?&gt; message, Class&lt;?&gt; targetClass);</literal>
operation of the MessageConverter takes <literal>targetClass</literal> as one of its arguments.
The framework also ensures that the provided <literal>Message</literal> always contains a <literal>contentType</literal> header.
When no contentType header was already present, it injects either the per-binding <literal>contentType</literal> header or the default <literal>contentType</literal> header.
The combination of <literal>contentType</literal> argument type is the mechanism by which framework determines if message can be converted to a target type.
If no appropriate <literal>MessageConverter</literal> is found, an exception is thrown, which you can handle by adding a custom <literal>MessageConverter</literal> (see &#8220;<xref linkend="spring-cloud-stream-overview-user-defined-message-converters"/>&#8221;).</simpara>
<simpara>But what if the payload type matches the target type declared by the handler method? In this case, there is nothing to convert, and the
payload is passed unmodified. While this sounds pretty straightforward and logical, keep in mind handler methods that take a <literal>Message&lt;?&gt;</literal> or <literal>Object</literal> as an argument.
By declaring the target type to be <literal>Object</literal> (which is an <literal>instanceof</literal> everything in Java), you essentially forfeit the conversion process.</simpara>
<simpara>NOTEDo not expect <literal>Message</literal> to be converted into some other type based only on the <literal>contentType</literal>.
Remember that the <literal>contentType</literal> is complementary to the target type.
If you wish, you can provide a hint, which <literal>MessageConverter</literal> may or may not take into consideration.</simpara>
</section>
<section xml:id="_message_converters">
<title>Message Converters</title>
<simpara><literal>MessageConverters</literal> define two methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">Object fromMessage(Message&lt;?&gt; message, Class&lt;?&gt; targetClass);

Message&lt;?&gt; toMessage(Object payload, @Nullable MessageHeaders headers);</programlisting>
<simpara>It is important to understand the contract of these methods and their usage, specifically in the context of Spring Cloud Stream.</simpara>
<simpara>The <literal>fromMessage</literal> method converts an incoming <literal>Message</literal> to an argument type.
The payload of the <literal>Message</literal> could be any type, and it is
up to the actual implementation of the <literal>MessageConverter</literal> to support multiple types.
For example, some JSON converter may support the payload type as <literal>byte[]</literal>, <literal>String</literal>, and others.
This is important when the application contains an internal pipeline (that is, input &#8594; handler1 &#8594; handler2 &#8594;. . . &#8594; output) and the output of the upstream handler results in a <literal>Message</literal> which may not be in the initial wire format.</simpara>
<simpara>However, the <literal>toMessage</literal> method has a more strict contract and must always convert <literal>Message</literal> to the wire format: <literal>byte[]</literal>.</simpara>
<simpara>So, for all intents and purposes (and especially when implementing your own converter) you regard the two methods as having the following signatures:</simpara>
<programlisting language="java" linenumbering="unnumbered">Object fromMessage(Message&lt;?&gt; message, Class&lt;?&gt; targetClass);

Message&lt;byte[]&gt; toMessage(Object payload, @Nullable MessageHeaders headers);</programlisting>
</section>
</section>
<section xml:id="_provided_messageconverters">
<title>Provided MessageConverters</title>
<simpara>As mentioned earlier, the framework already provides a stack of <literal>MessageConverters</literal> to handle most common use cases.
The following list describes the provided <literal>MessageConverters</literal>, in order of precedence (the first <literal>MessageConverter</literal> that works is used):</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>ApplicationJsonMessageMarshallingConverter</literal>: Variation of the <literal>org.springframework.messaging.converter.MappingJackson2MessageConverter</literal>. Supports conversion of the payload of the <literal>Message</literal> to/from POJO for cases when <literal>contentType</literal> is <literal>application/json</literal> (DEFAULT).</simpara>
</listitem>
<listitem>
<simpara><literal>TupleJsonMessageConverter</literal>: <emphasis role="strong">DEPRECATED</emphasis> Supports conversion of the payload of the <literal>Message</literal> to/from <literal>org.springframework.tuple.Tuple</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>ByteArrayMessageConverter</literal>: Supports conversion of the payload of the <literal>Message</literal> from <literal>byte[]</literal> to <literal>byte[]</literal> for cases when <literal>contentType</literal> is <literal>application/octet-stream</literal>. It is essentially a pass through and exists primarily for backward compatibility.</simpara>
</listitem>
<listitem>
<simpara><literal>ObjectStringMessageConverter</literal>: Supports conversion of any type to a <literal>String</literal> when <literal>contentType</literal> is <literal>text/plain</literal>.
It invokes Object’s <literal>toString()</literal> method or, if the payload is <literal>byte[]</literal>, a new <literal>String(byte[])</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>JavaSerializationMessageConverter</literal>: <emphasis role="strong">DEPRECATED</emphasis> Supports conversion based on java serialization when <literal>contentType</literal> is <literal>application/x-java-serialized-object</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>KryoMessageConverter</literal>: <emphasis role="strong">DEPRECATED</emphasis> Supports conversion based on Kryo serialization when <literal>contentType</literal> is <literal>application/x-java-object</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>JsonUnmarshallingConverter</literal>: Similar to the <literal>ApplicationJsonMessageMarshallingConverter</literal>. It supports conversion of any type when <literal>contentType</literal> is <literal>application/x-java-object</literal>.
It expects the actual type information to be embedded in the <literal>contentType</literal> as an attribute (for example, <literal>application/x-java-object;type=foo.bar.Cat</literal>).</simpara>
</listitem>
</orderedlist>
<simpara>When no appropriate converter is found, the framework throws an exception. When that happens, you should check your code and configuration and ensure you did not miss anything (that is, ensure that you provided a <literal>contentType</literal> by using a binding or a header).
However, most likely, you found some uncommon case (such as a custom <literal>contentType</literal> perhaps) and the current stack of provided <literal>MessageConverters</literal>
does not know how to convert. If that is the case, you can add custom <literal>MessageConverter</literal>. See <xref linkend="spring-cloud-stream-overview-user-defined-message-converters"/>.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-user-defined-message-converters">
<title>User-defined Message Converters</title>
<simpara>Spring Cloud Stream exposes a mechanism to define and register additional <literal>MessageConverters</literal>.
To use it, implement <literal>org.springframework.messaging.converter.MessageConverter</literal>, configure it as a <literal>@Bean</literal>, and annotate it with <literal>@StreamMessageConverter</literal>.
It is then apended to the existing stack of `MessageConverter`s.</simpara>
<note>
<simpara>It is important to understand that custom <literal>MessageConverter</literal> implementations are added to the head of the existing stack.
Consequently, custom <literal>MessageConverter</literal> implementations take precedence over the existing ones, which lets you override as well as add to the existing converters.</simpara>
</note>
<simpara>The following example shows how to create a message converter bean to support a new content type called <literal>application/bar</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
@SpringBootApplication
public static class SinkApplication {

    ...

    @Bean
    @StreamMessageConverter
    public MessageConverter customMessageConverter() {
        return new MyCustomMessageConverter();
    }
}

public class MyCustomMessageConverter extends AbstractMessageConverter {

    public MyCustomMessageConverter() {
        super(new MimeType("application", "bar"));
    }

    @Override
    protected boolean supports(Class&lt;?&gt; clazz) {
        return (Bar.class.equals(clazz));
    }

    @Override
    protected Object convertFromInternal(Message&lt;?&gt; message, Class&lt;?&gt; targetClass, Object conversionHint) {
        Object payload = message.getPayload();
        return (payload instanceof Bar ? payload : new Bar((byte[]) payload));
    }
}</programlisting>
<simpara>Spring Cloud Stream also provides support for Avro-based converters and schema evolution.
See &#8220;<xref linkend="schema-evolution"/>&#8221; for details.</simpara>
</section>
</chapter>
<chapter xml:id="schema-evolution">
<title>Schema Evolution Support</title>
<simpara>Spring Cloud Stream provides support for schema evolution so that the data can be evolved over time and still work with older or newer producers and consumers and vice versa.
Most serialization models, especially the ones that aim for portability across different platforms and languages, rely on a schema that describes how the data is serialized in the binary payload.
In order to serialize the data and then to interpret it, both the sending and receiving sides must have access to a schema that describes the binary format.
In certain cases, the schema can be inferred from the payload type on serialization or from the target type on deserialization.
However, many applications benefit from having access to an explicit schema that describes the binary data format.
A schema registry lets you store schema information in a textual format (typically JSON) and makes that information accessible to various applications that need it to receive and send data in binary format.
A schema is referenceable as a tuple consisting of:</simpara>
<itemizedlist>
<listitem>
<simpara>A subject that is the logical name of the schema</simpara>
</listitem>
<listitem>
<simpara>The schema version</simpara>
</listitem>
<listitem>
<simpara>The schema format, which describes the binary format of the data</simpara>
</listitem>
</itemizedlist>
<simpara>This following sections goes through the details of various components involved in schema evolution process.</simpara>
<section xml:id="_schema_registry_client">
<title>Schema Registry Client</title>
<simpara>The client-side abstraction for interacting with schema registry servers is the <literal>SchemaRegistryClient</literal> interface, which has the following structure:</simpara>
<programlisting language="java" linenumbering="unnumbered">public interface SchemaRegistryClient {

    SchemaRegistrationResponse register(String subject, String format, String schema);

    String fetch(SchemaReference schemaReference);

    String fetch(Integer id);

}</programlisting>
<simpara>Spring Cloud Stream provides out-of-the-box implementations for interacting with its own schema server and for interacting with the Confluent Schema Registry.</simpara>
<simpara>A client for the Spring Cloud Stream schema registry can be configured by using the <literal>@EnableSchemaRegistryClient</literal>, as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">  @EnableBinding(Sink.class)
  @SpringBootApplication
  @EnableSchemaRegistryClient
  public static class AvroSinkApplication {
    ...
  }</programlisting>
<note>
<simpara>The default converter is optimized to cache not only the schemas from the remote server but also the <literal>parse()</literal> and <literal>toString()</literal> methods, which are quite expensive.
Because of this, it uses a <literal>DefaultSchemaRegistryClient</literal> that does not cache responses.
If you intend to change the default behavior, you can use the client directly on your code and override it to the desired outcome.
To do so, you have to add the property <literal>spring.cloud.stream.schemaRegistryClient.cached=true</literal> to your application properties.</simpara>
</note>
<section xml:id="_schema_registry_client_properties">
<title>Schema Registry Client Properties</title>
<simpara>The Schema Registry Client supports the following properties:</simpara>
<variablelist>
<varlistentry>
<term><literal>spring.cloud.stream.schemaRegistryClient.endpoint</literal></term>
<listitem>
<simpara>The location of the schema-server.
When setting this, use a full URL, including protocol (<literal>http</literal> or <literal>https</literal>) , port, and context path.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Default</term>
<listitem>
<simpara><literal><link xl:href="http://localhost:8990/">http://localhost:8990/</link></literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>spring.cloud.stream.schemaRegistryClient.cached</literal></term>
<listitem>
<simpara>Whether the client should cache schema server responses.
Normally set to <literal>false</literal>, as the caching happens in the message converter.
Clients using the schema registry client should set this to <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Default</term>
<listitem>
<simpara><literal>true</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_avro_schema_registry_client_message_converters">
<title>Avro Schema Registry Client Message Converters</title>
<simpara>For applications that have a SchemaRegistryClient bean registered with the application context, Spring Cloud Stream auto configures an Apache Avro message converter for schema management.
This eases schema evolution, as applications that receive messages can get easy access to a writer schema that can be reconciled with their own reader schema.</simpara>
<simpara>For outbound messages, if the content type of the channel is set to <literal>application/*+avro</literal>, the <literal>MessageConverter</literal> is activated, as shown in the following example:</simpara>
<programlisting language="properties" linenumbering="unnumbered">spring.cloud.stream.bindings.output.contentType=application/*+avro</programlisting>
<simpara>During the outbound conversion, the message converter tries to infer the schema of each outbound messages (based on its type) and register it to a subject (based on the payload type) by using the <literal>SchemaRegistryClient</literal>.
If an identical schema is already found, then a reference to it is retrieved.
If not, the schema is registered, and a new version number is provided.
The message is sent with a <literal>contentType</literal> header by using the following scheme: <literal>application/[prefix].[subject].v[version]+avro</literal>, where <literal>prefix</literal> is configurable and <literal>subject</literal> is deduced from the payload type.</simpara>
<simpara>For example, a message of the type <literal>User</literal> might be sent as a binary payload with a content type of <literal>application/vnd.user.v2+avro</literal>, where <literal>user</literal> is the subject and <literal>2</literal> is the version number.</simpara>
<simpara>When receiving messages, the converter infers the schema reference from the header of the incoming message and tries to retrieve it. The schema is used as the writer schema in the deserialization process.</simpara>
<section xml:id="_avro_schema_registry_message_converter_properties">
<title>Avro Schema Registry Message Converter Properties</title>
<simpara>If you have enabled Avro based schema registry client by setting <literal>spring.cloud.stream.bindings.output.contentType=application/*+avro</literal>, you can customize the behavior of the registration by setting the following properties.</simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.schema.avro.dynamicSchemaGenerationEnabled</term>
<listitem>
<simpara>Enable if you want the converter to use reflection to infer a Schema from a POJO.</simpara>
<simpara>Default: <literal>false</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.schema.avro.readerSchema</term>
<listitem>
<simpara>Avro compares schema versions by looking at a writer schema (origin payload) and a reader schema (your application payload). See the <link xl:href="https://avro.apache.org/docs/1.7.6/spec.html">Avro documentation</link> for more information. If set, this overrides any lookups at the schema server and uses the local schema as the reader schema.
Default: <literal>null</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.schema.avro.schemaLocations</term>
<listitem>
<simpara>Registers any <literal>.avsc</literal> files listed in this property with the Schema Server.</simpara>
<simpara>Default: <literal>empty</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.schema.avro.prefix</term>
<listitem>
<simpara>The prefix to be used on the Content-Type header.</simpara>
<simpara>Default: <literal>vnd</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_apache_avro_message_converters">
<title>Apache Avro Message Converters</title>
<simpara>Spring Cloud Stream provides support for schema-based message converters through its <literal>spring-cloud-stream-schema</literal> module.
Currently, the only serialization format supported out of the box for schema-based message converters is Apache Avro, with more formats to be added in future versions.</simpara>
<simpara>The <literal>spring-cloud-stream-schema</literal> module contains two types of message converters that can be used for Apache Avro serialization:</simpara>
<itemizedlist>
<listitem>
<simpara>Converters that use the class information of the serialized or deserialized objects or a schema with a location known at startup.</simpara>
</listitem>
<listitem>
<simpara>Converters that use a schema registry. They locate the schemas at runtime and dynamically register new schemas as domain objects evolve.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_converters_with_schema_support">
<title>Converters with Schema Support</title>
<simpara>The <literal>AvroSchemaMessageConverter</literal> supports serializing and deserializing messages either by using a predefined schema or by using the schema information available in the class (either reflectively or contained in the <literal>SpecificRecord</literal>).
If you provide a custom converter, then the default AvroSchemaMessageConverter bean is not created. The following example shows a custom converter:</simpara>
<simpara>To use custom converters, you can simply add it to the application context, optionally specifying one or more <literal>MimeTypes</literal> with which to associate it.
The default <literal>MimeType</literal> is <literal>application/avro</literal>.</simpara>
<simpara>If the target type of the conversion is a <literal>GenericRecord</literal>, a schema must be set.</simpara>
<simpara>The following example shows how to configure a converter in a sink application by registering the Apache Avro <literal>MessageConverter</literal> without a predefined schema.
In this example, note that the mime type value is <literal>avro/bytes</literal>, not the default <literal>application/avro</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
@SpringBootApplication
public static class SinkApplication {

  ...

  @Bean
  public MessageConverter userMessageConverter() {
      return new AvroSchemaMessageConverter(MimeType.valueOf("avro/bytes"));
  }
}</programlisting>
<simpara>Conversely, the following application registers a converter with a predefined schema (found on the classpath):</simpara>
<programlisting language="java" linenumbering="unnumbered">@EnableBinding(Sink.class)
@SpringBootApplication
public static class SinkApplication {

  ...

  @Bean
  public MessageConverter userMessageConverter() {
      AvroSchemaMessageConverter converter = new AvroSchemaMessageConverter(MimeType.valueOf("avro/bytes"));
      converter.setSchemaLocation(new ClassPathResource("schemas/User.avro"));
      return converter;
  }
}</programlisting>
</section>
<section xml:id="_schema_registry_server">
<title>Schema Registry Server</title>
<simpara>Spring Cloud Stream provides a schema registry server implementation.
To use it, you can add the <literal>spring-cloud-stream-schema-server</literal> artifact to your project and use the <literal>@EnableSchemaRegistryServer</literal> annotation, which adds the schema registry server REST controller to your application.
This annotation is intended to be used with Spring Boot web applications, and the listening port of the server is controlled by the <literal>server.port</literal> property.
The <literal>spring.cloud.stream.schema.server.path</literal> property can be used to control the root path of the schema server (especially when it is embedded in other applications).
The <literal>spring.cloud.stream.schema.server.allowSchemaDeletion</literal> boolean property enables the deletion of a schema. By default, this is disabled.</simpara>
<simpara>The schema registry server uses a relational database to store the schemas.
By default, it uses an embedded database.
You can customize the schema storage by using the <link xl:href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-sql">Spring Boot SQL database and JDBC configuration options</link>.</simpara>
<simpara>The following example shows a Spring Boot application that enables the schema registry:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableSchemaRegistryServer
public class SchemaRegistryServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(SchemaRegistryServerApplication.class, args);
    }
}</programlisting>
<section xml:id="_schema_registry_server_api">
<title>Schema Registry Server API</title>
<simpara>The Schema Registry Server API consists of the following operations:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>POST /</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-registering-new-schema"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara>'GET /{subject}/{format}/{version}'&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-retrieve-schema-subject-format-version"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara><literal>GET /{subject}/{format}</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-retrieve-schema-subject-format"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara><literal>GET /schemas/{id}</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-retrieve-schema-id"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara><literal>DELETE /{subject}/{format}/{version}</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-deleting-schema-subject-format-version"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara><literal>DELETE /schemas/{id}</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-deleting-schema-id"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara><literal>DELETE /{subject}</literal>&#8201;&#8212;&#8201;see &#8220;<xref linkend="spring-cloud-stream-overview-deleting-schema-subject"/>&#8221;</simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-overview-registering-new-schema">
<title>Registering a New Schema</title>
<simpara>To register a new schema, send a <literal>POST</literal> request to the <literal>/</literal> endpoint.</simpara>
<simpara>The <literal>/</literal> accepts a JSON payload  with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>subject</literal>: The schema subject</simpara>
</listitem>
<listitem>
<simpara><literal>format</literal>: The schema format</simpara>
</listitem>
<listitem>
<simpara><literal>definition</literal>: The schema definition</simpara>
</listitem>
</itemizedlist>
<simpara>Its response is a schema object in JSON, with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal>: The schema ID</simpara>
</listitem>
<listitem>
<simpara><literal>subject</literal>: The schema subject</simpara>
</listitem>
<listitem>
<simpara><literal>format</literal>: The schema format</simpara>
</listitem>
<listitem>
<simpara><literal>version</literal>: The schema version</simpara>
</listitem>
<listitem>
<simpara><literal>definition</literal>: The schema definition</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-stream-overview-retrieve-schema-subject-format-version">
<title>Retrieving an Existing Schema by Subject, Format, and Version</title>
<simpara>To retrieve an existing schema by subject, format, and version, send <literal>GET</literal> request to the <literal>/{subject}/{format}/{version}</literal> endpoint.</simpara>
<simpara>Its response is a schema object in JSON, with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal>: The schema ID</simpara>
</listitem>
<listitem>
<simpara><literal>subject</literal>: The schema subject</simpara>
</listitem>
<listitem>
<simpara><literal>format</literal>: The schema format</simpara>
</listitem>
<listitem>
<simpara><literal>version</literal>: The schema version</simpara>
</listitem>
<listitem>
<simpara><literal>definition</literal>: The schema definition</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-stream-overview-retrieve-schema-subject-format">
<title>Retrieving an Existing Schema by Subject and Format</title>
<simpara>To retrieve an existing schema by subject and format, send a <literal>GET</literal> request to the <literal>/subject/format</literal> endpoint.</simpara>
<simpara>Its response is a list of schemas with each schema object in JSON, with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal>: The schema ID</simpara>
</listitem>
<listitem>
<simpara><literal>subject</literal>: The schema subject</simpara>
</listitem>
<listitem>
<simpara><literal>format</literal>: The schema format</simpara>
</listitem>
<listitem>
<simpara><literal>version</literal>: The schema version</simpara>
</listitem>
<listitem>
<simpara><literal>definition</literal>: The schema definition</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-stream-overview-retrieve-schema-id">
<title>Retrieving an Existing Schema by ID</title>
<simpara>To retrieve a schema by its ID, send a <literal>GET</literal> request to the <literal>/schemas/{id}</literal> endpoint.</simpara>
<simpara>Its response is a schema object in JSON, with the following fields:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal>: The schema ID</simpara>
</listitem>
<listitem>
<simpara><literal>subject</literal>: The schema subject</simpara>
</listitem>
<listitem>
<simpara><literal>format</literal>: The schema format</simpara>
</listitem>
<listitem>
<simpara><literal>version</literal>: The schema version</simpara>
</listitem>
<listitem>
<simpara><literal>definition</literal>: The schema definition</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-stream-overview-deleting-schema-subject-format-version">
<title>Deleting a Schema by Subject, Format, and Version</title>
<simpara>To delete a schema identified by its subject, format, and version, send a <literal>DELETE</literal> request to the <literal>/{subject}/{format}/{version}</literal> endpoint.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-deleting-schema-id">
<title>Deleting a Schema by ID</title>
<simpara>To delete a schema by its ID, send a <literal>DELETE</literal> request to the <literal>/schemas/{id}</literal> endpoint.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-deleting-schema-subject">
<title>Deleting a Schema by Subject</title>
<simpara><literal>DELETE /{subject}</literal></simpara>
<simpara>Delete existing schemas by their subject.</simpara>
<note>
<simpara>This note applies to users of Spring Cloud Stream 1.1.0.RELEASE only.
Spring Cloud Stream 1.1.0.RELEASE used the table name, <literal>schema</literal>, for storing <literal>Schema</literal> objects. <literal>Schema</literal> is a keyword in a number of database implementations.
To avoid any conflicts in the future, starting with 1.1.1.RELEASE, we have opted for the name <literal>SCHEMA_REPOSITORY</literal> for the storage table.
Any Spring Cloud Stream 1.1.0.RELEASE users who upgrade should migrate their existing schemas to the new table before upgrading.</simpara>
</note>
</section>
</section>
<section xml:id="_using_confluent_s_schema_registry">
<title>Using Confluent&#8217;s Schema Registry</title>
<simpara>The default configuration creates a <literal>DefaultSchemaRegistryClient</literal> bean.
If you want to use the Confluent schema registry, you need to create a bean of type <literal>ConfluentSchemaRegistryClient</literal>, which supersedes the one configured by default by the framework. The following example shows how to create such a bean:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public SchemaRegistryClient schemaRegistryClient(@Value("${spring.cloud.stream.schemaRegistryClient.endpoint}") String endpoint){
  ConfluentSchemaRegistryClient client = new ConfluentSchemaRegistryClient();
  client.setEndpoint(endpoint);
  return client;
}</programlisting>
<note>
<simpara>The ConfluentSchemaRegistryClient is tested against Confluent platform version 4.0.0.</simpara>
</note>
</section>
</section>
<section xml:id="_schema_registration_and_resolution">
<title>Schema Registration and Resolution</title>
<simpara>To better understand how Spring Cloud Stream registers and resolves new schemas and its use of Avro schema comparison features, we provide two separate subsections:</simpara>
<itemizedlist>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-schema-registration-process"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-schema-resolution-process"/>&#8221;</simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-overview-schema-registration-process">
<title>Schema Registration Process (Serialization)</title>
<simpara>The first part of the registration process is extracting a schema from the payload that is being sent over a channel.
Avro types such as <literal>SpecificRecord</literal> or <literal>GenericRecord</literal> already contain a schema, which can be retrieved immediately from the instance.
In the case of POJOs, a schema is inferred if the <literal>spring.cloud.stream.schema.avro.dynamicSchemaGenerationEnabled</literal> property is set to <literal>true</literal> (the default).</simpara>
<figure>
<title>Schema Writer Resolution Process</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/schema_resolution.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>schema resolution</phrase></textobject>
</mediaobject>
</figure>
<simpara>Ones a schema is obtained, the converter loads its metadata (version) from the remote server.
First, it queries a local cache. If no result is found, it submits the data to the server, which replies with versioning information.
The converter always caches the results to avoid the overhead of querying the Schema Server for every new message that needs to be serialized.</simpara>
<figure>
<title>Schema Registration Process</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/registration.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>registration</phrase></textobject>
</mediaobject>
</figure>
<simpara>With the schema version information, the converter sets the <literal>contentType</literal> header of the message to carry the version information&#8201;&#8212;&#8201;for example: <literal>application/vnd.user.v1+avro</literal>.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-schema-resolution-process">
<title>Schema Resolution Process (Deserialization)</title>
<simpara>When reading messages that contain version information (that is, a <literal>contentType</literal> header with a scheme like the one described under &#8220;<xref linkend="spring-cloud-stream-overview-schema-registration-process"/>&#8221;), the converter queries the Schema server to fetch the writer schema of the message.
Once it has found the correct schema of the incoming message, it retrieves the reader schema and, by using Avro&#8217;s schema resolution support, reads it into the reader definition (setting defaults and any missing properties).</simpara>
<figure>
<title>Schema Reading Resolution Process</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/schema_reading.png" contentwidth="800" width="75%" scalefit="1" align="center"/>
</imageobject>
<textobject><phrase>schema reading</phrase></textobject>
</mediaobject>
</figure>
<note>
<simpara>You should understand the difference between a writer schema (the application that wrote the message) and a reader schema (the receiving application).
We suggest taking a moment to read <link xl:href="https://avro.apache.org/docs/1.7.6/spec.html">the Avro terminology</link> and understand the process.
Spring Cloud Stream always fetches the writer schema to determine how to read a message.
If you want to get Avro&#8217;s schema evolution support working, you need to make sure that a <literal>readerSchema</literal> was properly set for your application.</simpara>
</note>
</section>
</section>
</chapter>
<chapter xml:id="_inter_application_communication">
<title>Inter-Application Communication</title>
<simpara>Spring Cloud Stream enables communication between applications. Inter-application communication is a complex issue spanning several concerns, as described in the following topics:</simpara>
<itemizedlist>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-connecting-multiple-application-instances"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-instance-index-instance-count"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-partitioning"/>&#8221;</simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-overview-connecting-multiple-application-instances">
<title>Connecting Multiple Application Instances</title>
<simpara>While Spring Cloud Stream makes it easy for individual Spring Boot applications to connect to messaging systems, the typical scenario for Spring Cloud Stream is the creation of multi-application pipelines, where microservice applications send data to each other.
You can achieve this scenario by correlating the input and output destinations of &#8220;adjacent&#8221; applications.</simpara>
<simpara>Suppose a design calls for the Time Source application to send data to the Log Sink application. You could use a common destination named <literal>ticktock</literal> for bindings within both applications.</simpara>
<simpara>Time Source (that has the channel name <literal>output</literal>) would set the following property:</simpara>
<screen>spring.cloud.stream.bindings.output.destination=ticktock</screen>
<simpara>Log Sink (that has the channel name <literal>input</literal>) would set the following property:</simpara>
<screen>spring.cloud.stream.bindings.input.destination=ticktock</screen>
</section>
<section xml:id="spring-cloud-stream-overview-instance-index-instance-count">
<title>Instance Index and Instance Count</title>
<simpara>When scaling up Spring Cloud Stream applications, each instance can receive information about how many other instances of the same application exist and what its own instance index is.
Spring Cloud Stream does this through the <literal>spring.cloud.stream.instanceCount</literal> and <literal>spring.cloud.stream.instanceIndex</literal> properties.
For example, if there are three instances of a HDFS sink application, all three instances have <literal>spring.cloud.stream.instanceCount</literal> set to <literal>3</literal>, and the individual applications have <literal>spring.cloud.stream.instanceIndex</literal> set to <literal>0</literal>, <literal>1</literal>, and <literal>2</literal>, respectively.</simpara>
<simpara>When Spring Cloud Stream applications are deployed through Spring Cloud Data Flow, these properties are configured automatically; when Spring Cloud Stream applications are launched independently, these properties must be set correctly.
By default, <literal>spring.cloud.stream.instanceCount</literal> is <literal>1</literal>, and <literal>spring.cloud.stream.instanceIndex</literal> is <literal>0</literal>.</simpara>
<simpara>In a scaled-up scenario, correct configuration of these two properties is important for addressing partitioning behavior (see below) in general, and the two properties are always required by certain binders (for example, the Kafka binder) in order to ensure that data are split correctly across multiple consumer instances.</simpara>
</section>
<section xml:id="spring-cloud-stream-overview-partitioning">
<title>Partitioning</title>
<simpara>Partitioning in Spring Cloud Stream consists of two tasks:</simpara>
<itemizedlist>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-configuring-output-bindings-partitioning"/>&#8221;</simpara>
</listitem>
<listitem>
<simpara>&#8220;<xref linkend="spring-cloud-stream-overview-configuring-input-bindings-partitioning"/>&#8221;</simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-stream-overview-configuring-output-bindings-partitioning">
<title>Configuring Output Bindings for Partitioning</title>
<simpara>You can configure an output binding to send partitioned data by setting one and only one of its <literal>partitionKeyExpression</literal> or <literal>partitionKeyExtractorName</literal> properties, as well as its <literal>partitionCount</literal> property.</simpara>
<simpara>For example, the following is a valid and typical configuration:</simpara>
<screen>spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload.id
spring.cloud.stream.bindings.output.producer.partitionCount=5</screen>
<simpara>Based on that example configuration, data is sent to the target partition by using the following logic.</simpara>
<simpara>A partition key&#8217;s value is calculated for each message sent to a partitioned output channel based on the <literal>partitionKeyExpression</literal>.
The <literal>partitionKeyExpression</literal> is a SpEL expression that is evaluated against the outbound message for extracting the partitioning key.</simpara>
<simpara>If a SpEL expression is not sufficient for your needs, you can instead calculate the partition key value by providing an implementation of <literal>org.springframework.cloud.stream.binder.PartitionKeyExtractorStrategy</literal> and configuring it as a bean (by using the <literal>@Bean</literal> annotation).
If you have more then one bean of type <literal>org.springframework.cloud.stream.binder.PartitionKeyExtractorStrategy</literal> available in the Application Context, you can further filter it by specifying its name with the <literal>partitionKeyExtractorName</literal> property, as shown in the following example:</simpara>
<screen>--spring.cloud.stream.bindings.output.producer.partitionKeyExtractorName=customPartitionKeyExtractor
--spring.cloud.stream.bindings.output.producer.partitionCount=5
. . .
@Bean
public CustomPartitionKeyExtractorClass customPartitionKeyExtractor() {
    return new CustomPartitionKeyExtractorClass();
}</screen>
<note>
<simpara>In previous versions of Spring Cloud Stream, you could specify the implementation of <literal>org.springframework.cloud.stream.binder.PartitionKeyExtractorStrategy</literal> by setting the  <literal>spring.cloud.stream.bindings.output.producer.partitionKeyExtractorClass</literal> property.
Since version 2.0, this property is deprecated, and support for it will be removed in a future version.</simpara>
</note>
<simpara>Once the message key is calculated, the partition selection process determines the target partition as a value between <literal>0</literal> and <literal>partitionCount - 1</literal>.
The default calculation, applicable in most scenarios, is based on the following formula: <literal>key.hashCode() % partitionCount</literal>.
This can be customized on the binding, either by setting a SpEL expression to be evaluated against the 'key' (through the <literal>partitionSelectorExpression</literal> property) or by configuring an implementation of <literal>org.springframework.cloud.stream.binder.PartitionSelectorStrategy</literal> as a bean (by using the @Bean annotation).
Similar to the <literal>PartitionKeyExtractorStrategy</literal>, you can further filter it by using the <literal>spring.cloud.stream.bindings.output.producer.partitionSelectorName</literal> property when more than one bean of this type is available in the Application Context, as shown in the following example:</simpara>
<screen>--spring.cloud.stream.bindings.output.producer.partitionSelectorName=customPartitionSelector
. . .
@Bean
public CustomPartitionSelectorClass customPartitionSelector() {
    return new CustomPartitionSelectorClass();
}</screen>
<note>
<simpara>In previous versions of Spring Cloud Stream you could specify the implementation of <literal>org.springframework.cloud.stream.binder.PartitionSelectorStrategy</literal> by setting the <literal>spring.cloud.stream.bindings.output.producer.partitionSelectorClass</literal> property.
Since version 2.0, this property is deprecated and support for it will be removed in a future version.</simpara>
</note>
</section>
<section xml:id="spring-cloud-stream-overview-configuring-input-bindings-partitioning">
<title>Configuring Input Bindings for Partitioning</title>
<simpara>An input binding (with the channel name <literal>input</literal>) is configured to receive partitioned data by setting its <literal>partitioned</literal> property, as well as the <literal>instanceIndex</literal> and <literal>instanceCount</literal> properties on the application itself, as shown in the following example:</simpara>
<screen>spring.cloud.stream.bindings.input.consumer.partitioned=true
spring.cloud.stream.instanceIndex=3
spring.cloud.stream.instanceCount=5</screen>
<simpara>The <literal>instanceCount</literal> value represents the total number of application instances between which the data should be partitioned.
The <literal>instanceIndex</literal> must be a unique value across the multiple instances, with a value between <literal>0</literal> and <literal>instanceCount - 1</literal>.
The instance index helps each application instance to identify the unique partition(s) from which it receives data.
It is required by binders using technology that does not support partitioning natively.
For example, with RabbitMQ, there is a queue for each partition, with the queue name containing the instance index.
With Kafka, if <literal>autoRebalanceEnabled</literal> is <literal>true</literal> (default), Kafka takes care of distributing partitions across instances, and these properties are not required.
If <literal>autoRebalanceEnabled</literal> is set to false, the <literal>instanceCount</literal> and <literal>instanceIndex</literal> are used by the binder to determine which partition(s) the instance subscribes to (you must have at least as many partitions as there are instances).
The binder allocates the partitions instead of Kafka.
This might be useful if you want messages for a particular partition to always go to the same instance.
When a binder configuration requires them, it is important to set both values correctly in order to ensure that all of the data is consumed and that the application instances receive mutually exclusive datasets.</simpara>
<simpara>While a scenario in which using multiple instances for partitioned data processing may be complex to set up in a standalone case, Spring Cloud Dataflow can simplify the process significantly by populating both the input and output values correctly and by letting you rely on the runtime infrastructure to provide information about the instance index and instance count.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_testing">
<title>Testing</title>
<simpara>Spring Cloud Stream provides support for testing your microservice applications without connecting to a messaging system.
You can do that by using the <literal>TestSupportBinder</literal> provided by the <literal>spring-cloud-stream-test-support</literal> library, which can be added as a test dependency to the application, as shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;dependency&gt;
       &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
       &lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;
       &lt;scope&gt;test&lt;/scope&gt;
   &lt;/dependency&gt;</programlisting>
<note>
<simpara>The <literal>TestSupportBinder</literal> uses the Spring Boot autoconfiguration mechanism to supersede the other binders found on the classpath.
Therefore, when adding a binder as a dependency, you must make sure that the <literal>test</literal> scope is being used.</simpara>
</note>
<simpara>The <literal>TestSupportBinder</literal> lets you interact with the bound channels and inspect any messages sent and received by the application.</simpara>
<simpara>For outbound message channels, the <literal>TestSupportBinder</literal> registers a single subscriber and retains the messages emitted by the application in a <literal>MessageCollector</literal>.
They can be retrieved during tests and have assertions made against them.</simpara>
<simpara>You can also send messages to inbound message channels so that the consumer application can consume the messages.
The following example shows how to test both input and output channels on a processor:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment= SpringBootTest.WebEnvironment.RANDOM_PORT)
public class ExampleTest {

  @Autowired
  private Processor processor;

  @Autowired
  private MessageCollector messageCollector;

  @Test
  @SuppressWarnings("unchecked")
  public void testWiring() {
    Message&lt;String&gt; message = new GenericMessage&lt;&gt;("hello");
    processor.input().send(message);
    Message&lt;String&gt; received = (Message&lt;String&gt;) messageCollector.forChannel(processor.output()).poll();
    assertThat(received.getPayload(), equalTo("hello world"));
  }


  @SpringBootApplication
  @EnableBinding(Processor.class)
  public static class MyProcessor {

    @Autowired
    private Processor channels;

    @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)
    public String transform(String in) {
      return in + " world";
    }
  }
}</programlisting>
<simpara>In the preceding example, we create an application that has an input channel and an output channel, both bound through the <literal>Processor</literal> interface.
The bound interface is injected into the test so that we can have access to both channels.
We send a message on the input channel, and we use the <literal>MessageCollector</literal> provided by Spring Cloud Stream&#8217;s test support to capture that the message has been sent to the output channel as a result.
Once we have received the message, we can validate that the component functions correctly.</simpara>
<section xml:id="_disabling_the_test_binder_autoconfiguration">
<title>Disabling the Test Binder Autoconfiguration</title>
<simpara>The intent behind the test binder superseding all the other binders on the classpath is to make it easy to test your applications without making changes to your production dependencies.
In some cases (for example, integration tests) it is useful to use the actual production binders instead, and that requires disabling the test binder autoconfiguration.
To do so, you can exclude the <literal>org.springframework.cloud.stream.test.binder.TestSupportBinderAutoConfiguration</literal> class by using one of the Spring Boot autoconfiguration exclusion mechanisms, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">    @SpringBootApplication(exclude = TestSupportBinderAutoConfiguration.class)
    @EnableBinding(Processor.class)
    public static class MyProcessor {

        @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)
        public String transform(String in) {
            return in + " world";
        }
    }</programlisting>
<simpara>When autoconfiguration is disabled, the test binder is available on the classpath, and its <literal>defaultCandidate</literal> property is set to <literal>false</literal> so that it does not interfere with the regular user configuration. It can be referenced under the name, <literal>test</literal>, as shown in the following example:</simpara>
<simpara><literal>spring.cloud.stream.defaultBinder=test</literal></simpara>
</section>
</chapter>
<chapter xml:id="_health_indicator_5">
<title>Health Indicator</title>
<simpara>Spring Cloud Stream provides a health indicator for binders.
It is registered under the name <literal>binders</literal> and can be enabled or disabled by setting the <literal>management.health.binders.enabled</literal> property.</simpara>
<simpara>By default <literal>management.health.binders.enabled</literal> is set to 	<literal>false</literal>.
Setting <literal>management.health.binders.enabled</literal> to <literal>true</literal> enables the health indicator, allowing you to access the <literal>/health</literal> endpoint to retrieve the binder health indicators.</simpara>
<simpara>Health indicators are binder-specific and certain binder implementations may not necessarily provide a health indicator.</simpara>
</chapter>
<chapter xml:id="spring-cloud-stream-overview-metrics-emitter">
<title>Metrics Emitter</title>
<simpara>Spring Boot Actuator provides dependency management and auto-configuration for <link xl:href="https://micrometer.io/">Micrometer</link>, an application metrics
facade that supports numerous <link xl:href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#production-ready-metrics">monitoring systems</link>.</simpara>
<simpara>Spring Cloud Stream provides support for emitting any available micrometer-based metrics to a binding destination, allowing for periodic
collection of metric data from stream applications without relying on polling individual endpoints.</simpara>
<simpara>Metrics Emitter is activated by defining the <literal>spring.cloud.stream.bindings.applicationMetrics.destination</literal> property,
which specifies the name of the binding destination used by the current binder to publish metric messages.</simpara>
<simpara>For example:</simpara>
<programlisting language="java" linenumbering="unnumbered">spring.cloud.stream.bindings.applicationMetrics.destination=myMetricDestination</programlisting>
<simpara>The preceding example instructs the binder to bind to <literal>myMetricDestination</literal> (that is, Rabbit exchange, Kafka topic, and others).</simpara>
<simpara>The following properties can be used for customizing the emission of metrics:</simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.metrics.key</term>
<listitem>
<simpara>The name of the metric being emitted. Should be a unique value per application.</simpara>
<simpara>Default: <literal>${spring.application.name:${vcap.application.name:${spring.config.name:application}}}</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.metrics.properties</term>
<listitem>
<simpara>Allows white listing application properties that are added to the metrics payload</simpara>
<simpara>Default: null.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.metrics.meter-filter</term>
<listitem>
<simpara>Pattern to control the 'meters' one wants to capture.
For example, specifying <literal>spring.integration.*</literal> captures metric information for meters whose name starts with <literal>spring.integration.</literal></simpara>
<simpara>Default: all 'meters' are captured.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.metrics.schedule-interval</term>
<listitem>
<simpara>Interval to control the rate of publishing metric data.</simpara>
<simpara>Default: 1 min</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Consider the following:</simpara>
<programlisting language="bash" linenumbering="unnumbered">java -jar time-source.jar \
    --spring.cloud.stream.bindings.applicationMetrics.destination=someMetrics \
    --spring.cloud.stream.metrics.properties=spring.application** \
    --spring.cloud.stream.metrics.meter-filter=spring.integration.*</programlisting>
<simpara>The following example shows data published to the binding destination as a result of the preceding command:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
	"name": "application",
	"createdTime": "2018-03-23T14:48:12.700Z",
	"properties": {
	},
	"metrics": [
		{
			"id": {
				"name": "spring.integration.send",
				"tags": [
					{
						"key": "exception",
						"value": "none"
					},
					{
						"key": "name",
						"value": "input"
					},
					{
						"key": "result",
						"value": "success"
					},
					{
						"key": "type",
						"value": "channel"
					}
				],
				"type": "TIMER",
				"description": "Send processing time",
				"baseUnit": "milliseconds"
			},
			"timestamp": "2018-03-23T14:48:12.697Z",
			"sum": 130.340546,
			"count": 6,
			"mean": 21.72342433333333,
			"upper": 116.176299,
			"total": 130.340546
		}
	]
}</programlisting>
</chapter>
<chapter xml:id="_samples">
<title>Samples</title>
<simpara>For Spring Cloud Stream samples, see the <link xl:href="https://github.com/spring-cloud/spring-cloud-stream-samples">spring-cloud-stream-samples</link> repository on GitHub.</simpara>
<section xml:id="_deploying_stream_applications_on_cloudfoundry">
<title>Deploying Stream Applications on CloudFoundry</title>
<simpara>On CloudFoundry, services are usually exposed through a special environment variable called <link xl:href="https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES">VCAP_SERVICES</link>.</simpara>
<simpara>When configuring your binder connections, you can use the values from an environment variable as explained on the <link xl:href="https://docs.spring.io/spring-cloud-dataflow-server-cloudfoundry/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started-ups">dataflow Cloud Foundry Server</link> docs.</simpara>
</section>
</chapter>
</part>
<part xml:id="_binder_implementations">
<title>Binder Implementations</title>
<chapter xml:id="_apache_kafka_binder">
<title>Apache Kafka Binder</title>

<section xml:id="_usage">
<title>Usage</title>
<simpara>To use Apache Kafka binder, you need to add <literal>spring-cloud-stream-binder-kafka</literal> as a dependency to your Spring Cloud Stream application, as shown in the following example for Maven:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-stream-binder-kafka&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>Alternatively, you can also use the Spring Cloud Stream Kafka Starter, as shown inn the following example for Maven:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-stream-kafka&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</section>
<section xml:id="_apache_kafka_binder_overview">
<title>Apache Kafka Binder Overview</title>
<simpara>The following image shows a simplified diagram of how the Apache Kafka binder operates:</simpara>
<figure>
<title>Kafka Binder</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/images/kafka-binder.png" contentwidth="300" width="50%" scalefit="1"/>
</imageobject>
<textobject><phrase>kafka binder</phrase></textobject>
</mediaobject>
</figure>
<simpara>The Apache Kafka Binder implementation maps each destination to an Apache Kafka topic.
The consumer group maps directly to the same Apache Kafka concept.
Partitioning also maps directly to Apache Kafka partitions as well.</simpara>
<simpara>The binder currently uses the Apache Kafka <literal>kafka-clients</literal> 1.0.0 jar and is designed to be used with a broker of at least that version.
This client can communicate with older brokers (see the Kafka documentation), but certain features may not be available.
For example, with versions earlier than 0.11.x.x, native headers are not supported.
Also, 0.11.x.x does not support the <literal>autoAddPartitions</literal> property.</simpara>
</section>
<section xml:id="_configuration_options_2">
<title>Configuration Options</title>
<simpara>This section contains the configuration options used by the Apache Kafka binder.</simpara>
<simpara>For common configuration options and properties pertaining to binder, see the <link linkend="binding-properties">core documentation</link>.</simpara>
<section xml:id="_kafka_binder_properties">
<title>Kafka Binder Properties</title>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.brokers</term>
<listitem>
<simpara>A list of brokers to which the Kafka binder connects.</simpara>
<simpara>Default: <literal>localhost</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.defaultBrokerPort</term>
<listitem>
<simpara><literal>brokers</literal> allows hosts specified with or without port information (for example, <literal>host1,host2:port2</literal>).
This sets the default port when no port is configured in the broker list.</simpara>
<simpara>Default: <literal>9092</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.configuration</term>
<listitem>
<simpara>Key/Value map of client properties (both producers and consumer) passed to all clients created by the binder.
Due to the fact that these properties are used by both producers and consumers, usage should be restricted to common properties&#8201;&#8212;&#8201;for example, security settings.</simpara>
<simpara>Default: Empty map.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.headers</term>
<listitem>
<simpara>The list of custom headers that are transported by the binder.
Only required when communicating with older applications (&#8656; 1.3.x) with a <literal>kafka-clients</literal> version &lt; 0.11.0.0. Newer versions support headers natively.</simpara>
<simpara>Default: empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.healthTimeout</term>
<listitem>
<simpara>The time to wait to get partition information, in seconds.
Health reports as down if this timer expires.</simpara>
<simpara>Default: 10.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.requiredAcks</term>
<listitem>
<simpara>The number of required acks on the broker.
See the Kafka documentation for the producer <literal>acks</literal> property.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.minPartitionCount</term>
<listitem>
<simpara>Effective only if <literal>autoCreateTopics</literal> or <literal>autoAddPartitions</literal> is set.
The global minimum number of partitions that the binder configures on topics on which it produces or consumes data.
It can be superseded by the <literal>partitionCount</literal> setting of the producer or by the value of <literal>instanceCount * concurrency</literal> settings of the producer (if either is larger).</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.replicationFactor</term>
<listitem>
<simpara>The replication factor of auto-created topics if <literal>autoCreateTopics</literal> is active.
Can be overridden on each binding.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.autoCreateTopics</term>
<listitem>
<simpara>If set to <literal>true</literal>, the binder creates new topics automatically.
If set to <literal>false</literal>, the binder relies on the topics being already configured.
In the latter case, if the topics do not exist, the binder fails to start.</simpara>
<note>
<simpara>This setting is independent of the <literal>auto.topic.create.enable</literal> setting of the broker and does not influence it.
If the server is set to auto-create topics, they may be created as part of the metadata retrieval request, with default broker settings.</simpara>
</note>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.autoAddPartitions</term>
<listitem>
<simpara>If set to <literal>true</literal>, the binder creates new partitions if required.
If set to <literal>false</literal>, the binder relies on the partition size of the topic being already configured.
If the partition count of the target topic is smaller than the expected value, the binder fails to start.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.transaction.transactionIdPrefix</term>
<listitem>
<simpara>Enables transactions in the binder. See <literal>transaction.id</literal> in the Kafka documentation and <link xl:href="https://docs.spring.io/spring-kafka/reference/html/_reference.html#transactions">Transactions</link> in the <literal>spring-kafka</literal> documentation.
When transactions are enabled, individual <literal>producer</literal> properties are ignored and all producers use the <literal>spring.cloud.stream.kafka.binder.transaction.producer.*</literal> properties.</simpara>
<simpara>Default <literal>null</literal> (no transactions)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.transaction.producer.*</term>
<listitem>
<simpara>Global producer properties for producers in a transactional binder.
See <literal>spring.cloud.stream.kafka.binder.transaction.transactionIdPrefix</literal> and <xref linkend="kafka-producer-properties"/> and the general producer properties supported by all binders.</simpara>
<simpara>Default: See individual producer properties.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.headerMapperBeanName</term>
<listitem>
<simpara>The bean name of a <literal>KafkaHeaderMapper</literal> used for mapping <literal>spring-messaging</literal> headers to and from Kafka headers.
Use this, for example, if you wish to customize the trusted packages in a <literal>DefaultKafkaHeaderMapper</literal> that uses JSON deserialization for the headers.</simpara>
<simpara>Default: none.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="kafka-consumer-properties">
<title>Kafka Consumer Properties</title>
<simpara>The following properties are available for Kafka consumers only and
must be prefixed with <literal>spring.cloud.stream.kafka.bindings.&lt;channelName&gt;.consumer.</literal>.</simpara>
<variablelist>
<varlistentry>
<term>admin.configuration</term>
<listitem>
<simpara>A <literal>Map</literal> of Kafka topic properties used when provisioning topics&#8201;&#8212;&#8201;for example, <literal>spring.cloud.stream.kafka.bindings.input.consumer.admin.configuration.message.format.version=0.9.0.0</literal></simpara>
<simpara>Default: none.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>admin.replicas-assignment</term>
<listitem>
<simpara>A Map&lt;Integer, List&lt;Integer&gt;&gt; of replica assignments, with the key being the partition and the value being the assignments.
Used when provisioning new topics.
See the <literal>NewTopic</literal> Javadocs in the <literal>kafka-clients</literal> jar.</simpara>
<simpara>Default: none.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>admin.replication-factor</term>
<listitem>
<simpara>The replication factor to use when provisioning topics. Overrides the binder-wide setting.
Ignored if <literal>replicas-assignments</literal> is present.</simpara>
<simpara>Default: none (the binder-wide default of 1 is used).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autoRebalanceEnabled</term>
<listitem>
<simpara>When <literal>true</literal>, topic partitions is automatically rebalanced between the members of a consumer group.
When <literal>false</literal>, each consumer is assigned a fixed set of partitions based on <literal>spring.cloud.stream.instanceCount</literal> and <literal>spring.cloud.stream.instanceIndex</literal>.
This requires both the <literal>spring.cloud.stream.instanceCount</literal> and <literal>spring.cloud.stream.instanceIndex</literal> properties to be set appropriately on each launched instance.
The value of the <literal>spring.cloud.stream.instanceCount</literal> property must typically be greater than 1 in this case.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ackEachRecord</term>
<listitem>
<simpara>When <literal>autoCommitOffset</literal> is <literal>true</literal>, this setting dictates whether to commit the offset after each record is processed.
By default, offsets are committed after all records in the batch of records returned by <literal>consumer.poll()</literal> have been processed.
The number of records returned by a poll can be controlled with the <literal>max.poll.records</literal> Kafka property, which is set through the consumer <literal>configuration</literal> property.
Setting this to <literal>true</literal> may cause a degradation in performance, but doing so reduces the likelihood of redelivered records when a failure occurs.
Also, see the binder <literal>requiredAcks</literal> property, which also affects the performance of committing offsets.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autoCommitOffset</term>
<listitem>
<simpara>Whether to autocommit offsets when a message has been processed.
If set to <literal>false</literal>, a header with the key <literal>kafka_acknowledgment</literal> of the type <literal>org.springframework.kafka.support.Acknowledgment</literal> header is present in the inbound message.
Applications may use this header for acknowledging messages.
See the examples section for details.
When this property is set to <literal>false</literal>, Kafka binder sets the ack mode to <literal>org.springframework.kafka.listener.AbstractMessageListenerContainer.AckMode.MANUAL</literal> and the application is responsible for acknowledging records.
Also see <literal>ackEachRecord</literal>.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autoCommitOnError</term>
<listitem>
<simpara>Effective only if <literal>autoCommitOffset</literal> is set to <literal>true</literal>.
If set to <literal>false</literal>, it suppresses auto-commits for messages that result in errors and commits only for successful messages. It allows a stream to automatically replay from the last successfully processed message, in case of persistent failures.
If set to <literal>true</literal>, it always auto-commits (if auto-commit is enabled).
If not set (the default), it effectively has the same value as <literal>enableDlq</literal>, auto-committing erroneous messages if they are sent to a DLQ and not committing them otherwise.</simpara>
<simpara>Default: not set.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>resetOffsets</term>
<listitem>
<simpara>Whether to reset offsets on the consumer to the value provided by startOffset.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>startOffset</term>
<listitem>
<simpara>The starting offset for new groups.
Allowed values: <literal>earliest</literal> and <literal>latest</literal>.
If the consumer group is set explicitly for the consumer 'binding' (through <literal>spring.cloud.stream.bindings.&lt;channelName&gt;.group</literal>), 'startOffset' is set to <literal>earliest</literal>. Otherwise, it is set to <literal>latest</literal> for the <literal>anonymous</literal> consumer group.
Also see <literal>resetOffsets</literal> (earlier in this list).</simpara>
<simpara>Default: null (equivalent to <literal>earliest</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>enableDlq</term>
<listitem>
<simpara>When set to true, it enables DLQ behavior for the consumer.
By default, messages that result in errors are forwarded to a topic named <literal>error.&lt;destination&gt;.&lt;group&gt;</literal>.
The DLQ topic name can be configurable by setting the <literal>dlqName</literal> property.
This provides an alternative option to the more common Kafka replay scenario for the case when the number of errors is relatively small and replaying the entire original topic may be too cumbersome.
See <xref linkend="kafka-dlq-processing"/> processing for more information.
Starting with version 2.0, messages sent to the DLQ topic are enhanced with the following headers: <literal>x-original-topic</literal>, <literal>x-exception-message</literal>, and <literal>x-exception-stacktrace</literal> as <literal>byte[]</literal>.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>configuration</term>
<listitem>
<simpara>Map with a key/value pair containing generic Kafka consumer properties.</simpara>
<simpara>Default: Empty map.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqName</term>
<listitem>
<simpara>The name of the DLQ topic to receive the error messages.</simpara>
<simpara>Default: null (If not specified, messages that result in errors are forwarded to a topic named <literal>error.&lt;destination&gt;.&lt;group&gt;</literal>).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqProducerProperties</term>
<listitem>
<simpara>Using this, DLQ-specific producer properties can be set.
All the properties available through kafka producer properties can be set through this property.</simpara>
<simpara>Default: Default Kafka producer properties.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>standardHeaders</term>
<listitem>
<simpara>Indicates which standard headers are populated by the inbound channel adapter.
Allowed values: <literal>none</literal>, <literal>id</literal>, <literal>timestamp</literal>, or <literal>both</literal>.
Useful if using native deserialization and the first component to receive a message needs an <literal>id</literal> (such as an aggregator that is configured to use a JDBC message store).</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>converterBeanName</term>
<listitem>
<simpara>The name of a bean that implements <literal>RecordMessageConverter</literal>. Used in the inbound channel adapter to replace the default <literal>MessagingMessageConverter</literal>.</simpara>
<simpara>Default: <literal>null</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>idleEventInterval</term>
<listitem>
<simpara>The interval, in milliseconds, between events indicating that no messages have recently been received.
Use an <literal>ApplicationListener&lt;ListenerContainerIdleEvent&gt;</literal> to receive these events.
See <xref linkend="pause-resume"/> for a usage example.</simpara>
<simpara>Default: <literal>30000</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="kafka-producer-properties">
<title>Kafka Producer Properties</title>
<simpara>The following properties are available for Kafka producers only and
must be prefixed with <literal>spring.cloud.stream.kafka.bindings.&lt;channelName&gt;.producer.</literal>.</simpara>
<variablelist>
<varlistentry>
<term>admin.configuration</term>
<listitem>
<simpara>A <literal>Map</literal> of Kafka topic properties used when provisioning new topics&#8201;&#8212;&#8201;for example, <literal>spring.cloud.stream.kafka.bindings.input.consumer.admin.configuration.message.format.version=0.9.0.0</literal></simpara>
<simpara>Default: none.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>admin.replicas-assignment</term>
<listitem>
<simpara>A Map&lt;Integer, List&lt;Integer&gt;&gt; of replica assignments, with the key being the partition and the value being the assignments.
Used when provisioning new topics.
See <literal>NewTopic</literal> javadocs in the <literal>kafka-clients</literal> jar.</simpara>
<simpara>Default: none.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>admin.replication-factor</term>
<listitem>
<simpara>The replication factor to use when provisioning new topics. Overrides the binder-wide setting.
Ignored if <literal>replicas-assignments</literal> is present.</simpara>
<simpara>Default: none (the binder-wide default of 1 is used).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bufferSize</term>
<listitem>
<simpara>Upper limit, in bytes, of how much data the Kafka producer attempts to batch before sending.</simpara>
<simpara>Default: <literal>16384</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>sync</term>
<listitem>
<simpara>Whether the producer is synchronous.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>batchTimeout</term>
<listitem>
<simpara>How long the producer waits to allow more messages to accumulate in the same batch before sending the messages.
(Normally, the producer does not wait at all and simply sends all the messages that accumulated while the previous send was in progress.) A non-zero value may increase throughput at the expense of latency.</simpara>
<simpara>Default: <literal>0</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>messageKeyExpression</term>
<listitem>
<simpara>A SpEL expression evaluated against the outgoing message used to populate the key of the produced Kafka message&#8201;&#8212;&#8201;for example, <literal>headers['myKey']</literal>.
The payload cannot be used because, by the time this expression is evaluated, the payload is already in the form of a <literal>byte[]</literal>.</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>headerPatterns</term>
<listitem>
<simpara>A comma-delimited list of simple patterns to match Spring messaging headers to be mapped to the Kafka <literal>Headers</literal> in the <literal>ProducerRecord</literal>.
Patterns can begin or end with the wildcard character (asterisk).
Patterns can be negated by prefixing with <literal>!</literal>.
Matching stops after the first match (positive or negative).
For example <literal>!ask,as*</literal> will pass <literal>ash</literal> but not <literal>ask</literal>.
<literal>id</literal> and <literal>timestamp</literal> are never mapped.</simpara>
<simpara>Default: <literal>*</literal> (all headers - except the <literal>id</literal> and <literal>timestamp</literal>)</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>configuration</term>
<listitem>
<simpara>Map with a key/value pair containing generic Kafka producer properties.</simpara>
<simpara>Default: Empty map.</simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<simpara>The Kafka binder uses the <literal>partitionCount</literal> setting of the producer as a hint to create a topic with the given partition count (in conjunction with the <literal>minPartitionCount</literal>, the maximum of the two being the value being used).
Exercise caution when configuring both <literal>minPartitionCount</literal> for a binder and <literal>partitionCount</literal> for an application, as the larger value is used.
If a topic already exists with a smaller partition count and <literal>autoAddPartitions</literal> is disabled (the default), the binder fails to start.
If a topic already exists with a smaller partition count and <literal>autoAddPartitions</literal> is enabled, new partitions are added.
If a topic already exists with a larger number of partitions than the maximum of (<literal>minPartitionCount</literal> or <literal>partitionCount</literal>), the existing partition count is used.</simpara>
</note>
</section>
<section xml:id="_usage_examples">
<title>Usage examples</title>
<simpara>In this section, we show the use of the preceding properties for specific scenarios.</simpara>
<section xml:id="_example_setting_literal_autocommitoffset_literal_to_literal_false_literal_and_relying_on_manual_acking">
<title>Example: Setting <literal>autoCommitOffset</literal> to <literal>false</literal> and Relying on Manual Acking</title>
<simpara>This example illustrates how one may manually acknowledge offsets in a consumer application.</simpara>
<simpara>This example requires that <literal>spring.cloud.stream.kafka.bindings.input.consumer.autoCommitOffset</literal> be set to <literal>false</literal>.
Use the corresponding input channel name for your example.</simpara>
<screen>@SpringBootApplication
@EnableBinding(Sink.class)
public class ManuallyAcknowdledgingConsumer {

 public static void main(String[] args) {
     SpringApplication.run(ManuallyAcknowdledgingConsumer.class, args);
 }

 @StreamListener(Sink.INPUT)
 public void process(Message&lt;?&gt; message) {
     Acknowledgment acknowledgment = message.getHeaders().get(KafkaHeaders.ACKNOWLEDGMENT, Acknowledgment.class);
     if (acknowledgment != null) {
         System.out.println("Acknowledgment provided");
         acknowledgment.acknowledge();
     }
 }
}</screen>
</section>
<section xml:id="_example_security_configuration">
<title>Example: Security Configuration</title>
<simpara>Apache Kafka 0.9 supports secure connections between client and brokers.
To take advantage of this feature, follow the guidelines in the <link xl:href="https://kafka.apache.org/090/documentation.html#security_configclients">Apache Kafka Documentation</link> as well as the Kafka 0.9 <link xl:href="https://docs.confluent.io/2.0.0/kafka/security.html">security guidelines from the Confluent documentation</link>.
Use the <literal>spring.cloud.stream.kafka.binder.configuration</literal> option to set security properties for all clients created by the binder.</simpara>
<simpara>For example, to set <literal>security.protocol</literal> to <literal>SASL_SSL</literal>, set the following property:</simpara>
<screen>spring.cloud.stream.kafka.binder.configuration.security.protocol=SASL_SSL</screen>
<simpara>All the other security properties can be set in a similar manner.</simpara>
<simpara>When using Kerberos, follow the instructions in the <link xl:href="https://kafka.apache.org/090/documentation.html#security_sasl_clientconfig">reference documentation</link> for creating and referencing the JAAS configuration.</simpara>
<simpara>Spring Cloud Stream supports passing JAAS configuration information to the application by using a JAAS configuration file and using Spring Boot properties.</simpara>
<section xml:id="_using_jaas_configuration_files">
<title>Using JAAS Configuration Files</title>
<simpara>The JAAS and (optionally) krb5 file locations can be set for Spring Cloud Stream applications by using system properties.
The following example shows how to launch a Spring Cloud Stream application with SASL and Kerberos by using a JAAS configuration file:</simpara>
<programlisting language="bash" linenumbering="unnumbered"> java -Djava.security.auth.login.config=/path.to/kafka_client_jaas.conf -jar log.jar \
   --spring.cloud.stream.kafka.binder.brokers=secure.server:9092 \
   --spring.cloud.stream.bindings.input.destination=stream.ticktock \
   --spring.cloud.stream.kafka.binder.configuration.security.protocol=SASL_PLAINTEXT</programlisting>
</section>
<section xml:id="_using_spring_boot_properties">
<title>Using Spring Boot Properties</title>
<simpara>As an alternative to having a JAAS configuration file, Spring Cloud Stream provides a mechanism for setting up the JAAS configuration for Spring Cloud Stream applications by using Spring Boot properties.</simpara>
<simpara>The following properties can be used to configure the login context of the Kafka client:</simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.jaas.loginModule</term>
<listitem>
<simpara>The login module name. Not necessary to be set in normal cases.</simpara>
<simpara>Default: <literal>com.sun.security.auth.module.Krb5LoginModule</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.jaas.controlFlag</term>
<listitem>
<simpara>The control flag of the login module.</simpara>
<simpara>Default: <literal>required</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.binder.jaas.options</term>
<listitem>
<simpara>Map with a key/value pair containing the login module options.</simpara>
<simpara>Default: Empty map.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following example shows how to launch a Spring Cloud Stream application with SASL and Kerberos by using Spring Boot configuration properties:</simpara>
<programlisting language="bash" linenumbering="unnumbered"> java --spring.cloud.stream.kafka.binder.brokers=secure.server:9092 \
   --spring.cloud.stream.bindings.input.destination=stream.ticktock \
   --spring.cloud.stream.kafka.binder.autoCreateTopics=false \
   --spring.cloud.stream.kafka.binder.configuration.security.protocol=SASL_PLAINTEXT \
   --spring.cloud.stream.kafka.binder.jaas.options.useKeyTab=true \
   --spring.cloud.stream.kafka.binder.jaas.options.storeKey=true \
   --spring.cloud.stream.kafka.binder.jaas.options.keyTab=/etc/security/keytabs/kafka_client.keytab \
   --spring.cloud.stream.kafka.binder.jaas.options.principal=kafka-client-1@EXAMPLE.COM</programlisting>
<simpara>The preceding example represents the equivalent of the following JAAS file:</simpara>
<screen>KafkaClient {
    com.sun.security.auth.module.Krb5LoginModule required
    useKeyTab=true
    storeKey=true
    keyTab="/etc/security/keytabs/kafka_client.keytab"
    principal="kafka-client-1@EXAMPLE.COM";
};</screen>
<simpara>If the topics required already exist on the broker or will be created by an administrator, autocreation can be turned off and only client JAAS properties need to be sent.</simpara>
<note>
<simpara>Do not mix JAAS configuration files and Spring Boot properties in the same application.
If the <literal>-Djava.security.auth.login.config</literal> system property is already present, Spring Cloud Stream ignores the Spring Boot properties.</simpara>
</note>
<note>
<simpara>Be careful when using the <literal>autoCreateTopics</literal> and <literal>autoAddPartitions</literal> with Kerberos.
Usually, applications may use principals that do not have administrative rights in Kafka and Zookeeper.
Consequently, relying on Spring Cloud Stream to create/modify topics may fail.
In secure environments, we strongly recommend creating topics and managing ACLs administratively by using Kafka tooling.</simpara>
</note>
</section>
</section>
<section xml:id="pause-resume">
<title>Example: Pausing and Resuming the Consumer</title>
<simpara>If you wish to suspend consumption but not cause a partition rebalance, you can pause and resume the consumer.
This is facilitated by adding the <literal>Consumer</literal> as a parameter to your <literal>@StreamListener</literal>.
To resume, you need an <literal>ApplicationListener</literal> for <literal>ListenerContainerIdleEvent</literal> instances.
The frequency at which events are published is controlled by the <literal>idleEventInterval</literal> property.
Since the consumer is not thread-safe, you must call these methods on the calling thread.</simpara>
<simpara>The following simple application shows how to pause and resume:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@StreamListener(Sink.INPUT)
	public void in(String in, @Header(KafkaHeaders.CONSUMER) Consumer&lt;?, ?&gt; consumer) {
		System.out.println(in);
		consumer.pause(Collections.singleton(new TopicPartition("myTopic", 0)));
	}

	@Bean
	public ApplicationListener&lt;ListenerContainerIdleEvent&gt; idleListener() {
		return event -&gt; {
			System.out.println(event);
			if (event.getConsumer().paused().size() &gt; 0) {
				event.getConsumer().resume(event.getConsumer().paused());
			}
		};
	}

}</programlisting>
</section>
</section>
</section>
<section xml:id="kafka-error-channels">
<title>Error Channels</title>
<simpara>Starting with version 1.3, the binder unconditionally sends exceptions to an error channel for each consumer destination and can also be configured to send async producer send failures to an error channel.
See <xref linkend="binder-error-channels"/> for more information.</simpara>
<simpara>The payload of the <literal>ErrorMessage</literal> for a send failure is a <literal>KafkaSendFailureException</literal> with properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>failedMessage</literal>: The Spring Messaging <literal>Message&lt;?&gt;</literal> that failed to be sent.</simpara>
</listitem>
<listitem>
<simpara><literal>record</literal>: The raw <literal>ProducerRecord</literal> that was created from the <literal>failedMessage</literal></simpara>
</listitem>
</itemizedlist>
<simpara>There is no automatic handling of producer exceptions (such as sending to a <link linkend="kafka-dlq-processing">Dead-Letter queue</link>).
You can consume these exceptions with your own Spring Integration flow.</simpara>
</section>
<section xml:id="kafka-metrics">
<title>Kafka Metrics</title>
<simpara>Kafka binder module exposes the following metrics:</simpara>
<simpara><literal>spring.cloud.stream.binder.kafka.someGroup.someTopic.lag</literal>: This metric indicates how many messages have not been yet consumed from a given binder&#8217;s topic by a given consumer group.
For example, if the value of the metric <literal>spring.cloud.stream.binder.kafka.myGroup.myTopic.lag</literal> is <literal>1000</literal>, the consumer group named <literal>myGroup</literal> has <literal>1000</literal> messages waiting to be consumed from the topic calle <literal>myTopic</literal>.
This metric is particularly useful for providing auto-scaling feedback to a PaaS platform.</simpara>
</section>
<section xml:id="kafka-dlq-processing">
<title>Dead-Letter Topic Processing</title>
<simpara>Because you cannot anticipate how users would want to dispose of dead-lettered messages, the framework does not provide any standard mechanism to handle them.
If the reason for the dead-lettering is transient, you may wish to route the messages back to the original topic.
However, if the problem is a permanent issue, that could cause an infinite loop.
The sample Spring Boot application within this topic is an example of how to route those messages back to the original topic, but it moves them to a &#8220;parking lot&#8221; topic after three attempts.
The application is another spring-cloud-stream application that reads from the dead-letter topic.
It terminates when no messages are received for 5 seconds.</simpara>
<simpara>The examples assume the original destination is <literal>so8400out</literal> and the consumer group is <literal>so8400</literal>.</simpara>
<simpara>There are a couple of strategies to consider:</simpara>
<itemizedlist>
<listitem>
<simpara>Consider running the rerouting only when the main application is not running.
Otherwise, the retries for transient errors are used up very quickly.</simpara>
</listitem>
<listitem>
<simpara>Alternatively, use a two-stage approach: Use this application to route to a third topic and another to route from there back to the main topic.</simpara>
</listitem>
</itemizedlist>
<simpara>The following code listings show the sample application:</simpara>
<formalpara>
<title>application.properties</title>
<para>
<screen>spring.cloud.stream.bindings.input.group=so8400replay
spring.cloud.stream.bindings.input.destination=error.so8400out.so8400

spring.cloud.stream.bindings.output.destination=so8400out
spring.cloud.stream.bindings.output.producer.partitioned=true

spring.cloud.stream.bindings.parkingLot.destination=so8400in.parkingLot
spring.cloud.stream.bindings.parkingLot.producer.partitioned=true

spring.cloud.stream.kafka.binder.configuration.auto.offset.reset=earliest

spring.cloud.stream.kafka.binder.headers=x-retries</screen>
</para>
</formalpara>
<formalpara>
<title>Application</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(TwoOutputProcessor.class)
public class ReRouteDlqKApplication implements CommandLineRunner {

    private static final String X_RETRIES_HEADER = "x-retries";

    public static void main(String[] args) {
        SpringApplication.run(ReRouteDlqKApplication.class, args).close();
    }

    private final AtomicInteger processed = new AtomicInteger();

    @Autowired
    private MessageChannel parkingLot;

    @StreamListener(Processor.INPUT)
    @SendTo(Processor.OUTPUT)
    public Message&lt;?&gt; reRoute(Message&lt;?&gt; failed) {
        processed.incrementAndGet();
        Integer retries = failed.getHeaders().get(X_RETRIES_HEADER, Integer.class);
        if (retries == null) {
            System.out.println("First retry for " + failed);
            return MessageBuilder.fromMessage(failed)
                    .setHeader(X_RETRIES_HEADER, new Integer(1))
                    .setHeader(BinderHeaders.PARTITION_OVERRIDE,
                            failed.getHeaders().get(KafkaHeaders.RECEIVED_PARTITION_ID))
                    .build();
        }
        else if (retries.intValue() &lt; 3) {
            System.out.println("Another retry for " + failed);
            return MessageBuilder.fromMessage(failed)
                    .setHeader(X_RETRIES_HEADER, new Integer(retries.intValue() + 1))
                    .setHeader(BinderHeaders.PARTITION_OVERRIDE,
                            failed.getHeaders().get(KafkaHeaders.RECEIVED_PARTITION_ID))
                    .build();
        }
        else {
            System.out.println("Retries exhausted for " + failed);
            parkingLot.send(MessageBuilder.fromMessage(failed)
                    .setHeader(BinderHeaders.PARTITION_OVERRIDE,
                            failed.getHeaders().get(KafkaHeaders.RECEIVED_PARTITION_ID))
                    .build());
        }
        return null;
    }

    @Override
    public void run(String... args) throws Exception {
        while (true) {
            int count = this.processed.get();
            Thread.sleep(5000);
            if (count == this.processed.get()) {
                System.out.println("Idle, terminating");
                return;
            }
        }
    }

    public interface TwoOutputProcessor extends Processor {

        @Output("parkingLot")
        MessageChannel parkingLot();

    }

}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_partitioning_with_the_kafka_binder">
<title>Partitioning with the Kafka Binder</title>
<simpara>Apache Kafka supports topic partitioning natively.</simpara>
<simpara>Sometimes it is advantageous to send data to specific partitions&#8201;&#8212;&#8201;for example, when you want to strictly order message processing (all messages for a particular customer should go to the same partition).</simpara>
<simpara>The following example shows how to configure the producer and consumer side:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Source.class)
public class KafkaPartitionProducerApplication {

    private static final Random RANDOM = new Random(System.currentTimeMillis());

    private static final String[] data = new String[] {
            "foo1", "bar1", "qux1",
            "foo2", "bar2", "qux2",
            "foo3", "bar3", "qux3",
            "foo4", "bar4", "qux4",
            };

    public static void main(String[] args) {
        new SpringApplicationBuilder(KafkaPartitionProducerApplication.class)
            .web(false)
            .run(args);
    }

    @InboundChannelAdapter(channel = Source.OUTPUT, poller = @Poller(fixedRate = "5000"))
    public Message&lt;?&gt; generate() {
        String value = data[RANDOM.nextInt(data.length)];
        System.out.println("Sending: " + value);
        return MessageBuilder.withPayload(value)
                .setHeader("partitionKey", value)
                .build();
    }

}</programlisting>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    stream:
      bindings:
        output:
          destination: partitioned.topic
          producer:
            partitioned: true
            partition-key-expression: headers['partitionKey']
            partition-count: 12</programlisting>
</para>
</formalpara>
<important>
<simpara>The topic must be provisioned to have enough partitions to achieve the desired concurrency for all consumer groups.
The above configuration supports up to 12 consumer instances (6 if their <literal>concurrency</literal> is 2, 4 if their concurrency is 3, and so on).
It is generally best to &#8220;over-provision&#8221; the partitions to allow for future increases in consumers or concurrency.</simpara>
</important>
<note>
<simpara>The preceding configuration uses the default partitioning (<literal>key.hashCode() % partitionCount</literal>).
This may or may not provide a suitably balanced algorithm, depending on the key values.
You can override this default by using the <literal>partitionSelectorExpression</literal> or <literal>partitionSelectorClass</literal> properties.</simpara>
</note>
<simpara>Since partitions are natively handled by Kafka, no special configuration is needed on the consumer side.
Kafka allocates partitions across the instances.</simpara>
<simpara>The following Spring Boot application listens to a Kafka stream and prints (to the console) the partition ID to which each message goes:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class KafkaPartitionConsumerApplication {

    public static void main(String[] args) {
        new SpringApplicationBuilder(KafkaPartitionConsumerApplication.class)
            .web(false)
            .run(args);
    }

    @StreamListener(Sink.INPUT)
    public void listen(@Payload String in, @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) {
        System.out.println(in + " received from partition " + partition);
    }

}</programlisting>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    stream:
      bindings:
        input:
          destination: partitioned.topic
          group: myGroup</programlisting>
</para>
</formalpara>
<simpara>You can add instances as needed.
Kafka rebalances the partition allocations.
If the instance count (or <literal>instance count * concurrency</literal>) exceeds the number of partitions, some consumers are idle.</simpara>
</section>
</chapter>
<chapter xml:id="_apache_kafka_streams_binder">
<title>Apache Kafka Streams Binder</title>
<section xml:id="_usage_2">
<title>Usage</title>
<simpara>For using the Kafka Streams binder, you just need to add it to your Spring Cloud Stream application, using the following
Maven coordinates:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-stream-binder-kafka-streams&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</section>
<section xml:id="_kafka_streams_binder_overview">
<title>Kafka Streams Binder Overview</title>
<simpara>Spring Cloud Stream&#8217;s Apache Kafka support also includes a binder implementation designed explicitly for Apache Kafka
Streams binding. With this native integration, a Spring Cloud Stream "processor" application can directly use the
<link xl:href="https://kafka.apache.org/documentation/streams/developer-guide">Apache Kafka Streams</link> APIs in the core business logic.</simpara>
<simpara>Kafka Streams binder implementation builds on the foundation provided by the <link xl:href="https://docs.spring.io/spring-kafka/reference/html/_reference.html#kafka-streams">Kafka Streams in Spring Kafka</link>
project.</simpara>
<simpara>As part of this native integration, the high-level <link xl:href="https://docs.confluent.io/current/streams/developer-guide/dsl-api.html">Streams DSL</link>
provided by the Kafka Streams API is available for use in the business logic, too.</simpara>
<simpara>An early version of the <link xl:href="https://docs.confluent.io/current/streams/developer-guide/processor-api.html">Processor API</link>
support is available as well.</simpara>
<simpara>As noted early-on, Kafka Streams support in Spring Cloud Stream strictly only available for use in the Processor model.
A model in which the messages read from an inbound topic, business processing can be applied, and the transformed messages
can be written to an outbound topic. It can also be used in Processor applications with a no-outbound destination.</simpara>
<section xml:id="_streams_dsl">
<title>Streams DSL</title>
<simpara>This application consumes data from a Kafka topic (e.g., <literal>words</literal>), computes word count for each unique word in a 5 seconds
time window, and the computed results are sent to a downstream topic (e.g., <literal>counts</literal>) for further processing.</simpara>
<screen>@SpringBootApplication
@EnableBinding(KStreamProcessor.class)
public class WordCountProcessorApplication {

	@StreamListener("input")
	@SendTo("output")
	public KStream&lt;?, WordCount&gt; process(KStream&lt;?, String&gt; input) {
		return input
                .flatMapValues(value -&gt; Arrays.asList(value.toLowerCase().split("\\W+")))
                .groupBy((key, value) -&gt; value)
                .windowedBy(TimeWindows.of(5000))
                .count(Materialized.as("WordCounts-multi"))
                .toStream()
                .map((key, value) -&gt; new KeyValue&lt;&gt;(null, new WordCount(key.key(), value, new Date(key.window().start()), new Date(key.window().end()))));
    }

	public static void main(String[] args) {
		SpringApplication.run(WordCountProcessorApplication.class, args);
	}</screen>
<simpara>Once built as a uber-jar (e.g., <literal>wordcount-processor.jar</literal>), you can run the above example like the following.</simpara>
<screen>java -jar wordcount-processor.jar  --spring.cloud.stream.bindings.input.destination=words --spring.cloud.stream.bindings.output.destination=counts</screen>
<simpara>This application will consume messages from the Kafka topic <literal>words</literal> and the computed results are published to an output
topic <literal>counts</literal>.</simpara>
<simpara>Spring Cloud Stream will ensure that the messages from both the incoming and outgoing topics are automatically bound as
KStream objects. As a developer, you can exclusively focus on the business aspects of the code, i.e. writing the logic
required in the processor. Setting up the Streams DSL specific configuration required by the Kafka Streams infrastructure
is automatically handled by the framework.</simpara>
</section>
</section>
<section xml:id="_configuration_options_3">
<title>Configuration Options</title>
<simpara>This section contains the configuration options used by the Kafka Streams binder.</simpara>
<simpara>For common configuration options and properties pertaining to binder, refer to the <link linkend="binding-properties">core documentation</link>.</simpara>
<section xml:id="_kafka_streams_properties">
<title>Kafka Streams Properties</title>
<simpara>The following properties are available at the binder level and must be prefixed with <literal>spring.cloud.stream.kafka.binder.</literal>
literal.</simpara>
<variablelist>
<varlistentry>
<term>configuration</term>
<listitem>
<simpara> Map with a key/value pair containing properties pertaining to Apache Kafka Streams API.
 This property must be prefixed with <literal>spring.cloud.stream.kafka.streams.binder.</literal>.
Following are some examples of using this property.</simpara>
</listitem>
</varlistentry>
</variablelist>
<screen>spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000</screen>
<simpara>For more information about all the properties that may go into streams configuration, see StreamsConfig JavaDocs in
Apache Kafka Streams docs.</simpara>
<variablelist>
<varlistentry>
<term>brokers</term>
<listitem>
<simpara>Broker URL</simpara>
<simpara>Default: <literal>localhost</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>zkNodes</term>
<listitem>
<simpara>Zookeeper URL</simpara>
<simpara>Default: <literal>localhost</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>serdeError</term>
<listitem>
<simpara>Deserialization error handler type.
Possible values are - <literal>logAndContinue</literal>, <literal>logAndFail</literal> or <literal>sendToDlq</literal></simpara>
<simpara>Default: <literal>logAndFail</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>applicationId</term>
<listitem>
<simpara>Application ID for all the stream configurations in the current application context.
You can override the application id for an individual <literal>StreamListener</literal> method using the <literal>group</literal> property on the binding.
You have to ensure that you are using the same group name for all input bindings in the case of multiple inputs on the same methods.</simpara>
<simpara>Default: <literal>default</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following properties are <emphasis>only</emphasis> available for Kafka Streams producers and must be prefixed with <literal>spring.cloud.stream.kafka.streams.bindings.&lt;binding name&gt;.producer.</literal>
literal.</simpara>
<variablelist>
<varlistentry>
<term>keySerde</term>
<listitem>
<simpara>key serde to use</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>valueSerde</term>
<listitem>
<simpara>value serde to use</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>useNativeEncoding</term>
<listitem>
<simpara>flag to enable native encoding</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>The following properties are <emphasis>only</emphasis> available for Kafka Streams consumers and must be prefixed with <literal>spring.cloud.stream.kafka.streams.bindings.&lt;binding name&gt;.consumer.</literal>
literal.</simpara>
<variablelist>
<varlistentry>
<term>keySerde</term>
<listitem>
<simpara>key serde to use</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>valueSerde</term>
<listitem>
<simpara>value serde to use</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>materializedAs</term>
<listitem>
<simpara>state store to materialize when using incoming KTable types</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>useNativeDecoding</term>
<listitem>
<simpara>flag to enable native decoding</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqName</term>
<listitem>
<simpara>DLQ topic name.</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_timewindow_properties">
<title>TimeWindow properties:</title>
<simpara>Windowing is an important concept in stream processing applications. Following properties are available to configure
time-window computations.</simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.kafka.streams.timeWindow.length</term>
<listitem>
<simpara>When this property is given, you can autowire a <literal>TimeWindows</literal> bean into the application.
The value is expressed in milliseconds.</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.kafka.streams.timeWindow.advanceBy</term>
<listitem>
<simpara>Value is given in milliseconds.</simpara>
<simpara>Default: <literal>none</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="_multiple_input_bindings">
<title>Multiple Input Bindings</title>
<simpara>For use cases that requires multiple incoming KStream objects or a combination of KStream and KTable objects, the Kafka
Streams binder provides multiple bindings support.</simpara>
<simpara>Let&#8217;s see it in action.</simpara>
<section xml:id="_multiple_input_bindings_as_a_sink">
<title>Multiple Input Bindings as a Sink</title>
<screen>@EnableBinding(KStreamKTableBinding.class)
.....
.....
@StreamListener
public void process(@Input("inputStream") KStream&lt;String, PlayEvent&gt; playEvents,
                    @Input("inputTable") KTable&lt;Long, Song&gt; songTable) {
                    ....
                    ....
}

interface KStreamKTableBinding {

    @Input("inputStream")
    KStream&lt;?, ?&gt; inputStream();

    @Input("inputTable")
    KTable&lt;?, ?&gt; inputTable();
}</screen>
<simpara>In the above example, the application is written as a sink, i.e. there are no output bindings and the application has to
decide concerning downstream processing. When you write applications in this style, you might want to send the information
downstream or store them in a state store (See below for Queryable State Stores).</simpara>
<simpara>In the case of incoming KTable, if you want to materialize the computations to a state store, you have to express it
through the following property.</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.inputTable.consumer.materializedAs: all-songs</screen>
</section>
<section xml:id="_multiple_input_bindings_as_a_processor">
<title>Multiple Input Bindings as a Processor</title>
<screen>@EnableBinding(KStreamKTableBinding.class)
....
....

@StreamListener
@SendTo("output")
public KStream&lt;String, Long&gt; process(@Input("input") KStream&lt;String, Long&gt; userClicksStream,
                                     @Input("inputTable") KTable&lt;String, String&gt; userRegionsTable) {
....
....
}

interface KStreamKTableBinding extends KafkaStreamsProcessor {

    @Input("inputX")
    KTable&lt;?, ?&gt; inputTable();
}</screen>
</section>
</section>
<section xml:id="_multiple_output_bindings_aka_branching">
<title>Multiple Output Bindings (aka Branching)</title>
<simpara>Kafka Streams allow outbound data to be split into multiple topics based on some predicates. The Kafka Streams binder provides
support for this feature without compromising the programming model exposed through <literal>StreamListener</literal> in the end user application.</simpara>
<simpara>You can write the application in the usual way as demonstrated above in the word count example. However, when using the
branching feature, you are required to do a few things. First, you need to make sure that your return type is <literal>KStream[]</literal>
instead of a regular <literal>KStream</literal>. Second, you need to use the <literal>SendTo</literal> annotation containing the output bindings in the order
(see example below). For each of these output bindings, you need to configure destination, content-type etc., complying with
the standard Spring Cloud Stream expectations.</simpara>
<simpara>Here is an example:</simpara>
<screen>@EnableBinding(KStreamProcessorWithBranches.class)
@EnableAutoConfiguration
public static class WordCountProcessorApplication {

    @Autowired
    private TimeWindows timeWindows;

    @StreamListener("input")
    @SendTo({"output1","output2","output3})
    public KStream&lt;?, WordCount&gt;[] process(KStream&lt;Object, String&gt; input) {

			Predicate&lt;Object, WordCount&gt; isEnglish = (k, v) -&gt; v.word.equals("english");
			Predicate&lt;Object, WordCount&gt; isFrench =  (k, v) -&gt; v.word.equals("french");
			Predicate&lt;Object, WordCount&gt; isSpanish = (k, v) -&gt; v.word.equals("spanish");

			return input
					.flatMapValues(value -&gt; Arrays.asList(value.toLowerCase().split("\\W+")))
					.groupBy((key, value) -&gt; value)
					.windowedBy(timeWindows)
					.count(Materialized.as("WordCounts-1"))
					.toStream()
					.map((key, value) -&gt; new KeyValue&lt;&gt;(null, new WordCount(key.key(), value, new Date(key.window().start()), new Date(key.window().end()))))
					.branch(isEnglish, isFrench, isSpanish);
    }

    interface KStreamProcessorWithBranches {

    		@Input("input")
    		KStream&lt;?, ?&gt; input();

    		@Output("output1")
    		KStream&lt;?, ?&gt; output1();

    		@Output("output2")
    		KStream&lt;?, ?&gt; output2();

    		@Output("output3")
    		KStream&lt;?, ?&gt; output3();
    	}
}</screen>
<simpara>Properties:</simpara>
<screen>spring.cloud.stream.bindings.output1.contentType: application/json
spring.cloud.stream.bindings.output2.contentType: application/json
spring.cloud.stream.bindings.output3.contentType: application/json
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms: 1000
spring.cloud.stream.kafka.streams.binder.configuration:
  default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
  default.value.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.bindings.output1:
  destination: foo
  producer:
    headerMode: raw
spring.cloud.stream.bindings.output2:
  destination: bar
  producer:
    headerMode: raw
spring.cloud.stream.bindings.output3:
  destination: fox
  producer:
    headerMode: raw
spring.cloud.stream.bindings.input:
  destination: words
  consumer:
    headerMode: raw</screen>
</section>
<section xml:id="_message_conversion">
<title>Message Conversion</title>
<simpara>Similar to message-channel based binder applications, the Kafka Streams binder adapts to the out-of-the-box content-type
conversions without any compromise.</simpara>
<simpara>It is typical for Kafka Streams operations to know the type of SerDe’s used to transform the key and value correctly.
Therefore, it may be more natural to rely on the SerDe facilities provided by the Apache Kafka Streams library itself at
the inbound and outbound conversions rather than using the content-type conversions offered by the framework.
On the other hand, you might be already familiar with the content-type conversion patterns provided by the framework, and
that, you&#8217;d like to continue using for inbound and outbound conversions.</simpara>
<simpara>Both the options are supported in the Kafka Streams binder implementation.</simpara>
<section xml:id="_outbound_serialization">
<title>Outbound serialization</title>
<simpara>If native encoding is disabled (which is the default), then the framework will convert the message using the contentType
set by the user (otherwise, the default <literal>application/json</literal> will be applied). It will ignore any SerDe set on the outbound
in this case for outbound serialization.</simpara>
<simpara>Here is the property to set the contentType on the outbound.</simpara>
<screen>spring.cloud.stream.bindings.output.contentType: application/json</screen>
<simpara>Here is the property to enable native encoding.</simpara>
<screen>spring.cloud.stream.bindings.output.nativeEncoding: true</screen>
<simpara>If native encoding is enabled on the output binding (user has to enable it as above explicitly), then the framework will
skip any form of automatic message conversion on the outbound. In that case, it will switch to the Serde set by the user.
The <literal>valueSerde</literal> property set on the actual output binding will be used. Here is an example.</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.output.producer.valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde</screen>
<simpara>If this property is not set, then it will use the "default" SerDe: <literal>spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde</literal>.</simpara>
<simpara>It is worth to mention that Kafka Streams binder does not serialize the keys on outbound - it simply relies on Kafka itself.
Therefore, you either have to specify the <literal>keySerde</literal> property on the binding or it will default to the application-wide common
<literal>keySerde</literal>.</simpara>
<simpara>Binding level key serde:</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.output.producer.keySerde</screen>
<simpara>Common Key serde:</simpara>
<screen>spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde</screen>
<simpara>If branching is used, then you need to use multiple output bindings. For example,</simpara>
<screen>interface KStreamProcessorWithBranches {

    		@Input("input")
    		KStream&lt;?, ?&gt; input();

    		@Output("output1")
    		KStream&lt;?, ?&gt; output1();

    		@Output("output2")
    		KStream&lt;?, ?&gt; output2();

    		@Output("output3")
    		KStream&lt;?, ?&gt; output3();
    	}</screen>
<simpara>If <literal>nativeEncoding</literal> is set, then you can set different SerDe&#8217;s on individual output bindings as below.</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.output1.producer.valueSerde=IntegerSerde
spring.cloud.stream.kafka.streams.bindings.output2.producer.valueSerde=StringSerde
spring.cloud.stream.kafka.streams.bindings.output3.producer.valueSerde=JsonSerde</screen>
<simpara>Then if you have <literal>SendTo</literal> like this, @SendTo({"output1", "output2", "output3"}), the <literal>KStream[]</literal> from the branches are
applied with proper SerDe objects as defined above. If you are not enabling <literal>nativeEncoding</literal>, you can then set different
contentType values on the output bindings as below. In that case, the framework will use the appropriate message converter
to convert the messages before sending to Kafka.</simpara>
<screen>spring.cloud.stream.bindings.output1.contentType: application/json
spring.cloud.stream.bindings.output2.contentType: application/java-serialzied-object
spring.cloud.stream.bindings.output3.contentType: application/octet-stream</screen>
</section>
<section xml:id="_inbound_deserialization">
<title>Inbound Deserialization</title>
<simpara>Similar rules apply to data deserialization on the inbound.</simpara>
<simpara>If native decoding is disabled (which is the default), then the framework will convert the message using the contentType
set by the user (otherwise, the default <literal>application/json</literal> will be applied). It will ignore any SerDe set on the inbound
in this case for inbound deserialization.</simpara>
<simpara>Here is the property to set the contentType on the inbound.</simpara>
<screen>spring.cloud.stream.bindings.input.contentType: application/json</screen>
<simpara>Here is the property to enable native decoding.</simpara>
<screen>spring.cloud.stream.bindings.input.nativeDecoding: true</screen>
<simpara>If native decoding is enabled on the input binding (user has to enable it as above explicitly), then the framework will
skip doing any message conversion on the inbound. In that case, it will switch to the SerDe set by the user. The <literal>valueSerde</literal>
property set on the actual output binding will be used. Here is an example.</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.input.consumer.valueSerde: org.apache.kafka.common.serialization.Serdes$StringSerde</screen>
<simpara>If this property is not set, it will use the default SerDe: <literal>spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde</literal>.</simpara>
<simpara>It is worth to mention that Kafka Streams binder does not deserialize the keys on inbound - it simply relies on Kafka itself.
Therefore, you either have to specify the <literal>keySerde</literal> property on the binding or it will default to the application-wide common
<literal>keySerde</literal>.</simpara>
<simpara>Binding level key serde:</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.input.consumer.keySerde</screen>
<simpara>Common Key serde:</simpara>
<screen>spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde</screen>
<simpara>As in the case of KStream branching on the outbound, the benefit of setting value SerDe per binding is that if you have
multiple input bindings (multiple KStreams object) and they all require separate value SerDe&#8217;s, then you can configure
them individually. If you use the common configuration approach, then this feature won&#8217;t be applicable.</simpara>
</section>
</section>
<section xml:id="_error_handling">
<title>Error Handling</title>
<simpara>Apache Kafka Streams provide the capability for natively handling exceptions from deserialization errors.
For details on this support, please see <link xl:href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-161%3A+streams+deserialization+exception+handlers">this</link>
Out of the box, Apache Kafka Streams provide two kinds of deserialization exception handlers - <literal>logAndContinue</literal> and <literal>logAndFail</literal>.
As the name indicates, the former will log the error and continue processing the next records and the latter will log the
error and fail. <literal>LogAndFail</literal> is the default deserialization exception handler.</simpara>
<section xml:id="_handling_deserialization_exceptions">
<title>Handling Deserialization Exceptions</title>
<simpara>Kafka Streams binder supports a selection of exception handlers through the following properties.</simpara>
<screen>spring.cloud.stream.kafka.streams.binder.serdeError: logAndContinue</screen>
<simpara>In addition to the above two deserialization exception handlers, the binder also provides a third one for sending the erroneous
records (poison pills) to a DLQ topic. Here is how you enable this DLQ exception handler.</simpara>
<screen>spring.cloud.stream.kafka.streams.binder.serdeError: sendToDlq</screen>
<simpara>When the above property is set, all the deserialization error records are automatically sent to the DLQ topic.</simpara>
<screen>spring.cloud.stream.kafka.streams.bindings.input.consumer.dlqName: foo-dlq</screen>
<simpara>If this is set, then the error records are sent to the topic <literal>foo-dlq</literal>. If this is not set, then it will create a DLQ
topic with the name <literal>error.&lt;input-topic-name&gt;.&lt;group-name&gt;</literal>.</simpara>
<simpara>A couple of things to keep in mind when using the exception handling feature in Kafka Streams binder.</simpara>
<itemizedlist>
<listitem>
<simpara>The property <literal>spring.cloud.stream.kafka.streams.binder.serdeError</literal> is applicable for the entire application. This implies
that if there are multiple <literal>StreamListener</literal> methods in the same application, this property is applied to all of them.</simpara>
</listitem>
<listitem>
<simpara>The exception handling for deserialization works consistently with native deserialization and framework provided message
conversion.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_handling_non_deserialization_exceptions">
<title>Handling Non-Deserialization Exceptions</title>
<simpara>For general error handling in Kafka Streams binder, it is up to the end user applications to handle application level errors.
As a side effect of providing a DLQ for deserialization exception handlers, Kafka Streams binder provides a way to get
access to the DLQ sending bean directly from your application.
Once you get access to that bean, you can programmatically send any exception records from your application to the DLQ.</simpara>
<simpara>It continues to remain hard to robust error handling using the high-level DSL; Kafka Streams doesn&#8217;t natively support error
handling yet.</simpara>
<simpara>However, when you use the low-level Processor API in your application, there are options to control this behavior. See
below.</simpara>
<screen>@Autowired
private SendToDlqAndContinue dlqHandler;

@StreamListener("input")
@SendTo("output")
public KStream&lt;?, WordCount&gt; process(KStream&lt;Object, String&gt; input) {

    input.process(() -&gt; new Processor() {
    			ProcessorContext context;

    			@Override
    			public void init(ProcessorContext context) {
    				this.context = context;
    			}

    			@Override
    			public void process(Object o, Object o2) {

    			    try {
    			        .....
    			        .....
    			    }
    			    catch(Exception e) {
    			        //explicitly provide the kafka topic corresponding to the input binding as the first argument.
                        //DLQ handler will correctly map to the dlq topic from the actual incoming destination.
                        dlqHandler.sendToDlq("topic-name", (byte[]) o1, (byte[]) o2, context.partition());
    			    }
    			}

    			.....
    			.....
    });
}</screen>
</section>
</section>
<section xml:id="_interactive_queries">
<title>Interactive Queries</title>
<simpara>As part of the public Kafka Streams binder API, we expose a class called <literal>QueryableStoreRegistry</literal>. You can access this
as a Spring bean in your application. An easy way to get access to this bean from your application is to "autowire" the bean
in your application.</simpara>
<screen>@Autowired
private QueryableStoreRegistry queryableStoreRegistry;</screen>
<simpara>Once you gain access to this bean, then you can query for the particular state-store that you are interested. See below.</simpara>
<screen>ReadOnlyKeyValueStore&lt;Object, Object&gt; keyValueStore =
						queryableStoreRegistry.getQueryableStoreType("my-store", QueryableStoreTypes.keyValueStore());</screen>
</section>
</chapter>
<chapter xml:id="_rabbitmq_binder">
<title>RabbitMQ Binder</title>

<section xml:id="_usage_3">
<title>Usage</title>
<simpara>To use the RabbitMQ binder, you can add it to your Spring Cloud Stream application, by using the following Maven coordinates:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>Alternatively, you can use the Spring Cloud Stream RabbitMQ Starter, as follows:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
  &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</section>
<section xml:id="_rabbitmq_binder_overview">
<title>RabbitMQ Binder Overview</title>
<simpara>The following simplified diagram shows how the RabbitMQ binder operates:</simpara>
<figure>
<title>RabbitMQ Binder</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/rabbit-binder.png" contentwidth="300" width="50%" scalefit="1"/>
</imageobject>
<textobject><phrase>rabbit binder</phrase></textobject>
</mediaobject>
</figure>
<simpara>By default, the RabbitMQ Binder implementation maps each destination to a <literal>TopicExchange</literal>.
For each consumer group, a <literal>Queue</literal> is bound to that <literal>TopicExchange</literal>.
Each consumer instance has a corresponding RabbitMQ <literal>Consumer</literal> instance for its group&#8217;s <literal>Queue</literal>.
For partitioned producers and consumers, the queues are suffixed with the partition index and use the partition index as the routing key.
For anonymous consumers (those with no <literal>group</literal> property), an auto-delete queue (with a randomized unique name) is used.</simpara>
<simpara>By using the optional <literal>autoBindDlq</literal> option, you can configure the binder to create and configure dead-letter queues (DLQs) (and a dead-letter exchange <literal>DLX</literal>, as well as routing infrastructure).
By default, the dead letter queue has the name of the destination, appended with <literal>.dlq</literal>.
If retry is enabled (<literal>maxAttempts &gt; 1</literal>), failed messages are delivered to the DLQ after retries are exhausted.
If retry is disabled (<literal>maxAttempts = 1</literal>), you should set <literal>requeueRejected</literal> to <literal>false</literal> (the default) so that failed messages are routed to the DLQ, instead of being re-queued.
In addition, <literal>republishToDlq</literal> causes the binder to publish a failed message to the DLQ (instead of rejecting it).
This feature lets additional information (such as the stack trace in the <literal>x-exception-stacktrace</literal> header) be added to the message in headers.
This option does not need retry enabled.
You can republish a failed message after just one attempt.
Starting with version 1.2, you can configure the delivery mode of republished messages.
See the <link linkend="spring-cloud-stream-rabbit-republish-delivery-mode"><literal>republishDeliveryMode</literal> property</link>.</simpara>
<important>
<simpara>Setting <literal>requeueRejected</literal> to <literal>true</literal> (with <literal>republishToDlq=false</literal> ) causes the message to be re-queued and redelivered continually, which is likely not what you want unless the reason for the failure is transient.
In general, you should enable retry within the binder by setting <literal>maxAttempts</literal> to greater than one or by setting <literal>republishToDlq</literal> to <literal>true</literal>.</simpara>
</important>
<simpara>See <xref linkend="rabbit-binder-properties"/> for more information about these properties.</simpara>
<simpara>The framework does not provide any standard mechanism to consume dead-letter messages (or to re-route them back to the primary queue).
Some options are described in <xref linkend="rabbit-dlq-processing"/>.</simpara>
<note>
<simpara>When multiple RabbitMQ binders are used in a Spring Cloud Stream application, it is important to disable 'RabbitAutoConfiguration' to avoid the same configuration from <literal>RabbitAutoConfiguration</literal> being applied to the two binders.
You can exclude the class by using the <literal>@SpringBootApplication</literal> annotation.</simpara>
</note>
<simpara>Starting with version 2.0, the <literal>RabbitMessageChannelBinder</literal> sets the <literal>RabbitTemplate.userPublisherConnection</literal> property to <literal>true</literal> so that the non-transactional producers avoid deadlocks on consumers, which can happen if cached connections are blocked because of a <link xl:href="https://www.rabbitmq.com/memory.html">memory alarm</link> on the broker.</simpara>
</section>
<section xml:id="_configuration_options_4">
<title>Configuration Options</title>
<simpara>This section contains settings specific to the RabbitMQ Binder and bound channels.</simpara>
<simpara>For general binding configuration options and properties, see the <link xl:href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream-core-docs/src/main/asciidoc/spring-cloud-stream-overview.adoc#configuration-options">Spring Cloud Stream core documentation</link>.</simpara>
<section xml:id="rabbit-binder-properties">
<title>RabbitMQ Binder Properties</title>
<simpara>By default, the RabbitMQ binder uses Spring Boot&#8217;s <literal>ConnectionFactory</literal>.
Conseuqently, it supports all Spring Boot configuration options for RabbitMQ.
(For reference, see the <link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties">Spring Boot documentation</link>).
RabbitMQ configuration options use the <literal>spring.rabbitmq</literal> prefix.</simpara>
<simpara>In addition to Spring Boot options, the RabbitMQ binder supports the following properties:</simpara>
<variablelist>
<varlistentry>
<term>spring.cloud.stream.rabbit.binder.adminAddresses</term>
<listitem>
<simpara>A comma-separated list of RabbitMQ management plugin URLs.
Only used when <literal>nodes</literal> contains more than one entry.
Each entry in this list must have a corresponding entry in <literal>spring.rabbitmq.addresses</literal>.
Only needed if you use a RabbitMQ cluster and wish to consume from the node that hosts the queue.
See <link xl:href="https://docs.spring.io/spring-amqp/reference/html/_reference.html#queue-affinity">Queue Affinity and the LocalizedQueueConnectionFactory</link> for more information.</simpara>
<simpara>Default: empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.rabbit.binder.nodes</term>
<listitem>
<simpara>A comma-separated list of RabbitMQ node names.
When more than one entry, used to locate the server address where a queue is located.
Each entry in this list must have a corresponding entry in <literal>spring.rabbitmq.addresses</literal>.
Only needed if you use a RabbitMQ cluster and wish to consume from the node that hosts the queue.
See <link xl:href="https://docs.spring.io/spring-amqp/reference/html/_reference.html#queue-affinity">Queue Affinity and the LocalizedQueueConnectionFactory</link> for more information.</simpara>
<simpara>Default: empty.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.rabbit.binder.compressionLevel</term>
<listitem>
<simpara>The compression level for compressed bindings.
See <literal>java.util.zip.Deflater</literal>.</simpara>
<simpara>Default: <literal>1</literal> (BEST_LEVEL).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>spring.cloud.stream.binder.connection-name-prefix</term>
<listitem>
<simpara>A connection name prefix used to name the connection(s) created by this binder.
The name is this prefix followed by <literal>#n</literal>, where <literal>n</literal> increments each time a new connection is opened.</simpara>
<simpara>Default: none (Spring AMQP default).</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_rabbitmq_consumer_properties">
<title>RabbitMQ Consumer Properties</title>
<simpara>The following properties are available for Rabbit consumers only and must be prefixed with <literal>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.consumer.</literal>.</simpara>
<variablelist>
<varlistentry>
<term>acknowledgeMode</term>
<listitem>
<simpara>The acknowledge mode.</simpara>
<simpara>Default: <literal>AUTO</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>autoBindDlq</term>
<listitem>
<simpara>Whether to automatically declare the DLQ and bind it to the binder DLX.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bindingRoutingKey</term>
<listitem>
<simpara>The routing key with which to bind the queue to the exchange (if <literal>bindQueue</literal> is <literal>true</literal>).
For partitioned destinations, <literal>-&lt;instanceIndex&gt;</literal> is appended.</simpara>
<simpara>Default: <literal>#</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bindQueue</term>
<listitem>
<simpara>Whether to bind the queue to the destination exchange.
Set it to <literal>false</literal> if you have set up your own infrastructure and have previously created and bound the queue.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterQueueName</term>
<listitem>
<simpara>The name of the DLQ</simpara>
<simpara>Default: <literal>prefix+destination.dlq</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterExchange</term>
<listitem>
<simpara>A DLX to assign to the queue.
Relevant only if <literal>autoBindDlq</literal> is <literal>true</literal>.</simpara>
<simpara>Default: 'prefix+DLX'</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterRoutingKey</term>
<listitem>
<simpara>A dead letter routing key to assign to the queue.
Relevant only if <literal>autoBindDlq</literal> is <literal>true</literal>.</simpara>
<simpara>Default: <literal>destination</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>declareExchange</term>
<listitem>
<simpara>Whether to declare the exchange for the destination.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>delayedExchange</term>
<listitem>
<simpara>Whether to declare the exchange as a <literal>Delayed Message Exchange</literal>.
Requires the delayed message exchange plugin on the broker.
The <literal>x-delayed-type</literal> argument is set to the <literal>exchangeType</literal>.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqDeadLetterExchange</term>
<listitem>
<simpara>If a DLQ is declared, a DLX to assign to that queue.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqDeadLetterRoutingKey</term>
<listitem>
<simpara>If a DLQ is declared, a dead letter routing key to assign to that queue.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqExpires</term>
<listitem>
<simpara>How long before an unused dead letter queue is deleted (in milliseconds).</simpara>
<simpara>Default: <literal>no expiration</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqLazy</term>
<listitem>
<simpara>Declare the dead letter queue with the <literal>x-queue-mode=lazy</literal> argument.
See <link xl:href="https://www.rabbitmq.com/lazy-queues.html">&#8220;Lazy Queues&#8221;</link>.
Consider using a policy instead of this setting, because using a policy allows changing the setting without deleting the queue.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxLength</term>
<listitem>
<simpara>Maximum number of messages in the dead letter queue.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxLengthBytes</term>
<listitem>
<simpara>Maximum number of total bytes in the dead letter queue from all messages.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxPriority</term>
<listitem>
<simpara>Maximum priority of messages in the dead letter queue (0-255).</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqTtl</term>
<listitem>
<simpara>Default time to live to apply to the dead letter queue when declared (in milliseconds).</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>durableSubscription</term>
<listitem>
<simpara>Whether the subscription should be durable.
Only effective if <literal>group</literal> is also set.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeAutoDelete</term>
<listitem>
<simpara>If <literal>declareExchange</literal> is true, whether the exchange should be auto-deleted (that is, removed after the last queue is removed).</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeDurable</term>
<listitem>
<simpara>If <literal>declareExchange</literal> is true, whether the exchange should be durable (that is, it survives broker restart).</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeType</term>
<listitem>
<simpara>The exchange type: <literal>direct</literal>, <literal>fanout</literal> or <literal>topic</literal> for non-partitioned destinations and <literal>direct</literal> or <literal>topic</literal> for partitioned destinations.</simpara>
<simpara>Default: <literal>topic</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exclusive</term>
<listitem>
<simpara>Whether to create an exclusive consumer.
Concurrency should be 1 when this is <literal>true</literal>.
Often used when strict ordering is required but enabling a hot standby instance to take over after a failure.
See <literal>recoveryInterval</literal>, which controls how often a standby instance attempts to consume.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>expires</term>
<listitem>
<simpara>How long before an unused queue is deleted (in milliseconds).</simpara>
<simpara>Default: <literal>no expiration</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>failedDeclarationRetryInterval</term>
<listitem>
<simpara>The interval (in milliseconds) between attempts to consume from a queue if it is missing.</simpara>
<simpara>Default: 5000</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>headerPatterns</term>
<listitem>
<simpara>Patterns for headers to be mapped from inbound messages.</simpara>
<simpara>Default: <literal>['*']</literal> (all headers).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>lazy</term>
<listitem>
<simpara>Declare the queue with the <literal>x-queue-mode=lazy</literal> argument.
See <link xl:href="https://www.rabbitmq.com/lazy-queues.html">&#8220;Lazy Queues&#8221;</link>.
Consider using a policy instead of this setting, because using a policy allows changing the setting without deleting the queue.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxConcurrency</term>
<listitem>
<simpara>The maximum number of consumers.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxLength</term>
<listitem>
<simpara>The maximum number of messages in the queue.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxLengthBytes</term>
<listitem>
<simpara>The maximum number of total bytes in the queue from all messages.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxPriority</term>
<listitem>
<simpara>The maximum priority of messages in the queue (0-255).</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>missingQueuesFatal</term>
<listitem>
<simpara>When the queue cannot be found, whether to treat the condition as fatal and stop the listener container.
Defaults to <literal>false</literal> so that the container keeps trying to consume from the queue&#8201;&#8212;&#8201;for example, when using a cluster and the node hosting a non-HA queue is down.</simpara>
<simpara>Default: <literal>false</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>prefetch</term>
<listitem>
<simpara>Prefetch count.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>prefix</term>
<listitem>
<simpara>A prefix to be added to the name of the <literal>destination</literal> and queues.</simpara>
<simpara>Default: "".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>queueDeclarationRetries</term>
<listitem>
<simpara>The number of times to retry consuming from a queue if it is missing.
Relevant only when <literal>missingQueuesFatal</literal> is <literal>true</literal>.
Otherwise, the container keeps retrying indefinitely.</simpara>
<simpara>Default: <literal>3</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>queueNameGroupOnly</term>
<listitem>
<simpara>When true, consume from a queue with a name equal to the <literal>group</literal>.
Otherwise the queue name is <literal>destination.group</literal>.
This is useful, for example, when using Spring Cloud Stream to consume from an existing RabbitMQ queue.</simpara>
<simpara>Default: false.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>recoveryInterval</term>
<listitem>
<simpara>The interval between connection recovery attempts, in milliseconds.</simpara>
<simpara>Default: <literal>5000</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>requeueRejected</term>
<listitem>
<simpara>Whether delivery failures should be re-queued when retry is disabled or <literal>republishToDlq</literal> is <literal>false</literal>.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
<variablelist xml:id="spring-cloud-stream-rabbit-republish-delivery-mode">
<varlistentry>
<term>republishDeliveryMode</term>
<listitem>
<simpara>When <literal>republishToDlq</literal> is <literal>true</literal>, specifies the delivery mode of the republished message.</simpara>
<simpara>Default: <literal>DeliveryMode.PERSISTENT</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>republishToDlq</term>
<listitem>
<simpara>By default, messages that fail after retries are exhausted are rejected.
If a dead-letter queue (DLQ) is configured, RabbitMQ routes the failed message (unchanged) to the DLQ.
If set to <literal>true</literal>, the binder republishs failed messages to the DLQ with additional headers, including the exception message and stack trace from the cause of the final failure.</simpara>
<simpara>Default: false</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transacted</term>
<listitem>
<simpara>Whether to use transacted channels.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ttl</term>
<listitem>
<simpara>Default time to live to apply to the queue when declared (in milliseconds).</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>txSize</term>
<listitem>
<simpara>The number of deliveries between acks.</simpara>
<simpara>Default: <literal>1</literal>.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="_rabbit_producer_properties">
<title>Rabbit Producer Properties</title>
<simpara>The following properties are available for Rabbit producers only and
must be prefixed with <literal>spring.cloud.stream.rabbit.bindings.&lt;channelName&gt;.producer.</literal>.</simpara>
<variablelist>
<varlistentry>
<term>autoBindDlq</term>
<listitem>
<simpara>Whether to automatically declare the DLQ and bind it to the binder DLX.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>batchingEnabled</term>
<listitem>
<simpara>Whether to enable message batching by producers.
Messages are batched into one message according to the following properties (described in the next three entries in this list): 'batchSize', <literal>batchBufferLimit</literal>, and <literal>batchTimeout</literal>.
See <link xl:href="https://docs.spring.io/spring-amqp//reference/html/_reference.html#template-batching">Batching</link> for more information.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>batchSize</term>
<listitem>
<simpara>The number of messages to buffer when batching is enabled.</simpara>
<simpara>Default: <literal>100</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>batchBufferLimit</term>
<listitem>
<simpara>The maximum buffer size when batching is enabled.</simpara>
<simpara>Default: <literal>10000</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>batchTimeout</term>
<listitem>
<simpara>The batch timeout when batching is enabled.</simpara>
<simpara>Default: <literal>5000</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bindingRoutingKey</term>
<listitem>
<simpara>The routing key with which to bind the queue to the exchange (if <literal>bindQueue</literal> is <literal>true</literal>).
Only applies to non-partitioned destinations.
Only applies if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>#</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>bindQueue</term>
<listitem>
<simpara>Whether to bind the queue to the destination exchange.
Set it to <literal>false</literal> if you have set up your own infrastructure and have previously created and bound the queue.
Only applies if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>compress</term>
<listitem>
<simpara>Whether data should be compressed when sent.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterQueueName</term>
<listitem>
<simpara>The name of the DLQ
Only applies if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>prefix+destination.dlq</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterExchange</term>
<listitem>
<simpara>A DLX to assign to the queue.
Relevant only when <literal>autoBindDlq</literal> is <literal>true</literal>.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: 'prefix+DLX'</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deadLetterRoutingKey</term>
<listitem>
<simpara>A dead letter routing key to assign to the queue.
Relevant only when <literal>autoBindDlq</literal> is <literal>true</literal>.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>destination</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>declareExchange</term>
<listitem>
<simpara>Whether to declare the exchange for the destination.</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>delayExpression</term>
<listitem>
<simpara>A SpEL expression to evaluate the delay to apply to the message (<literal>x-delay</literal> header).
It has no effect if the exchange is not a delayed message exchange.</simpara>
<simpara>Default: No <literal>x-delay</literal> header is set.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>delayedExchange</term>
<listitem>
<simpara>Whether to declare the exchange as a <literal>Delayed Message Exchange</literal>.
Requires the delayed message exchange plugin on the broker.
The <literal>x-delayed-type</literal> argument is set to the <literal>exchangeType</literal>.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>deliveryMode</term>
<listitem>
<simpara>The delivery mode.</simpara>
<simpara>Default: <literal>PERSISTENT</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqDeadLetterExchange</term>
<listitem>
<simpara>When a DLQ is declared, a DLX to assign to that queue.
Applies only if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqDeadLetterRoutingKey</term>
<listitem>
<simpara>When a DLQ is declared, a dead letter routing key to assign to that queue.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqExpires</term>
<listitem>
<simpara>How long (in milliseconds) before an unused dead letter queue is deleted.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no expiration</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqLazy</term>
<listitem>
<simpara>Declare the dead letter queue with the <literal>x-queue-mode=lazy</literal> argument.
See <link xl:href="https://www.rabbitmq.com/lazy-queues.html">&#8220;Lazy Queues&#8221;</link>.
Consider using a policy instead of this setting, because using a policy allows changing the setting without deleting the queue.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxLength</term>
<listitem>
<simpara>Maximum number of messages in the dead letter queue.
Applies only if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxLengthBytes</term>
<listitem>
<simpara>Maximum number of total bytes in the dead letter queue from all messages.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqMaxPriority</term>
<listitem>
<simpara>Maximum priority of messages in the dead letter queue (0-255)
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>dlqTtl</term>
<listitem>
<simpara>Default time (in milliseconds) to live to apply to the dead letter queue when declared.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeAutoDelete</term>
<listitem>
<simpara>If <literal>declareExchange</literal> is <literal>true</literal>, whether the exchange should be auto-delete (it is removed after the last queue is removed).</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeDurable</term>
<listitem>
<simpara>If <literal>declareExchange</literal> is <literal>true</literal>, whether the exchange should be durable (survives broker restart).</simpara>
<simpara>Default: <literal>true</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>exchangeType</term>
<listitem>
<simpara>The exchange type: <literal>direct</literal>, <literal>fanout</literal> or <literal>topic</literal> for non-partitioned destinations and <literal>direct</literal> or <literal>topic</literal> for partitioned destinations.</simpara>
<simpara>Default: <literal>topic</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>expires</term>
<listitem>
<simpara>How long (in milliseconds) before an unused queue is deleted.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no expiration</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>headerPatterns</term>
<listitem>
<simpara>Patterns for headers to be mapped to outbound messages.</simpara>
<simpara>Default: <literal>['*']</literal> (all headers).</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>lazy</term>
<listitem>
<simpara>Declare the queue with the <literal>x-queue-mode=lazy</literal> argument.
See <link xl:href="https://www.rabbitmq.com/lazy-queues.html">&#8220;Lazy Queues&#8221;</link>.
Consider using a policy instead of this setting, because using a policy allows changing the setting without deleting the queue.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxLength</term>
<listitem>
<simpara>Maximum number of messages in the queue.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxLengthBytes</term>
<listitem>
<simpara>Maximum number of total bytes in the queue from all messages.
Only applies if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>maxPriority</term>
<listitem>
<simpara>Maximum priority of messages in the queue (0-255).
Only applies if <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>none</literal></simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>prefix</term>
<listitem>
<simpara>A prefix to be added to the name of the <literal>destination</literal> exchange.</simpara>
<simpara>Default: "".</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>queueNameGroupOnly</term>
<listitem>
<simpara>When <literal>true</literal>, consume from a queue with a name equal to the <literal>group</literal>.
Otherwise the queue name is <literal>destination.group</literal>.
This is useful, for example, when using Spring Cloud Stream to consume from an existing RabbitMQ queue.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: false.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>routingKeyExpression</term>
<listitem>
<simpara>A SpEL expression to determine the routing key to use when publishing messages.
For a fixed routing key, use a literal expression, such as <literal>routingKeyExpression='my.routingKey'</literal> in a properties file or <literal>routingKeyExpression: '''my.routingKey'''</literal> in a YAML file.</simpara>
<simpara>Default: <literal>destination</literal> or <literal>destination-&lt;partition&gt;</literal> for partitioned destinations.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>transacted</term>
<listitem>
<simpara>Whether to use transacted channels.</simpara>
<simpara>Default: <literal>false</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>ttl</term>
<listitem>
<simpara>Default time (in milliseconds) to live to apply to the queue when declared.
Applies only when <literal>requiredGroups</literal> are provided and then only to those groups.</simpara>
<simpara>Default: <literal>no limit</literal></simpara>
</listitem>
</varlistentry>
</variablelist>
<note>
<simpara>In the case of RabbitMQ, content type headers can be set by external applications.
Spring Cloud Stream supports them as part of an extended internal protocol used for any type of transport&#8201;&#8212;&#8201;including transports, such as Kafka (prior to 0.11), that do not natively support headers.</simpara>
</note>
</section>
</section>
<section xml:id="_retry_with_the_rabbitmq_binder">
<title>Retry With the RabbitMQ Binder</title>
<simpara>When retry is enabled within the binder, the listener container thread is suspended for any back off periods that are configured.
This might be important when strict ordering is required with a single consumer. However, for other use cases, it prevents other messages from being processed on that thread.
An alternative to using binder retry is to set up dead lettering with time to live on the dead-letter queue (DLQ) as well as dead-letter configuration on the DLQ itself.
See &#8220;<xref linkend="rabbit-binder-properties"/>&#8221; for more information about the properties discussed here.
You can use the following example configuration to enable this feature:</simpara>
<itemizedlist>
<listitem>
<simpara>Set <literal>autoBindDlq</literal> to <literal>true</literal>.
The binder create a DLQ.
Optionally, you can specify a name in <literal>deadLetterQueueName</literal>.</simpara>
</listitem>
<listitem>
<simpara>Set <literal>dlqTtl</literal> to the back off time you want to wait between redeliveries.</simpara>
</listitem>
<listitem>
<simpara>Set the <literal>dlqDeadLetterExchange</literal> to the default exchange.
Expired messages from the DLQ are routed to the original queue, because the default <literal>deadLetterRoutingKey</literal> is the queue name (<literal>destination.group</literal>).
Setting to the default exchange is achieved by setting the property with no value, as shown in the next example.</simpara>
</listitem>
</itemizedlist>
<simpara>To force a message to be dead-lettered, either throw an <literal>AmqpRejectAndDontRequeueException</literal> or set <literal>requeueRejected</literal> to <literal>true</literal> (the default) and throw any exception.</simpara>
<simpara>The loop continue without end, which is fine for transient problems, but you may want to give up after some number of attempts.
Fortunately, RabbitMQ provides the <literal>x-death</literal> header, which lets you determine how many cycles have occurred.</simpara>
<simpara>To acknowledge a message after giving up, throw an <literal>ImmediateAcknowledgeAmqpException</literal>.</simpara>
<section xml:id="_putting_it_all_together">
<title>Putting it All Together</title>
<simpara>The following configuration creates an exchange <literal>myDestination</literal> with queue <literal>myDestination.consumerGroup</literal> bound to a topic exchange with a wildcard routing key <literal>#</literal>:</simpara>
<screen>---
spring.cloud.stream.bindings.input.destination=myDestination
spring.cloud.stream.bindings.input.group=consumerGroup
#disable binder retries
spring.cloud.stream.bindings.input.consumer.max-attempts=1
#dlx/dlq setup
spring.cloud.stream.rabbit.bindings.input.consumer.auto-bind-dlq=true
spring.cloud.stream.rabbit.bindings.input.consumer.dlq-ttl=5000
spring.cloud.stream.rabbit.bindings.input.consumer.dlq-dead-letter-exchange=
---</screen>
<simpara>This configuration creates a DLQ bound to a direct exchange (<literal>DLX</literal>) with a routing key of <literal>myDestination.consumerGroup</literal>.
When messages are rejected, they are routed to the DLQ.
After 5 seconds, the message expires and is routed to the original queue by using the queue name as the routing key, as shown in the following example:</simpara>
<formalpara>
<title>Spring Boot application</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class XDeathApplication {

    public static void main(String[] args) {
        SpringApplication.run(XDeathApplication.class, args);
    }

    @StreamListener(Sink.INPUT)
    public void listen(String in, @Header(name = "x-death", required = false) Map&lt;?,?&gt; death) {
        if (death != null &amp;&amp; death.get("count").equals(3L)) {
            // giving up - don't send to DLX
            throw new ImmediateAcknowledgeAmqpException("Failed after 4 attempts");
        }
        throw new AmqpRejectAndDontRequeueException("failed");
    }

}</programlisting>
</para>
</formalpara>
<simpara>Notice that the count property in the <literal>x-death</literal> header is a <literal>Long</literal>.</simpara>
</section>
</section>
<section xml:id="rabbit-error-channels">
<title>Error Channels</title>
<simpara>Starting with version 1.3, the binder unconditionally sends exceptions to an error channel for each consumer destination and can also be configured to send async producer send failures to an error channel.
See &#8220;<xref linkend="binder-error-channels"/>&#8221; for more information.</simpara>
<simpara>RabbitMQ has two types of send failures:</simpara>
<itemizedlist>
<listitem>
<simpara>Returned messages,</simpara>
</listitem>
<listitem>
<simpara>Negatively acknowledged <link xl:href="https://www.rabbitmq.com/confirms.html">Publisher Confirms</link>.</simpara>
</listitem>
</itemizedlist>
<simpara>The latter is rare.
According to the RabbitMQ documentation "[A nack] will only be delivered if an internal error occurs in the Erlang process responsible for a queue.".</simpara>
<simpara>As well as enabling producer error channels (as described in &#8220;<xref linkend="binder-error-channels"/>&#8221;), the RabbitMQ binder only sends messages to the channels if the connection factory is appropriately configured, as follows:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ccf.setPublisherConfirms(true);</literal></simpara>
</listitem>
<listitem>
<simpara><literal>ccf.setPublisherReturns(true);</literal></simpara>
</listitem>
</itemizedlist>
<simpara>When using Spring Boot configuration for the connection factory, set the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>spring.rabbitmq.publisher-confirms</literal></simpara>
</listitem>
<listitem>
<simpara><literal>spring.rabbitmq.publisher-returns</literal></simpara>
</listitem>
</itemizedlist>
<simpara>The payload of the <literal>ErrorMessage</literal> for a returned message is a <literal>ReturnedAmqpMessageException</literal> with the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>failedMessage</literal>: The spring-messaging <literal>Message&lt;?&gt;</literal> that failed to be sent.</simpara>
</listitem>
<listitem>
<simpara><literal>amqpMessage</literal>: The raw spring-amqp <literal>Message</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>replyCode</literal>: An integer value indicating the reason for the failure (for example, 312 - No route).</simpara>
</listitem>
<listitem>
<simpara><literal>replyText</literal>: A text value indicating the reason for the failure (for example, <literal>NO_ROUTE</literal>).</simpara>
</listitem>
<listitem>
<simpara><literal>exchange</literal>: The exchange to which the message was published.</simpara>
</listitem>
<listitem>
<simpara><literal>routingKey</literal>: The routing key used when the message was published.</simpara>
</listitem>
</itemizedlist>
<simpara>For negatively acknowledged confirmations, the payload is a <literal>NackedAmqpMessageException</literal> with the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>failedMessage</literal>: The spring-messaging <literal>Message&lt;?&gt;</literal> that failed to be sent.</simpara>
</listitem>
<listitem>
<simpara><literal>nackReason</literal>: A reason (if available&#8201;&#8212;&#8201;you may need to examine the broker logs for more information).</simpara>
</listitem>
</itemizedlist>
<simpara>There is no automatic handling of these exceptions (such as sending to a <link linkend="rabbit-dlq-processing">dead-letter queue</link>).
You can consume these exceptions with your own Spring Integration flow.</simpara>
</section>
<section xml:id="rabbit-dlq-processing">
<title>Dead-Letter Queue Processing</title>
<simpara>Because you cannot anticipate how users would want to dispose of dead-lettered messages, the framework does not provide any standard mechanism to handle them.
If the reason for the dead-lettering is transient, you may wish to route the messages back to the original queue.
However, if the problem is a permanent issue, that could cause an infinite loop.
The following Spring Boot application shows an example of how to route those messages back to the original queue but moves them to a third &#8220;parking lot&#8221; queue after three attempts.
The second example uses the <link xl:href="https://www.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq/">RabbitMQ Delayed Message Exchange</link> to introduce a delay to the re-queued message.
In this example, the delay increases for each attempt.
These examples use a <literal>@RabbitListener</literal> to receive messages from the DLQ.
You could also use <literal>RabbitTemplate.receive()</literal> in a batch process.</simpara>
<simpara>The examples assume the original destination is <literal>so8400in</literal> and the consumer group is <literal>so8400</literal>.</simpara>
<section xml:id="_non_partitioned_destinations">
<title>Non-Partitioned Destinations</title>
<simpara>The first two examples are for when the destination is <emphasis role="strong">not</emphasis> partitioned:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
public class ReRouteDlqApplication {

    private static final String ORIGINAL_QUEUE = "so8400in.so8400";

    private static final String DLQ = ORIGINAL_QUEUE + ".dlq";

    private static final String PARKING_LOT = ORIGINAL_QUEUE + ".parkingLot";

    private static final String X_RETRIES_HEADER = "x-retries";

    public static void main(String[] args) throws Exception {
        ConfigurableApplicationContext context = SpringApplication.run(ReRouteDlqApplication.class, args);
        System.out.println("Hit enter to terminate");
        System.in.read();
        context.close();
    }

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @RabbitListener(queues = DLQ)
    public void rePublish(Message failedMessage) {
        Integer retriesHeader = (Integer) failedMessage.getMessageProperties().getHeaders().get(X_RETRIES_HEADER);
        if (retriesHeader == null) {
            retriesHeader = Integer.valueOf(0);
        }
        if (retriesHeader &lt; 3) {
            failedMessage.getMessageProperties().getHeaders().put(X_RETRIES_HEADER, retriesHeader + 1);
            this.rabbitTemplate.send(ORIGINAL_QUEUE, failedMessage);
        }
        else {
            this.rabbitTemplate.send(PARKING_LOT, failedMessage);
        }
    }

    @Bean
    public Queue parkingLot() {
        return new Queue(PARKING_LOT);
    }

}</programlisting>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
public class ReRouteDlqApplication {

    private static final String ORIGINAL_QUEUE = "so8400in.so8400";

    private static final String DLQ = ORIGINAL_QUEUE + ".dlq";

    private static final String PARKING_LOT = ORIGINAL_QUEUE + ".parkingLot";

    private static final String X_RETRIES_HEADER = "x-retries";

    private static final String DELAY_EXCHANGE = "dlqReRouter";

    public static void main(String[] args) throws Exception {
        ConfigurableApplicationContext context = SpringApplication.run(ReRouteDlqApplication.class, args);
        System.out.println("Hit enter to terminate");
        System.in.read();
        context.close();
    }

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @RabbitListener(queues = DLQ)
    public void rePublish(Message failedMessage) {
        Map&lt;String, Object&gt; headers = failedMessage.getMessageProperties().getHeaders();
        Integer retriesHeader = (Integer) headers.get(X_RETRIES_HEADER);
        if (retriesHeader == null) {
            retriesHeader = Integer.valueOf(0);
        }
        if (retriesHeader &lt; 3) {
            headers.put(X_RETRIES_HEADER, retriesHeader + 1);
            headers.put("x-delay", 5000 * retriesHeader);
            this.rabbitTemplate.send(DELAY_EXCHANGE, ORIGINAL_QUEUE, failedMessage);
        }
        else {
            this.rabbitTemplate.send(PARKING_LOT, failedMessage);
        }
    }

    @Bean
    public DirectExchange delayExchange() {
        DirectExchange exchange = new DirectExchange(DELAY_EXCHANGE);
        exchange.setDelayed(true);
        return exchange;
    }

    @Bean
    public Binding bindOriginalToDelay() {
        return BindingBuilder.bind(new Queue(ORIGINAL_QUEUE)).to(delayExchange()).with(ORIGINAL_QUEUE);
    }

    @Bean
    public Queue parkingLot() {
        return new Queue(PARKING_LOT);
    }

}</programlisting>
</section>
<section xml:id="_partitioned_destinations">
<title>Partitioned Destinations</title>
<simpara>With partitioned destinations, there is one DLQ for all partitions. We determine the original queue from the headers.</simpara>
<section xml:id="__literal_republishtodlq_false_literal">
<title><literal>republishToDlq=false</literal></title>
<simpara>When <literal>republishToDlq</literal> is <literal>false</literal>, RabbitMQ publishes the message to the DLX/DLQ with an <literal>x-death</literal> header containing information about the original destination, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
public class ReRouteDlqApplication {

	private static final String ORIGINAL_QUEUE = "so8400in.so8400";

	private static final String DLQ = ORIGINAL_QUEUE + ".dlq";

	private static final String PARKING_LOT = ORIGINAL_QUEUE + ".parkingLot";

	private static final String X_DEATH_HEADER = "x-death";

	private static final String X_RETRIES_HEADER = "x-retries";

	public static void main(String[] args) throws Exception {
		ConfigurableApplicationContext context = SpringApplication.run(ReRouteDlqApplication.class, args);
		System.out.println("Hit enter to terminate");
		System.in.read();
		context.close();
	}

	@Autowired
	private RabbitTemplate rabbitTemplate;

	@SuppressWarnings("unchecked")
	@RabbitListener(queues = DLQ)
	public void rePublish(Message failedMessage) {
		Map&lt;String, Object&gt; headers = failedMessage.getMessageProperties().getHeaders();
		Integer retriesHeader = (Integer) headers.get(X_RETRIES_HEADER);
		if (retriesHeader == null) {
			retriesHeader = Integer.valueOf(0);
		}
		if (retriesHeader &lt; 3) {
			headers.put(X_RETRIES_HEADER, retriesHeader + 1);
			List&lt;Map&lt;String, ?&gt;&gt; xDeath = (List&lt;Map&lt;String, ?&gt;&gt;) headers.get(X_DEATH_HEADER);
			String exchange = (String) xDeath.get(0).get("exchange");
			List&lt;String&gt; routingKeys = (List&lt;String&gt;) xDeath.get(0).get("routing-keys");
			this.rabbitTemplate.send(exchange, routingKeys.get(0), failedMessage);
		}
		else {
			this.rabbitTemplate.send(PARKING_LOT, failedMessage);
		}
	}

	@Bean
	public Queue parkingLot() {
		return new Queue(PARKING_LOT);
	}

}</programlisting>
</section>
<section xml:id="__literal_republishtodlq_true_literal">
<title><literal>republishToDlq=true</literal></title>
<simpara>When <literal>republishToDlq</literal> is <literal>true</literal>, the republishing recoverer adds the original exchange and routing key to headers, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
public class ReRouteDlqApplication {

	private static final String ORIGINAL_QUEUE = "so8400in.so8400";

	private static final String DLQ = ORIGINAL_QUEUE + ".dlq";

	private static final String PARKING_LOT = ORIGINAL_QUEUE + ".parkingLot";

	private static final String X_RETRIES_HEADER = "x-retries";

	private static final String X_ORIGINAL_EXCHANGE_HEADER = RepublishMessageRecoverer.X_ORIGINAL_EXCHANGE;

	private static final String X_ORIGINAL_ROUTING_KEY_HEADER = RepublishMessageRecoverer.X_ORIGINAL_ROUTING_KEY;

	public static void main(String[] args) throws Exception {
		ConfigurableApplicationContext context = SpringApplication.run(ReRouteDlqApplication.class, args);
		System.out.println("Hit enter to terminate");
		System.in.read();
		context.close();
	}

	@Autowired
	private RabbitTemplate rabbitTemplate;

	@RabbitListener(queues = DLQ)
	public void rePublish(Message failedMessage) {
		Map&lt;String, Object&gt; headers = failedMessage.getMessageProperties().getHeaders();
		Integer retriesHeader = (Integer) headers.get(X_RETRIES_HEADER);
		if (retriesHeader == null) {
			retriesHeader = Integer.valueOf(0);
		}
		if (retriesHeader &lt; 3) {
			headers.put(X_RETRIES_HEADER, retriesHeader + 1);
			String exchange = (String) headers.get(X_ORIGINAL_EXCHANGE_HEADER);
			String originalRoutingKey = (String) headers.get(X_ORIGINAL_ROUTING_KEY_HEADER);
			this.rabbitTemplate.send(exchange, originalRoutingKey, failedMessage);
		}
		else {
			this.rabbitTemplate.send(PARKING_LOT, failedMessage);
		}
	}

	@Bean
	public Queue parkingLot() {
		return new Queue(PARKING_LOT);
	}

}</programlisting>
</section>
</section>
</section>
<section xml:id="_partitioning_with_the_rabbitmq_binder">
<title>Partitioning with the RabbitMQ Binder</title>
<simpara>RabbitMQ does not support partitioning natively.</simpara>
<simpara>Sometimes, it is advantageous to send data to specific partitions&#8201;&#8212;&#8201;for example, when you want to strictly order message processing, all messages for a particular customer should go to the same partition.</simpara>
<simpara>The <literal>RabbitMessageChannelBinder</literal> provides partitioning by binding a queue for each partition to the destination exchange.</simpara>
<simpara>The following Java and YAML examples show how to configure the producer:</simpara>
<formalpara>
<title>Producer</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Source.class)
public class RabbitPartitionProducerApplication {

    private static final Random RANDOM = new Random(System.currentTimeMillis());

    private static final String[] data = new String[] {
            "abc1", "def1", "qux1",
            "abc2", "def2", "qux2",
            "abc3", "def3", "qux3",
            "abc4", "def4", "qux4",
            };

    public static void main(String[] args) {
        new SpringApplicationBuilder(RabbitPartitionProducerApplication.class)
            .web(false)
            .run(args);
    }

    @InboundChannelAdapter(channel = Source.OUTPUT, poller = @Poller(fixedRate = "5000"))
    public Message&lt;?&gt; generate() {
        String value = data[RANDOM.nextInt(data.length)];
        System.out.println("Sending: " + value);
        return MessageBuilder.withPayload(value)
                .setHeader("partitionKey", value)
                .build();
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">    spring:
      cloud:
        stream:
          bindings:
            output:
              destination: partitioned.destination
              producer:
                partitioned: true
                partition-key-expression: headers['partitionKey']
                partition-count: 2
                required-groups:
                - myGroup</programlisting>
</para>
</formalpara>
<note>
<simpara>The configuration in the prececing example uses the default partitioning (<literal>key.hashCode() % partitionCount</literal>).
This may or may not provide a suitably balanced algorithm, depending on the key values.
You can override this default by using the <literal>partitionSelectorExpression</literal> or <literal>partitionSelectorClass</literal> properties.</simpara>
<simpara>The <literal>required-groups</literal> property is required only if you need the consumer queues to be provisioned when the producer is deployed.
Otherwise, any messages sent to a partition are lost until the corresponding consumer is deployed.</simpara>
</note>
<simpara>The following configuration provisions a topic exchange:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/part-exchange.png" width="50%" scalefit="1"/>
</imageobject>
<textobject><phrase>part exchange</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The following queues are bound to that exchange:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/part-queues.png" width="50%" scalefit="1"/>
</imageobject>
<textobject><phrase>part queues</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The following bindings associate the queues to the exchange:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/part-bindings.png" width="50%" scalefit="1"/>
</imageobject>
<textobject><phrase>part bindings</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The following Java and YAML examples continue the previous examples and show how to configure the consumer:</simpara>
<formalpara>
<title>Consumer</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableBinding(Sink.class)
public class RabbitPartitionConsumerApplication {

    public static void main(String[] args) {
        new SpringApplicationBuilder(RabbitPartitionConsumerApplication.class)
            .web(false)
            .run(args);
    }

    @StreamListener(Sink.INPUT)
    public void listen(@Payload String in, @Header(AmqpHeaders.CONSUMER_QUEUE) String queue) {
        System.out.println(in + " received from queue " + queue);
    }

}</programlisting>
</para>
</formalpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">    spring:
      cloud:
        stream:
          bindings:
            input:
              destination: partitioned.destination
              group: myGroup
              consumer:
                partitioned: true
                instance-index: 0</programlisting>
</para>
</formalpara>
<important>
<simpara>The <literal>RabbitMessageChannelBinder</literal> does not support dynamic scaling.
There must be at least one consumer per partition.
The consumer&#8217;s <literal>instanceIndex</literal> is used to indicate which partition is consumed.
Platforms such as Cloud Foundry can have only one instance with an <literal>instanceIndex</literal>.</simpara>
</important>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_bus">
<title>Spring Cloud Bus</title>
<partintro>
<simpara>Spring Cloud Bus links the nodes of a distributed system with a lightweight message
broker. This broker can then be used to broadcast state changes (such as configuration
changes) or other management instructions. A key idea is that the bus is like a
distributed actuator for a Spring Boot application that is scaled out. However, it can
also be used as a communication channel between apps. This project provides starters for
either an AMQP broker or Kafka as the transport.</simpara>
<note>
<simpara>Spring Cloud is released under the non-restrictive Apache 2.0 license. If you would like to contribute to this section of the documentation or if you find an error, please find the source code and issue trackers in the project at <link xl:href="https://github.com/spring-cloud/spring-cloud-config/tree/master/docs/src/main/asciidoc">github</link>.</simpara>
</note>
</partintro>
<chapter xml:id="_quick_start_3">
<title>Quick Start</title>
<simpara>Spring Cloud Bus works by adding Spring Boot autconfiguration if it detects itself on the
classpath. To enable the bus, add <literal>spring-cloud-starter-bus-amqp</literal> or
<literal>spring-cloud-starter-bus-kafka</literal> to your dependency management. Spring Cloud takes care of
the rest. Make sure the broker (RabbitMQ or Kafka) is available and configured. When
running on localhost, you need not do anything. If you run remotely, use Spring Cloud
Connectors or Spring Boot conventions to define the broker credentials, as shown in the
following example for Rabbit:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  rabbitmq:
    host: mybroker.com
    port: 5672
    username: user
    password: secret</screen>
</para>
</formalpara>
<simpara>The bus currently supports sending messages to all nodes listening or all nodes for a
particular service (as defined by Eureka). The <literal>/bus/*</literal> actuator namespace has some HTTP
endpoints. Currently, two are implemented. The first, <literal>/bus/env</literal>, sends key/value pairs to
update each node&#8217;s Spring Environment. The second, <literal>/bus/refresh</literal>, reloads each
application&#8217;s configuration, as though they had all been pinged on their <literal>/refresh</literal>
endpoint.</simpara>
<note>
<simpara>The Spring Cloud Bus starters cover Rabbit and Kafka, because those are the two most
common implementations. However, Spring Cloud Stream is quite flexible, and the binder
works with <literal>spring-cloud-bus</literal>.</simpara>
</note>
</chapter>
<chapter xml:id="_bus_endpoints">
<title>Bus Endpoints</title>
<simpara>Spring Cloud Bus provides two endpoints, <literal>/actuator/bus-refresh</literal> and <literal>/actuator/bus-env</literal>
that correspond to individual actuator endpoints in Spring Cloud Commons,
<literal>/actuator/refresh</literal> and <literal>/actuator/env</literal> respectively.</simpara>
<section xml:id="_bus_refresh_endpoint">
<title>Bus Refresh Endpoint</title>
<simpara>The <literal>/actuator/bus-refresh</literal> endpoint clears the <literal>RefreshScope</literal> cache and rebinds
<literal>@ConfigurationProperties</literal>. See the <link linkend="refresh-scope">Refresh Scope</link> documentation for
more information.</simpara>
<simpara>To expose the <literal>/actuator/bus-refresh</literal> endpoint, you need to add following configuration to your
application:</simpara>
<programlisting language="properties" linenumbering="unnumbered">management.endpoints.web.exposure.include=bus-refresh</programlisting>
</section>
<section xml:id="_bus_env_endpoint">
<title>Bus Env Endpoint</title>
<simpara>The <literal>/actuator/bus-env</literal> endpoint updates each instances environment with the specified
key/value pair across multiple instances.</simpara>
<simpara>To expose the <literal>/actuator/bus-env</literal> endpoint, you need to add following configuration to your
application:</simpara>
<programlisting language="properties" linenumbering="unnumbered">management.endpoints.web.exposure.include=bus-env</programlisting>
<simpara>The <literal>/actuator/bus-env</literal> endpoint accepts <literal>POST</literal> requests with the following shape:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
	"name": "key1",
	"value": "value1"
}</programlisting>
</section>
</chapter>
<chapter xml:id="_addressing_an_instance">
<title>Addressing an Instance</title>
<simpara>Each instance of the application has a service ID, whose value can be set with
<literal>spring.cloud.bus.id</literal> and whose value is expected to be a colon-separated list of
identifiers, in order from least specific to most specific. The default value is
constructed from the environment as a combination of the <literal>spring.application.name</literal> and
<literal>server.port</literal> (or <literal>spring.application.index</literal>, if set). The default value of the ID is
constructed in the form of <literal>app:index:id</literal>, where:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>app</literal> is the <literal>vcap.application.name</literal>, if it exists, or <literal>spring.application.name</literal></simpara>
</listitem>
<listitem>
<simpara><literal>index</literal> is the <literal>vcap.application.instance_index</literal>, if it exists,
<literal>spring.application.index</literal>, <literal>local.server.port</literal>, <literal>server.port</literal>, or <literal>0</literal> (in that order).</simpara>
</listitem>
<listitem>
<simpara><literal>id</literal> is the <literal>vcap.application.instance_id</literal>, if it exists, or a random value.</simpara>
</listitem>
</itemizedlist>
<simpara>The HTTP endpoints accept a &#8220;destination&#8221; path parameter, such as
<literal>/bus-refresh/customers:9000</literal>, where <literal>destination</literal> is a service ID. If the ID
is owned by an instance on the bus, it processes the message, and all other instances
ignore it.</simpara>
</chapter>
<chapter xml:id="_addressing_all_instances_of_a_service">
<title>Addressing All Instances of a Service</title>
<simpara>The &#8220;destination&#8221; parameter is used in a Spring <literal>PathMatcher</literal> (with the path separator
as a colon&#8201;&#8212;&#8201;<literal>:</literal>) to determine if an instance processes the message. Using the example
from earlier, <literal>/bus-env/customers:**</literal> targets all instances of the
&#8220;customers&#8221; service regardless of the rest of the service ID.</simpara>
</chapter>
<chapter xml:id="_service_id_must_be_unique">
<title>Service ID Must Be Unique</title>
<simpara>The bus tries twice to eliminate processing an event&#8201;&#8212;&#8201;once from the original
<literal>ApplicationEvent</literal> and once from the queue. To do so, it checks the sending service ID
against the current service ID. If multiple instances of a service have the same ID,
events are not processed. When running on a local machine, each service is on a different
port, and that port is part of the ID. Cloud Foundry supplies an index to differentiate.
To ensure that the ID is unique outside Cloud Foundry, set <literal>spring.application.index</literal> to
something unique for each instance of a service.</simpara>
</chapter>
<chapter xml:id="_customizing_the_message_broker">
<title>Customizing the Message Broker</title>
<simpara>Spring Cloud Bus uses <link xl:href="https://cloud.spring.io/spring-cloud-stream">Spring Cloud Stream</link> to
broadcast the messages. So, to get messages to flow, you need only include the binder
implementation of your choice in the classpath. There are convenient starters for the bus
with AMQP (RabbitMQ) and Kafka (<literal>spring-cloud-starter-bus-[amqp|kafka]</literal>). Generally
speaking, Spring Cloud Stream relies on Spring Boot autoconfiguration conventions for
configuring middleware. For instance, the AMQP broker address can be changed with
<literal>spring.rabbitmq.*</literal> configuration properties. Spring Cloud Bus has a handful of
native configuration properties in <literal>spring.cloud.bus.*</literal> (for example,
<literal>spring.cloud.bus.destination</literal> is the name of the topic to use as the external
middleware). Normally, the defaults suffice.</simpara>
<simpara>To learn more about how to customize the message broker settings, consult the Spring Cloud
Stream documentation.</simpara>
</chapter>
<chapter xml:id="_tracing_bus_events">
<title>Tracing Bus Events</title>
<simpara>Bus events (subclasses of <literal>RemoteApplicationEvent</literal>) can be traced by setting
<literal>spring.cloud.bus.trace.enabled=true</literal>. If you do so, the Spring Boot <literal>TraceRepository</literal>
(if it is present) shows each event sent and all the acks from each service instance. The
following example comes from the <literal>/trace</literal> endpoint:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "timestamp": "2015-11-26T10:24:44.411+0000",
  "info": {
    "signal": "spring.cloud.bus.ack",
    "type": "RefreshRemoteApplicationEvent",
    "id": "c4d374b7-58ea-4928-a312-31984def293b",
    "origin": "stores:8081",
    "destination": "*:**"
  }
  },
  {
  "timestamp": "2015-11-26T10:24:41.864+0000",
  "info": {
    "signal": "spring.cloud.bus.sent",
    "type": "RefreshRemoteApplicationEvent",
    "id": "c4d374b7-58ea-4928-a312-31984def293b",
    "origin": "customers:9000",
    "destination": "*:**"
  }
  },
  {
  "timestamp": "2015-11-26T10:24:41.862+0000",
  "info": {
    "signal": "spring.cloud.bus.ack",
    "type": "RefreshRemoteApplicationEvent",
    "id": "c4d374b7-58ea-4928-a312-31984def293b",
    "origin": "customers:9000",
    "destination": "*:**"
  }
}</programlisting>
<simpara>The preceding trace shows that a <literal>RefreshRemoteApplicationEvent</literal> was sent from
<literal>customers:9000</literal>, broadcast to all services, and received (acked) by <literal>customers:9000</literal> and
<literal>stores:8081</literal>.</simpara>
<simpara>To handle the ack signals yourself, you could add an <literal>@EventListener</literal> for the
<literal>AckRemoteApplicationEvent</literal> and <literal>SentApplicationEvent</literal> types to your app (and enable
tracing). Alternatively, you could tap into the <literal>TraceRepository</literal> and mine the data from
there.</simpara>
<note>
<simpara>Any Bus application can trace acks. However, sometimes, it is
useful to do this in a central service that can do more complex
queries on the data or forward it to a specialized tracing service.</simpara>
</note>
</chapter>
<chapter xml:id="_broadcasting_your_own_events">
<title>Broadcasting Your Own Events</title>
<simpara>The Bus can carry any event of type <literal>RemoteApplicationEvent</literal>. The default transport is
JSON, and the deserializer needs to know which types are going to be used ahead of time.
To register a new type, you must put it in a subpackage of
<literal>org.springframework.cloud.bus.event</literal>.</simpara>
<simpara>To customise the event name, you can use <literal>@JsonTypeName</literal> on your custom class or rely on
the default strategy, which is to use the simple name of the class.</simpara>
<note>
<simpara>Both the producer and the consumer need access to the class definition.</simpara>
</note>
<section xml:id="_registering_events_in_custom_packages">
<title>Registering events in custom packages</title>
<simpara>If you cannot or do not want to use a subpackage of <literal>org.springframework.cloud.bus.event</literal>
for your custom events, you must specify which packages to scan for events of type
<literal>RemoteApplicationEvent</literal> by using the <literal>@RemoteApplicationEventScan</literal> annotation. Packages
specified with <literal>@RemoteApplicationEventScan</literal> include subpackages.</simpara>
<simpara>For example, consider the following custom event, called <literal>MyEvent</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.acme;

public class MyEvent extends RemoteApplicationEvent {
    ...
}</programlisting>
<simpara>You can register that event with the deserializer in the following way:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.acme;

@Configuration
@RemoteApplicationEventScan
public class BusConfiguration {
    ...
}</programlisting>
<simpara>Without specifying a value, the package of the class where <literal>@RemoteApplicationEventScan</literal>
is used is registered. In this example, <literal>com.acme</literal> is registered by using the package of
<literal>BusConfiguration</literal>.</simpara>
<simpara>You can also explicitly specify the packages to scan by using the <literal>value</literal>, <literal>basePackages</literal>
or <literal>basePackageClasses</literal> properties on <literal>@RemoteApplicationEventScan</literal>, as shown in the
following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.acme;

@Configuration
//@RemoteApplicationEventScan({"com.acme", "foo.bar"})
//@RemoteApplicationEventScan(basePackages = {"com.acme", "foo.bar", "fizz.buzz"})
@RemoteApplicationEventScan(basePackageClasses = BusConfiguration.class)
public class BusConfiguration {
    ...
}</programlisting>
<simpara>All of the preceding examples of <literal>@RemoteApplicationEventScan</literal> are equivalent, in that the
<literal>com.acme</literal> package is registered by explicitly specifying the packages on
<literal>@RemoteApplicationEventScan</literal>.</simpara>
<note>
<simpara>You can specify multiple base packages to scan.</simpara>
</note>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_sleuth">
<title>Spring Cloud Sleuth</title>
<partintro>
<simpara>Adrian Cole, Spencer Gibb, Marcin Grzejszczak, Dave Syer, Jay Bryant</simpara>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
</partintro>
<chapter xml:id="_introduction">
<title>Introduction</title>
<simpara>Spring Cloud Sleuth implements a distributed tracing solution for <link xl:href="https://cloud.spring.io">Spring Cloud</link>.</simpara>
<section xml:id="_terminology">
<title>Terminology</title>
<simpara>Spring Cloud Sleuth borrows <link xl:href="https://research.google.com/pubs/pub36356.html">Dapper&#8217;s</link> terminology.</simpara>
<simpara><emphasis role="strong">Span</emphasis>: The basic unit of work. For example, sending an RPC is a new span, as is sending a response to an RPC.
Spans are identified by a unique 64-bit ID for the span and another 64-bit ID for the trace the span is a part of.
Spans also have other data, such as descriptions, timestamped events, key-value annotations (tags), the ID of the span that caused them, and process IDs (normally IP addresses).</simpara>
<simpara>Spans can be started and stopped, and they keep track of their timing information.
Once you create a span, you must stop it at some point in the future.</simpara>
<tip>
<simpara>The initial span that starts a trace is called a <literal>root span</literal>. The value of the ID
of that span is equal to the trace ID.</simpara>
</tip>
<simpara><emphasis role="strong">Trace:</emphasis> A set of spans forming a tree-like structure.
For example, if you run a distributed big-data store, a trace might be formed by a <literal>PUT</literal> request.</simpara>
<simpara><emphasis role="strong">Annotation:</emphasis>  Used to record the existence of an event in time. With
<link xl:href="https://github.com/openzipkin/brave">Brave</link> instrumentation, we no longer need to set special events
for <link xl:href="https://zipkin.io/">Zipkin</link> to understand who the client and server are, where
the request started, and where it ended. For learning purposes,
however, we mark these events to highlight what kind
of an action took place.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">cs</emphasis>: Client Sent. The client has made a request. This annotation indicates the start of the span.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">sr</emphasis>: Server Received: The server side got the request and started processing it.
Subtracting the <literal>cs</literal> timestamp from this timestamp reveals the network latency.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ss</emphasis>: Server Sent. Annotated upon completion of request processing (when the response got sent back to the client).
Subtracting the <literal>sr</literal> timestamp from this timestamp reveals the time needed by the server side to process the request.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">cr</emphasis>: Client Received. Signifies the end of the span.
The client has successfully received the response from the server side.
Subtracting the <literal>cs</literal> timestamp from this timestamp reveals the whole time needed by the client to receive the response from the server.</simpara>
</listitem>
</itemizedlist>
<simpara>The following image shows how <emphasis role="strong">Span</emphasis> and <emphasis role="strong">Trace</emphasis> look in a system, together with the Zipkin annotations:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/trace-id.png"/>
</imageobject>
<textobject><phrase>Trace Info propagation</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Each color of a note signifies a span (there are seven spans - from <emphasis role="strong">A</emphasis> to <emphasis role="strong">G</emphasis>).
Consider the following note:</simpara>
<screen>Trace Id = X
Span Id = D
Client Sent</screen>
<simpara>This note indicates that the current span has <emphasis role="strong">Trace Id</emphasis> set to <emphasis role="strong">X</emphasis> and <emphasis role="strong">Span Id</emphasis> set to <emphasis role="strong">D</emphasis>.
Also, the <literal>Client Sent</literal> event took place.</simpara>
<simpara>The following image shows how parent-child relationships of spans look:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/parents.png"/>
</imageobject>
<textobject><phrase>Parent child relationship</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_purpose">
<title>Purpose</title>
<simpara>The following sections refer to the example shown in the preceding image.</simpara>
<section xml:id="_distributed_tracing_with_zipkin">
<title>Distributed Tracing with Zipkin</title>
<simpara>This example has seven spans.
If you go to traces in Zipkin, you can see this number in the second trace, as shown in the following image:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/zipkin-traces.png"/>
</imageobject>
<textobject><phrase>Traces</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>However, if you pick a particular trace, you can see four spans, as shown in the following image:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/zipkin-ui.png"/>
</imageobject>
<textobject><phrase>Traces Info propagation</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>When you pick a particular trace, you see merged spans.
That means that, if there were two spans sent to Zipkin with Server Received and Server Sent or Client Received and Client Sent annotations, they are presented as a single span.</simpara>
</note>
<simpara>Why is there a difference between the seven and four spans in this case?</simpara>
<itemizedlist>
<listitem>
<simpara>Two spans come from the <literal>http:/start</literal> span. It has the Server Received (<literal>sr</literal>) and Server Sent (<literal>ss</literal>) annotations.</simpara>
</listitem>
<listitem>
<simpara>Two spans come from the RPC call from <literal>service1</literal> to <literal>service2</literal> to the <literal>http:/foo</literal> endpoint.
The Client Sent (<literal>cs</literal>) and Client Received (<literal>cr</literal>) events took place on the <literal>service1</literal> side.
Server Received (<literal>sr</literal>) and Server Sent (<literal>ss</literal>) events took place on the <literal>service2</literal> side.
These two spans form one logical span related to an RPC call.</simpara>
</listitem>
<listitem>
<simpara>Two spans come from the RPC call from <literal>service2</literal> to <literal>service3</literal> to the <literal>http:/bar</literal> endpoint.
The Client Sent (<literal>cs</literal>) and Client Received (<literal>cr</literal>) events took place on the <literal>service2</literal> side.
The Server Received (<literal>sr</literal>) and Server Sent (<literal>ss</literal>) events took place on the <literal>service3</literal> side.
These two spans form one logical span related to an RPC call.</simpara>
</listitem>
<listitem>
<simpara>Two spans come from the RPC call from <literal>service2</literal> to <literal>service4</literal> to the <literal>http:/baz</literal> endpoint.
The Client Sent (<literal>cs</literal>) and Client Received (<literal>cr</literal>) events took place on the <literal>service2</literal> side.
Server Received (<literal>sr</literal>) and Server Sent (<literal>ss</literal>) events took place on the <literal>service4</literal> side.
These two spans form one logical span related to an RPC call.</simpara>
</listitem>
</itemizedlist>
<simpara>So, if we count the physical spans, we have one from <literal>http:/start</literal>, two from <literal>service1</literal> calling <literal>service2</literal>, two from <literal>service2</literal>
calling <literal>service3</literal>, and two from <literal>service2</literal> calling <literal>service4</literal>. In sum, we have a total of seven spans.</simpara>
<simpara>Logically, we see the information of four total Spans because we have one span related to the incoming request
to <literal>service1</literal> and three spans related to RPC calls.</simpara>
</section>
<section xml:id="_visualizing_errors">
<title>Visualizing errors</title>
<simpara>Zipkin lets you visualize errors in your trace.
When an exception was thrown and was not caught, we set proper tags on the span, which Zipkin can then properly colorize.
You could see in the list of traces one trace that is red. That appears because an exception was thrown.</simpara>
<simpara>If you click that trace, you see a similar picture, as follows:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/zipkin-error-traces.png"/>
</imageobject>
<textobject><phrase>Error Traces</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If you then click on one of the spans, you see the following</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/zipkin-error-trace-screenshot.png"/>
</imageobject>
<textobject><phrase>Error Traces Info propagation</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The span shows the reason for the error and the whole stack trace related to it.</simpara>
</section>
<section xml:id="_distributed_tracing_with_brave">
<title>Distributed Tracing with Brave</title>
<simpara>Starting with version <literal>2.0.0</literal>, Spring Cloud Sleuth uses <link xl:href="https://github.com/openzipkin/brave">Brave</link> as the tracing library.
Consequently, Sleuth no longer takes care of storing the context but delegates that work to Brave.</simpara>
<simpara>Due to the fact that Sleuth had different naming and tagging conventions than Brave, we decided to follow Brave&#8217;s conventions from now on.
However, if you want to use the legacy Sleuth approaches, you can set the <literal>spring.sleuth.http.legacy.enabled</literal> property to <literal>true</literal>.</simpara>
</section>
<section xml:id="_live_examples">
<title>Live examples</title>
<figure>
<title>Click the Pivotal Web Services icon to see it live!</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/pws.png" contentwidth="150" contentdepth="74"/>
</imageobject>
<textobject><phrase>Zipkin deployed on Pivotal Web Services</phrase></textobject>
</mediaobject>
</figure>
<simpara><link xl:href="https://docssleuth-zipkin-server.cfapps.io/">Click here to see it live!</link></simpara>
<simpara>The dependency graph in Zipkin should resemble the following image:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/dependencies.png"/>
</imageobject>
<textobject><phrase>Dependencies</phrase></textobject>
</mediaobject>
</informalfigure>
<figure>
<title>Click the Pivotal Web Services icon to see it live!</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/pws.png" contentwidth="150" contentdepth="74"/>
</imageobject>
<textobject><phrase>Zipkin deployed on Pivotal Web Services</phrase></textobject>
</mediaobject>
</figure>
<simpara><link xl:href="https://docssleuth-zipkin-server.cfapps.io/dependency">Click here to see it live!</link></simpara>
</section>
<section xml:id="_log_correlation">
<title>Log correlation</title>
<simpara>When using grep to read the logs of those four applications by scanning for a trace ID equal to (for example) <literal>2485ec27856c56f4</literal>, you get output resembling the following:</simpara>
<screen>service1.log:2016-02-26 11:15:47.561  INFO [service1,2485ec27856c56f4,2485ec27856c56f4,true] 68058 --- [nio-8081-exec-1] i.s.c.sleuth.docs.service1.Application   : Hello from service1. Calling service2
service2.log:2016-02-26 11:15:47.710  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Hello from service2. Calling service3 and then service4
service3.log:2016-02-26 11:15:47.895  INFO [service3,2485ec27856c56f4,1210be13194bfe5,true] 68060 --- [nio-8083-exec-1] i.s.c.sleuth.docs.service3.Application   : Hello from service3
service2.log:2016-02-26 11:15:47.924  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Got response from service3 [Hello from service3]
service4.log:2016-02-26 11:15:48.134  INFO [service4,2485ec27856c56f4,1b1845262ffba49d,true] 68061 --- [nio-8084-exec-1] i.s.c.sleuth.docs.service4.Application   : Hello from service4
service2.log:2016-02-26 11:15:48.156  INFO [service2,2485ec27856c56f4,9aa10ee6fbde75fa,true] 68059 --- [nio-8082-exec-1] i.s.c.sleuth.docs.service2.Application   : Got response from service4 [Hello from service4]
service1.log:2016-02-26 11:15:48.182  INFO [service1,2485ec27856c56f4,2485ec27856c56f4,true] 68058 --- [nio-8081-exec-1] i.s.c.sleuth.docs.service1.Application   : Got response from service2 [Hello from service2, response from service3 [Hello from service3] and from service4 [Hello from service4]]</screen>
<simpara>If you use a log aggregating tool (such as <link xl:href="https://www.elastic.co/products/kibana">Kibana</link>, <link xl:href="https://www.splunk.com/">Splunk</link>, and others), you can order the events that took place.
An example from Kibana would resemble the following image:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-sleuth/master/docs/src/main/asciidoc/images/kibana.png"/>
</imageobject>
<textobject><phrase>Log correlation with Kibana</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>If you want to use <link xl:href="https://www.elastic.co/guide/en/logstash/current/index.html">Logstash</link>, the following listing shows the Grok pattern for Logstash:</simpara>
<screen>filter {
       # pattern matching logback pattern
       grok {
              match =&gt; { "message" =&gt; "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:severity}\s+\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\]\s+%{DATA:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:class}\s+:\s+%{GREEDYDATA:rest}" }
       }
}</screen>
<note>
<simpara>If you want to use Grok together with the logs from Cloud Foundry, you have to use the following pattern:</simpara>
</note>
<screen>filter {
       # pattern matching logback pattern
       grok {
              match =&gt; { "message" =&gt; "(?m)OUT\s+%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:severity}\s+\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\]\s+%{DATA:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:class}\s+:\s+%{GREEDYDATA:rest}" }
       }
}</screen>
<section xml:id="_json_logback_with_logstash">
<title>JSON Logback with Logstash</title>
<simpara>Often, you do not want to store your logs in a text file but in a JSON file that Logstash can immediately pick.
To do so, you have to do the following (for readability, we pass the dependencies in the <literal>groupId:artifactId:version</literal> notation).</simpara>
<simpara><emphasis role="strong">Dependencies Setup</emphasis></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Ensure that Logback is on the classpath (<literal>ch.qos.logback:logback-core</literal>).</simpara>
</listitem>
<listitem>
<simpara>Add Logstash Logback encode. For example, to use version <literal>4.6</literal>, add <literal>net.logstash.logback:logstash-logback-encoder:4.6</literal>.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Logback Setup</emphasis></simpara>
<simpara>Consider the following example of a Logback configuration file (named <link xl:href="https://github.com/spring-cloud-samples/sleuth-documentation-apps/blob/master/service1/src/main/resources/logback-spring.xml">logback-spring.xml</link>).</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configuration&gt;
	&lt;include resource="org/springframework/boot/logging/logback/defaults.xml"/&gt;
	​
	&lt;springProperty scope="context" name="springAppName" source="spring.application.name"/&gt;
	&lt;!-- Example for logging into the build folder of your project --&gt;
	&lt;property name="LOG_FILE" value="${BUILD_FOLDER:-build}/${springAppName}"/&gt;​

	&lt;!-- You can override this to have a custom pattern --&gt;
	&lt;property name="CONSOLE_LOG_PATTERN"
			  value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/&gt;

	&lt;!-- Appender to log to console --&gt;
	&lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt;
		&lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;
			&lt;!-- Minimum logging level to be presented in the console logs--&gt;
			&lt;level&gt;DEBUG&lt;/level&gt;
		&lt;/filter&gt;
		&lt;encoder&gt;
			&lt;pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/pattern&gt;
			&lt;charset&gt;utf8&lt;/charset&gt;
		&lt;/encoder&gt;
	&lt;/appender&gt;

	&lt;!-- Appender to log to file --&gt;​
	&lt;appender name="flatfile" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
		&lt;file&gt;${LOG_FILE}&lt;/file&gt;
		&lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
			&lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
			&lt;maxHistory&gt;7&lt;/maxHistory&gt;
		&lt;/rollingPolicy&gt;
		&lt;encoder&gt;
			&lt;pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/pattern&gt;
			&lt;charset&gt;utf8&lt;/charset&gt;
		&lt;/encoder&gt;
	&lt;/appender&gt;
	​
	&lt;!-- Appender to log to file in a JSON format --&gt;
	&lt;appender name="logstash" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt;
		&lt;file&gt;${LOG_FILE}.json&lt;/file&gt;
		&lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt;
			&lt;fileNamePattern&gt;${LOG_FILE}.json.%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
			&lt;maxHistory&gt;7&lt;/maxHistory&gt;
		&lt;/rollingPolicy&gt;
		&lt;encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder"&gt;
			&lt;providers&gt;
				&lt;timestamp&gt;
					&lt;timeZone&gt;UTC&lt;/timeZone&gt;
				&lt;/timestamp&gt;
				&lt;pattern&gt;
					&lt;pattern&gt;
						{
						"severity": "%level",
						"service": "${springAppName:-}",
						"trace": "%X{X-B3-TraceId:-}",
						"span": "%X{X-B3-SpanId:-}",
						"parent": "%X{X-B3-ParentSpanId:-}",
						"exportable": "%X{X-Span-Export:-}",
						"pid": "${PID:-}",
						"thread": "%thread",
						"class": "%logger{40}",
						"rest": "%message"
						}
					&lt;/pattern&gt;
				&lt;/pattern&gt;
			&lt;/providers&gt;
		&lt;/encoder&gt;
	&lt;/appender&gt;
	​
	&lt;root level="INFO"&gt;
		&lt;appender-ref ref="console"/&gt;
		&lt;!-- uncomment this to have also JSON logs --&gt;
		&lt;!--&lt;appender-ref ref="logstash"/&gt;--&gt;
		&lt;!--&lt;appender-ref ref="flatfile"/&gt;--&gt;
	&lt;/root&gt;
&lt;/configuration&gt;</programlisting>
<simpara>That Logback configuration file:</simpara>
<itemizedlist>
<listitem>
<simpara>Logs information from the application in a JSON format to a <literal>build/${spring.application.name}.json</literal> file.</simpara>
</listitem>
<listitem>
<simpara>Has commented out two additional appenders: console and standard log file.</simpara>
</listitem>
<listitem>
<simpara>Has the same logging pattern as the one presented in the previous section.</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>If you use a custom <literal>logback-spring.xml</literal>, you must pass the <literal>spring.application.name</literal> in the  <literal>bootstrap</literal> rather than the <literal>application</literal> property file.
Otherwise, your custom logback file does not properly read the property.</simpara>
</note>
</section>
</section>
<section xml:id="_propagating_span_context">
<title>Propagating Span Context</title>
<simpara>The span context is the state that must get propagated to any child spans across process boundaries.
Part of the Span Context is the Baggage. The trace and span IDs are a required part of the span context.
Baggage is an optional part.</simpara>
<simpara>Baggage is a set of key:value pairs stored in the span context.
Baggage travels together with the trace and is attached to every span.
Spring Cloud Sleuth understands that a header is baggage-related if the HTTP header is prefixed with <literal>baggage-</literal> and, for messaging, it starts with <literal>baggage_</literal>.</simpara>
<important>
<simpara>There is currently no limitation of the count or size of baggage items.
However, keep in mind that too many can decrease system throughput or increase RPC latency.
In extreme cases, too much baggage can crash the application, due to exceeding transport-level message or header capacity.</simpara>
</important>
<simpara>The following example shows setting baggage on a span:</simpara>
<programlisting language="java" linenumbering="unnumbered">Span initialSpan = this.tracer.nextSpan().name("span").start();
try (Tracer.SpanInScope ws = this.tracer.withSpanInScope(initialSpan)) {
	ExtraFieldPropagation.set("foo", "bar");
	ExtraFieldPropagation.set("UPPER_CASE", "someValue");
}</programlisting>
<section xml:id="_baggage_versus_span_tags">
<title>Baggage versus Span Tags</title>
<simpara>Baggage travels with the trace (every child span contains the baggage of its parent).
Zipkin has no knowledge of baggage and does not receive that information.</simpara>
<important>
<simpara>Starting from Sleuth 2.0.0 you have to pass the baggage key names explicitly
in your project configuration. Read more about that setup <link linkend="prefixed-fields">here</link></simpara>
</important>
<simpara>Tags are attached to a specific span. In other words, they are presented only for that particular span.
However, you can search by tag to find the trace, assuming a span having the searched tag value exists.</simpara>
<simpara>If you want to be able to lookup a span based on baggage, you should add a corresponding entry as a tag in the root span.</simpara>
<important>
<simpara>The span must be in scope.</simpara>
</important>
<simpara>The following listing shows integration tests that use baggage:</simpara>
<formalpara>
<title>The setup</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">spring.sleuth:
  baggage-keys:
    - baz
    - bizarrecase
  propagation-keys:
    - foo
    - upper_case</programlisting>
</para>
</formalpara>
<formalpara>
<title>The code</title>
<para>
<programlisting language="java" linenumbering="unnumbered">initialSpan.tag("foo",
		ExtraFieldPropagation.get(initialSpan.context(), "foo"));
initialSpan.tag("UPPER_CASE",
		ExtraFieldPropagation.get(initialSpan.context(), "UPPER_CASE"));</programlisting>
</para>
</formalpara>
</section>
</section>
</section>
<section xml:id="sleuth-adding-project">
<title>Adding Sleuth to the Project</title>
<simpara>This section addresses how to add Sleuth to your project with either Maven or Gradle.</simpara>
<important>
<simpara>To ensure that your application name is properly displayed in Zipkin, set the <literal>spring.application.name</literal> property in <literal>bootstrap.yml</literal>.</simpara>
</important>
<section xml:id="_only_sleuth_log_correlation">
<title>Only Sleuth (log correlation)</title>
<simpara>If you want to use only Spring Cloud Sleuth without the Zipkin integration, add the <literal>spring-cloud-starter-sleuth</literal> module to your project.</simpara>
<simpara>The following example shows how to add Sleuth with Maven:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt; <co xml:id="CO1-1"/>
      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
              &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
              &lt;version&gt;${release.train.version}&lt;/version&gt;
              &lt;type&gt;pom&lt;/type&gt;
              &lt;scope&gt;import&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;dependency&gt; <co xml:id="CO1-2"/>
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO1-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO1-2">
<para>Add the dependency to <literal>spring-cloud-starter-sleuth</literal>.</para>
</callout>
</calloutlist>
<simpara>The following example shows how to add Sleuth with Gradle:</simpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">dependencyManagement { <co xml:id="CO2-1"/>
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
    }
}

dependencies { <co xml:id="CO2-2"/>
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO2-2">
<para>Add the dependency to <literal>spring-cloud-starter-sleuth</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_sleuth_with_zipkin_via_http">
<title>Sleuth with Zipkin via HTTP</title>
<simpara>If you want both Sleuth and Zipkin, add the <literal>spring-cloud-starter-zipkin</literal> dependency.</simpara>
<simpara>The following example shows how to do so for Maven:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt; <co xml:id="CO3-1"/>
      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
              &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
              &lt;version&gt;${release.train.version}&lt;/version&gt;
              &lt;type&gt;pom&lt;/type&gt;
              &lt;scope&gt;import&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;dependency&gt; <co xml:id="CO3-2"/>
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO3-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO3-2">
<para>Add the dependency to <literal>spring-cloud-starter-zipkin</literal>.</para>
</callout>
</calloutlist>
<simpara>The following example shows how to do so for Gradle:</simpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">dependencyManagement { <co xml:id="CO4-1"/>
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
    }
}

dependencies { <co xml:id="CO4-2"/>
    compile "org.springframework.cloud:spring-cloud-starter-zipkin"
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO4-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO4-2">
<para>Add the dependency to <literal>spring-cloud-starter-zipkin</literal>.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_sleuth_with_zipkin_over_rabbitmq_or_kafka">
<title>Sleuth with Zipkin over RabbitMQ or Kafka</title>
<simpara>If you want to use RabbitMQ or Kafka instead of HTTP, add the <literal>spring-rabbit</literal> or <literal>spring-kafka</literal> dependency.
The default destination name is <literal>zipkin</literal>.</simpara>
<caution>
<simpara><literal>spring-cloud-sleuth-stream</literal> is deprecated and incompatible with these destinations.</simpara>
</caution>
<simpara>If you want Sleuth over RabbitMQ, add the <literal>spring-cloud-starter-zipkin</literal> and <literal>spring-rabbit</literal>
dependencies.</simpara>
<simpara>The following example shows how to do so for Gradle:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt; <co xml:id="CO5-1"/>
      &lt;dependencies&gt;
          &lt;dependency&gt;
              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
              &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
              &lt;version&gt;${release.train.version}&lt;/version&gt;
              &lt;type&gt;pom&lt;/type&gt;
              &lt;scope&gt;import&lt;/scope&gt;
          &lt;/dependency&gt;
      &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;dependency&gt; <co xml:id="CO5-2"/>
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt; <co xml:id="CO5-3"/>
    &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;
    &lt;artifactId&gt;spring-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO5-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO5-2">
<para>Add the dependency to <literal>spring-cloud-starter-zipkin</literal>. That way, all nested dependencies get downloaded.</para>
</callout>
<callout arearefs="CO5-3">
<para>To automatically configure RabbitMQ, add the <literal>spring-rabbit</literal> dependency.</para>
</callout>
</calloutlist>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">dependencyManagement { <co xml:id="CO6-1"/>
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}"
    }
}

dependencies {
    compile "org.springframework.cloud:spring-cloud-starter-zipkin" <co xml:id="CO6-2"/>
    compile "org.springframework.amqp:spring-rabbit" <co xml:id="CO6-3"/>
}</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO6-1">
<para>We recommend that you add the dependency management through the Spring BOM so that you need not manage versions yourself.</para>
</callout>
<callout arearefs="CO6-2">
<para>Add the dependency to <literal>spring-cloud-starter-zipkin</literal>. That way, all nested dependencies get downloaded.</para>
</callout>
<callout arearefs="CO6-3">
<para>To automatically configure RabbitMQ, add the <literal>spring-rabbit</literal> dependency.</para>
</callout>
</calloutlist>
</section>
</section>
</chapter>
<chapter xml:id="_additional_resources">
<title>Additional Resources</title>
<simpara>You can watch a video of <link xl:href="https://twitter.com/reshmi9k">Reshmi Krishna</link> and <link xl:href="https://twitter.com/mgrzejszczak">Marcin Grzejszczak</link> talking about Spring Cloud
Sleuth and Zipkin <link xl:href="https://content.pivotal.io/springone-platform-2017/distributed-tracing-latency-analysis-for-your-microservices-grzejszczak-krishna">by clicking here</link>.</simpara>
<simpara>You can check different setups of Sleuth and Brave <link xl:href="https://github.com/openzipkin/sleuth-webmvc-example">in the openzipkin/sleuth-webmvc-example repository</link>.</simpara>
</chapter>
<chapter xml:id="_features_2">
<title>Features</title>
<itemizedlist>
<listitem>
<simpara>Adds trace and span IDs to the Slf4J MDC, so you can extract all the logs from a given trace or span in a log aggregator, as shown in the following example logs:</simpara>
<screen>2016-02-02 15:30:57.902  INFO [bar,6bfd228dc00d216b,6bfd228dc00d216b,false] 23030 --- [nio-8081-exec-3] ...
2016-02-02 15:30:58.372 ERROR [bar,6bfd228dc00d216b,6bfd228dc00d216b,false] 23030 --- [nio-8081-exec-3] ...
2016-02-02 15:31:01.936  INFO [bar,46ab0d418373cbc9,46ab0d418373cbc9,false] 23030 --- [nio-8081-exec-4] ...</screen>
<simpara>Notice the <literal>[appname,traceId,spanId,exportable]</literal> entries from the MDC:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><literal>spanId</literal></emphasis>: The ID of a specific operation that took place.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>appname</literal></emphasis>: The name of the application that logged the span.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>traceId</literal></emphasis>: The ID of the latency graph that contains the span.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong"><literal>exportable</literal></emphasis>: Whether the log should be exported to Zipkin.
When would you like the span not to be exportable?
When you want to wrap some operation in a Span and have it written to the logs only.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Provides an abstraction over common distributed tracing data models: traces, spans (forming a DAG), annotations, and key-value annotations.
Spring Cloud Sleuth is loosely based on HTrace but is compatible with Zipkin (Dapper).</simpara>
</listitem>
<listitem>
<simpara>Sleuth records timing information to aid in latency analysis.
By using sleuth, you can pinpoint causes of latency in your applications.</simpara>
</listitem>
<listitem>
<simpara>Sleuth is written to not log too much and to not cause your production application to crash.
To that end, Sleuth:</simpara>
<itemizedlist>
<listitem>
<simpara>Propagates structural data about your call graph in-band and the rest out-of-band.</simpara>
</listitem>
<listitem>
<simpara>Includes opinionated instrumentation of layers such as HTTP.</simpara>
</listitem>
<listitem>
<simpara>Includes a sampling policy to manage volume.</simpara>
</listitem>
<listitem>
<simpara>Can report to a Zipkin system for query and visualization.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>Instruments common ingress and egress points from Spring applications (servlet filter, async endpoints, rest template, scheduled actions, message channels, Zuul filters, and Feign client).</simpara>
</listitem>
<listitem>
<simpara>Sleuth includes default logic to join a trace across HTTP or messaging boundaries.
For example, HTTP propagation works over Zipkin-compatible request headers.</simpara>
</listitem>
<listitem>
<simpara>Sleuth can propagate context (also known as baggage) between processes.
Consequently, if you set  a baggage element on a Span, it is sent downstream to other processes over either HTTP or messaging.</simpara>
</listitem>
<listitem>
<simpara>Provides a way to create or continue spans and add tags and logs through annotations.</simpara>
</listitem>
<listitem>
<simpara>If <literal>spring-cloud-sleuth-zipkin</literal> is on the classpath, the app generates and collects Zipkin-compatible traces.
By default, it sends them over HTTP to a Zipkin server on localhost (port 9411).
You can configure the location of the service by setting <literal>spring.zipkin.baseUrl</literal>.</simpara>
<itemizedlist>
<listitem>
<simpara>If you depend on <literal>spring-rabbit</literal> or <literal>spring-kafka</literal>, your app sends traces to a broker instead of HTTP.
**</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<caution>
<simpara><literal>spring-cloud-sleuth-stream</literal> is deprecated and should no longer be used.</simpara>
</caution>
<itemizedlist>
<listitem>
<simpara>Spring Cloud Sleuth is <link xl:href="https://opentracing.io/">OpenTracing</link> compatible.</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>If you use Zipkin, configure the probability of spans exported by setting <literal>spring.sleuth.sampler.probability</literal>
(default: 0.1, which is 10 percent). Otherwise, you might think that Sleuth is not working be cause it omits some spans.</simpara>
</important>
<note>
<simpara>The SLF4J MDC is always set and logback users immediately see the trace and span IDs in logs per the example
shown earlier.
Other logging systems have to configure their own formatter to get the same result.
The default is as follows:
<literal>logging.pattern.level</literal> set to <literal>%5p [${spring.zipkin.service.name:${spring.application.name:-}},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}]</literal>
(this is a Spring Boot feature for logback users).
If you do not use SLF4J, this pattern is NOT automatically applied.</simpara>
</note>
<section xml:id="_introduction_to_brave">
<title>Introduction to Brave</title>
<important>
<simpara>Starting with version <literal>2.0.0</literal>, Spring Cloud Sleuth uses
<link xl:href="https://github.com/openzipkin/brave">Brave</link> as the tracing library.
For your convenience, we embed part of the Brave&#8217;s docs here.</simpara>
</important>
<important>
<simpara>In the vast majority of cases you need to just use the <literal>Tracer</literal>
or <literal>SpanCustomizer</literal> beans from Brave that Sleuth provides. The documentation below contains
a high overview of what Brave is and how it works.</simpara>
</important>
<simpara>Brave is a library used to capture and report latency information about distributed operations to Zipkin.
Most users do not use Brave directly. They use libraries or frameworks rather than employ Brave on their behalf.</simpara>
<simpara>This module includes a tracer that creates and joins spans that model the latency of potentially distributed work.
It also includes libraries to propagate the trace context over network boundaries (for example, with HTTP headers).</simpara>
<section xml:id="_tracing">
<title>Tracing</title>
<simpara>Most importantly, you need a <literal>brave.Tracer</literal>, configured to <link xl:href="https://github.com/openzipkin/zipkin-reporter-java">report to Zipkin</link>.</simpara>
<simpara>The following example setup sends trace data (spans) to Zipkin over HTTP (as opposed to Kafka):</simpara>
<programlisting language="java" linenumbering="unnumbered">class MyClass {

    private final Tracer tracer;

    // Tracer will be autowired
    MyClass(Tracer tracer) {
        this.tracer = tracer;
    }

    void doSth() {
        Span span = tracer.newTrace().name("encode").start();
        // ...
    }
}</programlisting>
<important>
<simpara>If your span contains a name longer than 50 chars, then that name is truncated to 50 chars.
Your names have to be explicit and concrete.
Big names lead to latency issues and sometimes even thrown exceptions.</simpara>
</important>
<simpara>The tracer creates and joins spans that model the latency of potentially distributed work.
It can employ sampling to reduce overhead during the process, to reduce the amount of data sent to Zipkin, or both.</simpara>
<simpara>Spans returned by a tracer report data to Zipkin when finished or do nothing if unsampled.
After starting a span, you can annotate events of interest or add tags containing details or lookup keys.</simpara>
<simpara>Spans have a context that includes trace identifiers that place the span at the correct spot in the tree representing the distributed operation.</simpara>
</section>
<section xml:id="_local_tracing">
<title>Local Tracing</title>
<simpara>When tracing local code, you can run it inside a span, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

Span span = tracer.newTrace().name("encode").start();
try {
  doSomethingExpensive();
} finally {
  span.finish();
}</programlisting>
<simpara>In the preceding example, the span is the root of the trace.
In many cases, the span is part of an existing trace.
When this is the case, call <literal>newChild</literal> instead of <literal>newTrace</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

Span span = tracer.newChild(root.context()).name("encode").start();
try {
  doSomethingExpensive();
} finally {
  span.finish();
}</programlisting>
</section>
<section xml:id="_customizing_spans">
<title>Customizing Spans</title>
<simpara>Once you have a span, you can add tags to it.
The tags can be used as lookup keys or details.
For example, you might add a tag with your runtime version, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">span.tag("clnt/finagle.version", "6.36.0");</programlisting>
<simpara>When exposing the ability to customize spans to third parties, prefer <literal>brave.SpanCustomizer</literal> as opposed to <literal>brave.Span</literal>.
The former is simpler to understand and test and does not tempt users with span lifecycle hooks.</simpara>
<programlisting language="java" linenumbering="unnumbered">interface MyTraceCallback {
  void request(Request request, SpanCustomizer customizer);
}</programlisting>
<simpara>Since <literal>brave.Span</literal> implements <literal>brave.SpanCustomizer</literal>, you can pass it to users, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">for (MyTraceCallback callback : userCallbacks) {
  callback.request(request, span);
}</programlisting>
</section>
<section xml:id="_implicitly_looking_up_the_current_span">
<title>Implicitly Looking up the Current Span</title>
<simpara>Sometimes, you do not know if a trace is in progress or not, and you do not want users to do null checks.
<literal>brave.CurrentSpanCustomizer</literal> handles this problem by adding data to any span that&#8217;s in progress or drops, as shown in the following example:</simpara>
<simpara>Ex.</simpara>
<programlisting language="java" linenumbering="unnumbered">// The user code can then inject this without a chance of it being null.
@Autowired SpanCustomizer span;

void userCode() {
  span.annotate("tx.started");
  ...
}</programlisting>
</section>
<section xml:id="_rpc_tracing">
<title>RPC tracing</title>
<tip>
<simpara>Check for <link xl:href="https://github.com/openzipkin/sleuth/tree/master/instrumentation">instrumentation written here</link> and <link xl:href="https://zipkin.io/pages/existing_instrumentations.html">Zipkin&#8217;s list</link> before rolling your own RPC instrumentation.</simpara>
</tip>
<simpara>RPC tracing is often done automatically by interceptors. Behind the scenes, they add tags and events that relate to their role in an RPC operation.</simpara>
<simpara>The following example shows how to add a client span:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

// before you send a request, add metadata that describes the operation
span = tracer.newTrace().name("get").type(CLIENT);
span.tag("clnt/finagle.version", "6.36.0");
span.tag(TraceKeys.HTTP_PATH, "/api");
span.remoteEndpoint(Endpoint.builder()
    .serviceName("backend")
    .ipv4(127 &lt;&lt; 24 | 1)
    .port(8080).build());

// when the request is scheduled, start the span
span.start();

// if you have callbacks for when data is on the wire, note those events
span.annotate(Constants.WIRE_SEND);
span.annotate(Constants.WIRE_RECV);

// when the response is complete, finish the span
span.finish();</programlisting>
<section xml:id="_one_way_tracing">
<title>One-Way tracing</title>
<simpara>Sometimes, you need to model an asynchronous operation where there is a
request but no response. In normal RPC tracing, you use <literal>span.finish()</literal>
to indicate that the response was received. In one-way tracing, you use
<literal>span.flush()</literal> instead, as you do not expect a response.</simpara>
<simpara>The following example shows how a client might model a one-way operation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

// start a new span representing a client request
oneWaySend = tracer.newSpan(parent).kind(Span.Kind.CLIENT);

// Add the trace context to the request, so it can be propagated in-band
tracing.propagation().injector(Request::addHeader)
                     .inject(oneWaySend.context(), request);

// fire off the request asynchronously, totally dropping any response
request.execute();

// start the client side and flush instead of finish
oneWaySend.start().flush();</programlisting>
<simpara>The following example shows how a server might handle a one-way operation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracing tracing;
@Autowired Tracer tracer;

// pull the context out of the incoming request
extractor = tracing.propagation().extractor(Request::getHeader);

// convert that context to a span which you can name and add tags to
oneWayReceive = nextSpan(tracer, extractor.extract(request))
    .name("process-request")
    .kind(SERVER)
    ... add tags etc.

// start the server side and flush instead of finish
oneWayReceive.start().flush();

// you should not modify this span anymore as it is complete. However,
// you can create children to represent follow-up work.
next = tracer.newSpan(oneWayReceive.context()).name("step2").start();</programlisting>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_sampling">
<title>Sampling</title>
<simpara>Sampling may be employed to reduce the data collected and reported out of process.
When a span is not sampled, it adds no overhead (a noop).</simpara>
<simpara>Sampling is an up-front decision, meaning that the decision to report data is made at the first operation in a trace and that decision is propagated downstream.</simpara>
<simpara>By default, a global sampler applies a single rate to all traced operations.
<literal>Tracer.Builder.sampler</literal> controls this setting, and it defaults to tracing every request.</simpara>
<section xml:id="_declarative_sampling">
<title>Declarative sampling</title>
<simpara>Some applications need to sample based on the type or annotations of a java method.</simpara>
<simpara>Most users use a framework interceptor to automate this sort of policy.
The following example shows how that might work internally:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracing tracing;

// derives a sample rate from an annotation on a java method
DeclarativeSampler&lt;Traced&gt; sampler = DeclarativeSampler.create(Traced::sampleRate);

@Around("@annotation(traced)")
public Object traceThing(ProceedingJoinPoint pjp, Traced traced) throws Throwable {
  Span span = tracing.tracer().newTrace(sampler.sample(traced))...
  try {
    return pjp.proceed();
  } finally {
    span.finish();
  }
}</programlisting>
</section>
<section xml:id="_custom_sampling">
<title>Custom sampling</title>
<simpara>Depending on what the operation is, you may want to apply different policies.
For example, you might not want to trace requests to static resources such as images, or you might want to trace all requests to a new api.</simpara>
<simpara>Most users use a framework interceptor to automate this sort of policy.
The following example shows how that might work internally:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

Span newTrace(Request input) {
  SamplingFlags flags = SamplingFlags.NONE;
  if (input.url().startsWith("/experimental")) {
    flags = SamplingFlags.SAMPLED;
  } else if (input.url().startsWith("/static")) {
    flags = SamplingFlags.NOT_SAMPLED;
  }
  return tracer.newTrace(flags);
}</programlisting>
</section>
<section xml:id="_sampling_in_spring_cloud_sleuth">
<title>Sampling in Spring Cloud Sleuth</title>
<simpara>By default Spring Cloud Sleuth sets all spans to non-exportable.
That means that traces appear in logs but not in any remote store.
For testing the default is often enough, and it probably is all you need if you use only the logs (for example, with an ELK aggregator).
If you export span data to Zipkin, there is also an <literal>Sampler.ALWAYS_SAMPLE</literal> setting that exports everything and a <literal>ProbabilityBasedSampler</literal> setting that samples a fixed fraction of spans.</simpara>
<note>
<simpara>The <literal>ProbabilityBasedSampler</literal> is the default if you use <literal>spring-cloud-sleuth-zipkin</literal>.
You can configure the exports by setting <literal>spring.sleuth.sampler.probability</literal>.
The passed value needs to be a double from <literal>0.0</literal> to <literal>1.0</literal>.</simpara>
</note>
<simpara>A sampler can be installed by creating a bean definition, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public Sampler defaultSampler() {
	return Sampler.ALWAYS_SAMPLE;
}</programlisting>
<tip>
<simpara>You can set the HTTP header <literal>X-B3-Flags</literal> to <literal>1</literal>, or, when doing messaging, you can set the <literal>spanFlags</literal> header to <literal>1</literal>.
Doing so forces the current span to be exportable regardless of the sampling decision.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_propagation">
<title>Propagation</title>
<simpara>Propagation is needed to ensure activities originating from the same root are collected together in the same trace.
The most common propagation approach is to copy a trace context from a client by sending an RPC request to a server receiving it.</simpara>
<simpara>For example, when a downstream HTTP call is made, its trace context is encoded as request headers and sent along with it, as shown in the following image:</simpara>
<screen>   Client Span                                                Server Span
┌──────────────────┐                                       ┌──────────────────┐
│                  │                                       │                  │
│   TraceContext   │           Http Request Headers        │   TraceContext   │
│ ┌──────────────┐ │          ┌───────────────────┐        │ ┌──────────────┐ │
│ │ TraceId      │ │          │ X─B3─TraceId      │        │ │ TraceId      │ │
│ │              │ │          │                   │        │ │              │ │
│ │ ParentSpanId │ │ Extract  │ X─B3─ParentSpanId │ Inject │ │ ParentSpanId │ │
│ │              ├─┼─────────&gt;│                   ├────────┼&gt;│              │ │
│ │ SpanId       │ │          │ X─B3─SpanId       │        │ │ SpanId       │ │
│ │              │ │          │                   │        │ │              │ │
│ │ Sampled      │ │          │ X─B3─Sampled      │        │ │ Sampled      │ │
│ └──────────────┘ │          └───────────────────┘        │ └──────────────┘ │
│                  │                                       │                  │
└──────────────────┘                                       └──────────────────┘</screen>
<simpara>The names above are from <link xl:href="https://github.com/openzipkin/b3-propagation">B3 Propagation</link>, which is built-in to Brave and has implementations in many languages and frameworks.</simpara>
<simpara>Most users use a framework interceptor to automate propagation.
The next two examples show how that might work for a client and a server.</simpara>
<simpara>The following example shows how client-side propagation might work:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracing tracing;

// configure a function that injects a trace context into a request
injector = tracing.propagation().injector(Request.Builder::addHeader);

// before a request is sent, add the current span's context to it
injector.inject(span.context(), request);</programlisting>
<simpara>The following example shows how server-side propagation might work:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracing tracing;
@Autowired Tracer tracer;

// configure a function that extracts the trace context from a request
extractor = tracing.propagation().extractor(Request::getHeader);

// when a server receives a request, it joins or starts a new trace
span = tracer.nextSpan(extractor.extract(request));</programlisting>
<section xml:id="_propagating_extra_fields">
<title>Propagating extra fields</title>
<simpara>Sometimes you need to propagate extra fields, such as a request ID or an alternate trace context.
For example, if you are in a Cloud Foundry environment, you might want to pass the request ID, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// when you initialize the builder, define the extra field you want to propagate
Tracing.newBuilder().propagationFactory(
  ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, "x-vcap-request-id")
);

// later, you can tag that request ID or use it in log correlation
requestId = ExtraFieldPropagation.get("x-vcap-request-id");</programlisting>
<simpara>You may also need to propagate a trace context that you are not using.
For example, you may be in an Amazon Web Services environment but not be reporting data to X-Ray.
To ensure X-Ray can co-exist correctly, pass-through its tracing header, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">tracingBuilder.propagationFactory(
  ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, "x-amzn-trace-id")
);</programlisting>
<tip>
<simpara>In Spring Cloud Sleuth all elements of the tracing builder <literal>Tracing.newBuilder()</literal>
are defined as beans. So if you want to pass a custom <literal>PropagationFactory</literal>, it&#8217;s enough
for you to create a bean of that type and we will set it in the <literal>Tracing</literal> bean.</simpara>
</tip>
<section xml:id="prefixed-fields">
<title>Prefixed fields</title>
<simpara>If they follow a common pattern, you can also prefix fields.
The following example shows how to propagate <literal>x-vcap-request-id</literal> the field as-is but send the <literal>country-code</literal> and <literal>user-id</literal> fields on the wire as <literal>x-baggage-country-code</literal> and <literal>x-baggage-user-id</literal>, respectively:</simpara>
<programlisting language="java" linenumbering="unnumbered">Tracing.newBuilder().propagationFactory(
  ExtraFieldPropagation.newFactoryBuilder(B3Propagation.FACTORY)
                       .addField("x-vcap-request-id")
                       .addPrefixedFields("baggage-", Arrays.asList("country-code", "user-id"))
                       .build()
);</programlisting>
<simpara>Later, you can call the following code to affect the country code of the current trace context:</simpara>
<programlisting language="java" linenumbering="unnumbered">ExtraFieldPropagation.set("country-code", "FO");
String countryCode = ExtraFieldPropagation.get("country-code");</programlisting>
<simpara>Alternatively, if you have a reference to a trace context, you can use it explicitly, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">ExtraFieldPropagation.set(span.context(), "country-code", "FO");
String countryCode = ExtraFieldPropagation.get(span.context(), "country-code");</programlisting>
<important>
<simpara>A difference from previous versions of Sleuth is that, with Brave, you must pass the list of baggage keys.
There are two properties to achieve this.
With the <literal>spring.sleuth.baggage-keys</literal>, you set keys that get prefixed with <literal>baggage-</literal> for HTTP calls and <literal>baggage_</literal> for messaging.
You can also use the <literal>spring.sleuth.propagation-keys</literal> property to pass a list of prefixed keys that are whitelisted without any prefix.</simpara>
</important>
</section>
<section xml:id="_extracting_a_propagated_context">
<title>Extracting a Propagated Context</title>
<simpara>The <literal>TraceContext.Extractor&lt;C&gt;</literal> reads trace identifiers and sampling status from an incoming request or message.
The carrier is usually a request object or headers.</simpara>
<simpara>This utility is used in standard instrumentation (such as <literal>HttpServerHandler`</literal>) but can also be used for custom RPC or messaging code.</simpara>
<simpara><literal>TraceContextOrSamplingFlags</literal> is usually used only with <literal>Tracer.nextSpan(extracted)</literal>, unless you are
sharing span IDs between a client and a server.</simpara>
</section>
<section xml:id="_sharing_span_ids_between_client_and_server">
<title>Sharing span IDs between Client and Server</title>
<simpara>A normal instrumentation pattern is to create a span representing the server side of an RPC.
<literal>Extractor.extract</literal> might return a complete trace context when applied to an incoming client request.
<literal>Tracer.joinSpan</literal> attempts to continue this trace, using the same span ID if supported or creating a child span
if not. When the span ID is shared, the reported data includes a flag saying so.</simpara>
<simpara>The following image shows an example of B3 propagation:</simpara>
<screen>                              ┌───────────────────┐      ┌───────────────────┐
 Incoming Headers             │   TraceContext    │      │   TraceContext    │
┌───────────────────┐(extract)│ ┌───────────────┐ │(join)│ ┌───────────────┐ │
│ X─B3-TraceId      │─────────┼─┼&gt; TraceId      │ │──────┼─┼&gt; TraceId      │ │
│                   │         │ │               │ │      │ │               │ │
│ X─B3-ParentSpanId │─────────┼─┼&gt; ParentSpanId │ │──────┼─┼&gt; ParentSpanId │ │
│                   │         │ │               │ │      │ │               │ │
│ X─B3-SpanId       │─────────┼─┼&gt; SpanId       │ │──────┼─┼&gt; SpanId       │ │
└───────────────────┘         │ │               │ │      │ │               │ │
                              │ │               │ │      │ │  Shared: true │ │
                              │ └───────────────┘ │      │ └───────────────┘ │
                              └───────────────────┘      └───────────────────┘</screen>
<simpara>Some propagation systems forward only the parent span ID, detected when <literal>Propagation.Factory.supportsJoin() == false</literal>.
In this case, a new span ID is always provisioned, and the incoming context determines the parent ID.</simpara>
<simpara>The following image shows an example of AWS propagation:</simpara>
<screen>                              ┌───────────────────┐      ┌───────────────────┐
 x-amzn-trace-id              │   TraceContext    │      │   TraceContext    │
┌───────────────────┐(extract)│ ┌───────────────┐ │(join)│ ┌───────────────┐ │
│ Root              │─────────┼─┼&gt; TraceId      │ │──────┼─┼&gt; TraceId      │ │
│                   │         │ │               │ │      │ │               │ │
│ Parent            │─────────┼─┼&gt; SpanId       │ │──────┼─┼&gt; ParentSpanId │ │
└───────────────────┘         │ └───────────────┘ │      │ │               │ │
                              └───────────────────┘      │ │  SpanId: New  │ │
                                                         │ └───────────────┘ │
                                                         └───────────────────┘</screen>
<simpara>Note: Some span reporters do not support sharing span IDs.
For example, if you set <literal>Tracing.Builder.spanReporter(amazonXrayOrGoogleStackdrive)</literal>, you should disable join by setting <literal>Tracing.Builder.supportsJoin(false)</literal>.
Doing so forces a new child span on <literal>Tracer.joinSpan()</literal>.</simpara>
</section>
<section xml:id="_implementing_propagation">
<title>Implementing Propagation</title>
<simpara><literal>TraceContext.Extractor&lt;C&gt;</literal> is implemented by a <literal>Propagation.Factory</literal> plugin.
Internally, this code creates the union type, <literal>TraceContextOrSamplingFlags</literal>, with one of the following:
* <literal>TraceContext</literal> if trace and span IDs were present.
* <literal>TraceIdContext</literal> if a trace ID was present but span IDs were not present.
* <literal>SamplingFlags</literal> if no identifiers were present.</simpara>
<simpara>Some <literal>Propagation</literal> implementations carry extra data from the point of extraction (for example, reading incoming headers) to injection (for example, writing outgoing headers).
For example, it might carry a request ID.
When implementations have extra data, they handle it as follows:
* If a <literal>TraceContext</literal> were extracted, add the extra data as <literal>TraceContext.extra()</literal>.
* Otherwise, add it as <literal>TraceContextOrSamplingFlags.extra()</literal>, which <literal>Tracer.nextSpan</literal> handles.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_current_tracing_component">
<title>Current Tracing Component</title>
<simpara>Brave supports a &#8220;current tracing component&#8221; concept, which should only be used when you have no other way to get a reference.
This was made for JDBC connections, as they often initialize prior to the tracing component.</simpara>
<simpara>The most recent tracing component instantiated is available through <literal>Tracing.current()</literal>.
You can also use <literal>Tracing.currentTracer()</literal> to get only the tracer.
If you use either of these methods, do not cache the result.
Instead, look them up each time you need them.</simpara>
</chapter>
<chapter xml:id="_current_span">
<title>Current Span</title>
<simpara>Brave supports a &#8220;current span&#8221; concept which represents the in-flight operation.
You can use <literal>Tracer.currentSpan()</literal> to add custom tags to a span and <literal>Tracer.nextSpan()</literal> to create a child of whatever is in-flight.</simpara>
<important>
<simpara>In Sleuth, you can autowire the <literal>Tracer</literal> bean to retrieve the current span via
<literal>tracer.currentSpan()</literal> method. To retrieve the current context just call
<literal>tracer.currentSpan().context()</literal>. To get the current trace id as String
you can use the <literal>traceIdString()</literal> method like this: <literal>tracer.currentSpan().context().traceIdString()</literal>.</simpara>
</important>
<section xml:id="_setting_a_span_in_scope_manually">
<title>Setting a span in scope manually</title>
<simpara>When writing new instrumentation, it is important to place a span you created in scope as the current span.
Not only does doing so let users access it with <literal>Tracer.currentSpan()</literal>, but it also allows customizations such as SLF4J MDC to see the current trace IDs.</simpara>
<simpara><literal>Tracer.withSpanInScope(Span)</literal> facilitates this and is most conveniently employed by using the try-with-resources idiom.
Whenever external code might be invoked (such as proceeding an interceptor or otherwise), place the span in scope, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

try (SpanInScope ws = tracer.withSpanInScope(span)) {
  return inboundRequest.invoke();
} finally { // note the scope is independent of the span
  span.finish();
}</programlisting>
<simpara>In edge cases, you may need to clear the current span temporarily (for example, launching a task that should not be associated with the current request). To do tso, pass null to <literal>withSpanInScope</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired Tracer tracer;

try (SpanInScope cleared = tracer.withSpanInScope(null)) {
  startBackgroundThread();
}</programlisting>
</section>
</chapter>
<chapter xml:id="_instrumentation">
<title>Instrumentation</title>
<simpara>Spring Cloud Sleuth automatically instruments all your Spring applications, so you should not have to do anything to activate it.
The instrumentation is added by using a variety of technologies according to the stack that is available. For example, for a servlet web application, we use a <literal>Filter</literal>, and, for Spring Integration, we use <literal>ChannelInterceptors</literal>.</simpara>
<simpara>You can customize the keys used in span tags.
To limit the volume of span data, an HTTP request is, by default, tagged only with a handful of metadata, such as the status code, the host, and the URL.
You can add request headers by configuring <literal>spring.sleuth.keys.http.headers</literal> (a list of header names).</simpara>
<note>
<simpara>Tags are collected and exported only if there is a <literal>Sampler</literal> that allows it. By default, there is no such <literal>Sampler</literal>, to ensure that there is no danger of accidentally collecting too much data without configuring something).</simpara>
</note>
</chapter>
<chapter xml:id="_span_lifecycle">
<title>Span lifecycle</title>
<simpara>You can do the following operations on the Span by means of <literal>brave.Tracer</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="creating-and-finishing-spans">start</link>: When you start a span, its name is assigned and the start timestamp is recorded.</simpara>
</listitem>
<listitem>
<simpara><link linkend="creating-and-finishing-spans">close</link>: The span gets finished (the end time of the span is recorded) and, if the span is sampled, it is eligible for collection (for example, to Zipkin).</simpara>
</listitem>
<listitem>
<simpara><link linkend="continuing-spans">continue</link>: A new instance of span is created.
It is a copy of the one that it continues.</simpara>
</listitem>
<listitem>
<simpara><link linkend="continuing-spans">detach</link>: The span does not get stopped or closed.
It only gets removed from the current thread.</simpara>
</listitem>
<listitem>
<simpara><link linkend="creating-spans-with-explicit-parent">create with explicit parent</link>: You can create a new span and set an explicit parent for it.</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>Spring Cloud Sleuth creates an instance of <literal>Tracer</literal> for you. In order to use it, you can autowire it.</simpara>
</tip>
<section xml:id="creating-and-finishing-spans">
<title>Creating and finishing spans</title>
<simpara>You can manually create spans by using the <literal>Tracer</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// Start a span. If there was a span present in this thread it will become
// the `newSpan`'s parent.
Span newSpan = this.tracer.nextSpan().name("calculateTax");
try (Tracer.SpanInScope ws = this.tracer.withSpanInScope(newSpan.start())) {
	// ...
	// You can tag a span
	newSpan.tag("taxValue", taxValue);
	// ...
	// You can log an event on a span
	newSpan.annotate("taxCalculated");
} finally {
	// Once done remember to finish the span. This will allow collecting
	// the span to send it to Zipkin
	newSpan.finish();
}</programlisting>
<simpara>In the preceding example, we could see how to create a new instance of the span.
If there is already a span in this thread, it becomes the parent of the new span.</simpara>
<important>
<simpara>Always clean after you create a span. Also, always finish any span that you want to send to Zipkin.</simpara>
</important>
<important>
<simpara>If your span contains a name greater than 50 chars, that name is truncated to 50 chars.
Your names have to be explicit and concrete. Big names lead to latency issues and sometimes even exceptions.</simpara>
</important>
</section>
<section xml:id="continuing-spans">
<title>Continuing Spans</title>
<simpara>Sometimes, you do not want to create a new span but you want to continue one. An example of such a
situation might be as follows:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">AOP</emphasis>: If there was already a span created before an aspect was reached, you might not want to create a new span.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Hystrix</emphasis>: Executing a Hystrix command is most likely a logical part of the current processing.
It is in fact merely a technical implementation detail that you would not necessarily want to reflect in tracing as a separate being.</simpara>
</listitem>
</itemizedlist>
<simpara>To continue a span, you can use <literal>brave.Tracer</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// let's assume that we're in a thread Y and we've received
// the `initialSpan` from thread X
Span continuedSpan = this.tracer.joinSpan(newSpan.context());
try {
	// ...
	// You can tag a span
	continuedSpan.tag("taxValue", taxValue);
	// ...
	// You can log an event on a span
	continuedSpan.annotate("taxCalculated");
} finally {
	// Once done remember to flush the span. That means that
	// it will get reported but the span itself is not yet finished
	continuedSpan.flush();
}</programlisting>
</section>
<section xml:id="creating-spans-with-explicit-parent">
<title>Creating a Span with an explicit Parent</title>
<simpara>You might want to start a new span and provide an explicit parent of that span.
Assume that the parent of a span is in one thread and you want to start a new span in another thread.
In Brave, whenever you call <literal>nextSpan()</literal>, it creates a span in reference to the span that is currently in scope.
You can put the span in scope and then call <literal>nextSpan()</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// let's assume that we're in a thread Y and we've received
// the `initialSpan` from thread X. `initialSpan` will be the parent
// of the `newSpan`
Span newSpan = null;
try (Tracer.SpanInScope ws = this.tracer.withSpanInScope(initialSpan)) {
	newSpan = this.tracer.nextSpan().name("calculateCommission");
	// ...
	// You can tag a span
	newSpan.tag("commissionValue", commissionValue);
	// ...
	// You can log an event on a span
	newSpan.annotate("commissionCalculated");
} finally {
	// Once done remember to finish the span. This will allow collecting
	// the span to send it to Zipkin. The tags and events set on the
	// newSpan will not be present on the parent
	if (newSpan != null) {
		newSpan.finish();
	}
}</programlisting>
<important>
<simpara>After creating such a span, you must finish it. Otherwise it is not reported (for example, to Zipkin).</simpara>
</important>
</section>
</chapter>
<chapter xml:id="_naming_spans">
<title>Naming spans</title>
<simpara>Picking a span name is not a trivial task. A span name should depict an operation name.
The name should be low cardinality, so it should not include identifiers.</simpara>
<simpara>Since there is a lot of instrumentation going on, some span names are artificial:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>controller-method-name</literal> when received by a Controller with a method name of <literal>controllerMethodName</literal></simpara>
</listitem>
<listitem>
<simpara><literal>async</literal> for asynchronous operations done with wrapped <literal>Callable</literal> and <literal>Runnable</literal> interfaces.</simpara>
</listitem>
<listitem>
<simpara>Methods annotated with <literal>@Scheduled</literal> return the simple name of the class.</simpara>
</listitem>
</itemizedlist>
<simpara>Fortunately, for asynchronous processing, you can provide explicit naming.</simpara>
<section xml:id="__literal_spanname_literal_annotation">
<title><literal>@SpanName</literal> Annotation</title>
<simpara>You can name the span explicitly by using the <literal>@SpanName</literal> annotation, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpanName("calculateTax")
class TaxCountingRunnable implements Runnable {

	@Override public void run() {
		// perform logic
	}
}</programlisting>
<simpara>In this case, when processed in the following manner, the span is named <literal>calculateTax</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">Runnable runnable = new TraceRunnable(tracing, spanNamer,
		new TaxCountingRunnable());
Future&lt;?&gt; future = executorService.submit(runnable);
// ... some additional logic ...
future.get();</programlisting>
</section>
<section xml:id="__literal_tostring_literal_method">
<title><literal>toString()</literal> method</title>
<simpara>It is pretty rare to create separate classes for <literal>Runnable</literal> or <literal>Callable</literal>.
Typically, one creates an anonymous instance of those classes.
You cannot annotate such classes.
To overcome that limitation, if there is no <literal>@SpanName</literal> annotation present, we check whether the class has a custom implementation of the <literal>toString()</literal> method.</simpara>
<simpara>Running such code leads to creating a span named <literal>calculateTax</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">Runnable runnable = new TraceRunnable(tracing, spanNamer, new Runnable() {
	@Override public void run() {
		// perform logic
	}

	@Override public String toString() {
		return "calculateTax";
	}
});
Future&lt;?&gt; future = executorService.submit(runnable);
// ... some additional logic ...
future.get();</programlisting>
</section>
</chapter>
<chapter xml:id="_managing_spans_with_annotations">
<title>Managing Spans with Annotations</title>
<simpara>You can manage spans with a variety of annotations.</simpara>
<section xml:id="_rationale">
<title>Rationale</title>
<simpara>There are a number of good reasons to manage spans with annotations, including:</simpara>
<itemizedlist>
<listitem>
<simpara>API-agnostic means to collaborate with a span. Use of annotations lets users add to a span with no library dependency on a span api.
Doing so lets Sleuth change its core API to create less impact to user code.</simpara>
</listitem>
<listitem>
<simpara>Reduced surface area for basic span operations. Without this feature, you must use the span api, which has lifecycle commands that could be used incorrectly.
By only exposing scope, tag, and log functionality, you can collaborate without accidentally breaking span lifecycle.</simpara>
</listitem>
<listitem>
<simpara>Collaboration with runtime generated code. With libraries such as Spring Data and Feign, the implementations of interfaces are generated at runtime.
Consequently, span wrapping of objects was tedious.
Now you can provide annotations over interfaces and the arguments of those interfaces.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_creating_new_spans">
<title>Creating New Spans</title>
<simpara>If you do not want to create local spans manually, you can use the <literal>@NewSpan</literal> annotation.
Also, we provide the <literal>@SpanTag</literal> annotation to add tags in an automated fashion.</simpara>
<simpara>Now we can consider some examples of usage.</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan
void testMethod();</programlisting>
<simpara>Annotating the method without any parameter leads to creating a new span whose name equals the annotated method name.</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan("customNameOnTestMethod4")
void testMethod4();</programlisting>
<simpara>If you provide the value in the annotation (either directly or by setting the <literal>name</literal> parameter), the created span has the provided value as the name.</simpara>
<programlisting language="java" linenumbering="unnumbered">// method declaration
@NewSpan(name = "customNameOnTestMethod5")
void testMethod5(@SpanTag("testTag") String param);

// and method execution
this.testBean.testMethod5("test");</programlisting>
<simpara>You can combine both the name and a tag. Let&#8217;s focus on the latter.
In this case, the value of the annotated method&#8217;s parameter runtime value becomes the value of the tag.
In our sample, the tag key is <literal>testTag</literal>, and the tag value is <literal>test</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan(name = "customNameOnTestMethod3")
@Override
public void testMethod3() {
}</programlisting>
<simpara>You can place the <literal>@NewSpan</literal> annotation on both the class and an interface.
If you override the interface&#8217;s method and provide a different value for the <literal>@NewSpan</literal> annotation, the most
concrete one wins (in this case <literal>customNameOnTestMethod3</literal> is set).</simpara>
</section>
<section xml:id="_continuing_spans">
<title>Continuing Spans</title>
<simpara>If you want to add tags and annotations to an existing span, you can use the <literal>@ContinueSpan</literal> annotation, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// method declaration
@ContinueSpan(log = "testMethod11")
void testMethod11(@SpanTag("testTag11") String param);

// method execution
this.testBean.testMethod11("test");
this.testBean.testMethod13();</programlisting>
<simpara>(Note that, in contrast with the <literal>@NewSpan</literal> annotation ,you can also add logs with the <literal>log</literal> parameter.)</simpara>
<simpara>That way, the span gets continued and:</simpara>
<itemizedlist>
<listitem>
<simpara>Log entries named <literal>testMethod11.before</literal> and <literal>testMethod11.after</literal> are created.</simpara>
</listitem>
<listitem>
<simpara>If an exception is thrown, a log entry named <literal>testMethod11.afterFailure</literal> is also created.</simpara>
</listitem>
<listitem>
<simpara>A tag with a key of <literal>testTag11</literal> and a value of <literal>test</literal> is created.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_advanced_tag_setting">
<title>Advanced Tag Setting</title>
<simpara>There are 3 different ways to add tags to a span. All of them are controlled by the <literal>SpanTag</literal> annotation.
The precedence is as follows:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Try with a bean of <literal>TagValueResolver</literal> type and a provided name.</simpara>
</listitem>
<listitem>
<simpara>If the bean name has not been provided, try to evaluate an expression.
We search for a <literal>TagValueExpressionResolver</literal> bean.
The default implementation uses SPEL expression resolution.
<emphasis role="strong">IMPORTANT</emphasis> You can only reference properties from the SPEL expression. Method execution is not allowed due to security constraints.</simpara>
</listitem>
<listitem>
<simpara>If we do not find any expression to evaluate, return the <literal>toString()</literal> value of the parameter.</simpara>
</listitem>
</orderedlist>
<section xml:id="_custom_extractor">
<title>Custom extractor</title>
<simpara>The value of the tag for the following method is computed by an implementation of <literal>TagValueResolver</literal> interface.
Its class name has to be passed as the value of the <literal>resolver</literal> attribute.</simpara>
<simpara>Consider the following annotated method:</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan
public void getAnnotationForTagValueResolver(@SpanTag(key = "test", resolver = TagValueResolver.class) String test) {
}</programlisting>
<simpara>Now further consider the following <literal>TagValueResolver</literal> bean implementation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean(name = "myCustomTagValueResolver")
public TagValueResolver tagValueResolver() {
	return parameter -&gt; "Value from myCustomTagValueResolver";
}</programlisting>
<simpara>The two preceding examples lead to setting a tag value equal to <literal>Value from myCustomTagValueResolver</literal>.</simpara>
</section>
<section xml:id="_resolving_expressions_for_a_value">
<title>Resolving Expressions for a Value</title>
<simpara>Consider the following annotated method:</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan
public void getAnnotationForTagValueExpression(@SpanTag(key = "test", expression = "'hello' + ' characters'") String test) {
}</programlisting>
<simpara>No custom implementation of a <literal>TagValueExpressionResolver</literal> leads to evaluation of the SPEL expression, and a tag with a value of <literal>4 characters</literal> is set on the span.
If you want to use some other expression resolution mechanism, you can create your own implementation of the bean.</simpara>
</section>
<section xml:id="_using_the_literal_tostring_literal_method">
<title>Using the <literal>toString()</literal> method</title>
<simpara>Consider the following annotated method:</simpara>
<programlisting language="java" linenumbering="unnumbered">@NewSpan
public void getAnnotationForArgumentToString(@SpanTag("test") Long param) {
}</programlisting>
<simpara>Running the preceding method with a value of <literal>15</literal> leads to setting a tag with a String value of <literal>"15"</literal>.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_customizations">
<title>Customizations</title>
<section xml:id="_http">
<title>HTTP</title>
<simpara>If a customization of client / server parsing of the HTTP related spans is required,
just register a bean of type <literal>brave.http.HttpClientParser</literal> or
<literal>brave.http.HttpServerParser</literal>. If client /server sampling is required, just
register a bean of type <literal>brave.http.HttpSampler</literal> and name the bean
 <literal>sleuthClientSampler</literal> for client sampler and <literal>sleuthServerSampler</literal> for server sampler.
 For your convenience the <literal>@ClientSampler</literal> and <literal>@ServerSampler</literal>
 annotations can be used to inject the proper beans or to
 reference the bean names via their static String <literal>NAME</literal> fields.</simpara>
<simpara>Check out Brave&#8217;s code to see an example of how to make a path-based sampler
<link xl:href="https://github.com/openzipkin/brave/tree/master/instrumentation/http#sampling-policy">https://github.com/openzipkin/brave/tree/master/instrumentation/http#sampling-policy</link></simpara>
<simpara>If you want to completely rewrite the <literal>HttpTracing</literal> bean you can use the <literal>SkipPatternProvider</literal>
interface to retrieve the URL <literal>Pattern</literal> for spans that should be not sampled. Below you can see
an example of usage of <literal>SkipPatternProvider</literal> inside a server side, <literal>HttpSampler</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
class Config {
  @Bean(name = ServerSampler.NAME)
  HttpSampler myHttpSampler(SkipPatternProvider provider) {
  	Pattern pattern = provider.skipPattern();
  	return new HttpSampler() {

  		@Override public &lt;Req&gt; Boolean trySample(HttpAdapter&lt;Req, ?&gt; adapter, Req request) {
  			String url = adapter.path(request);
  			boolean shouldSkip = pattern.matcher(url).matches();
  			if (shouldSkip) {
  				return false;
  			}
  			return null;
  		}
  	};
  }
}</programlisting>
</section>
<section xml:id="__literal_tracingfilter_literal">
<title><literal>TracingFilter</literal></title>
<simpara>You can also modify the behavior of the <literal>TracingFilter</literal>, which is the component that is responsible for processing the input HTTP request and adding tags basing on the HTTP response.
You can customize the tags or modify the response headers by registering your own instance of the <literal>TracingFilter</literal> bean.</simpara>
<simpara>In the following example, we register the <literal>TracingFilter</literal> bean, add the <literal>ZIPKIN-TRACE-ID</literal> response header containing the current Span&#8217;s trace id, and add a tag with key <literal>custom</literal> and a value <literal>tag</literal> to the span.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Component
@Order(TraceWebServletAutoConfiguration.TRACING_FILTER_ORDER + 1)
class MyFilter extends GenericFilterBean {

	private final Tracer tracer;

	MyFilter(Tracer tracer) {
		this.tracer = tracer;
	}

	@Override public void doFilter(ServletRequest request, ServletResponse response,
			FilterChain chain) throws IOException, ServletException {
		Span currentSpan = this.tracer.currentSpan();
		if (currentSpan == null) {
			chain.doFilter(request, response);
			return;
		}
		// for readability we're returning trace id in a hex form
		((HttpServletResponse) response)
				.addHeader("ZIPKIN-TRACE-ID",
						currentSpan.context().traceIdString());
		// we can also add some custom tags
		currentSpan.tag("custom", "tag");
		chain.doFilter(request, response);
	}
}</programlisting>
</section>
<section xml:id="_custom_service_name">
<title>Custom service name</title>
<simpara>By default, Sleuth assumes that, when you send a span to Zipkin, you want the span&#8217;s service name to be equal to the value of the <literal>spring.application.name</literal> property.
That is not always the case, though.
There are situations in which you want to explicitly provide a different service name for all spans coming from your application.
To achieve that, you can pass the following property to your application to override that value (the example is for a service named <literal>myService</literal>):</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring.zipkin.service.name: myService</programlisting>
</section>
<section xml:id="_customization_of_reported_spans">
<title>Customization of Reported Spans</title>
<simpara>Before reporting spans (for example, to Zipkin) you may want to modify that span in some way.
You can do so by using the <literal>SpanAdjuster</literal> interface.</simpara>
<simpara>In Sleuth, we generate spans with a fixed name.
Some users want to modify the name depending on values of tags.
You can implement the <literal>SpanAdjuster</literal> interface to alter that name.</simpara>
<simpara>The following example shows how to register two beans that implement <literal>SpanAdjuster</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean SpanAdjuster adjusterOne() {
	return span -&gt; span.toBuilder().name("foo").build();
}

@Bean SpanAdjuster adjusterTwo() {
	return span -&gt; span.toBuilder().name(span.name() + " bar").build();
}</programlisting>
<simpara>The preceding example results in changing the name of the reported span to <literal>foo bar</literal>, just before it gets reported (for example, to Zipkin).</simpara>
</section>
<section xml:id="_host_locator">
<title>Host Locator</title>
<important>
<simpara>This section is about defining <emphasis role="strong">host</emphasis> from service discovery.
It is <emphasis role="strong">NOT</emphasis> about finding Zipkin through service discovery.</simpara>
</important>
<simpara>To define the host that corresponds to a particular span, we need to resolve the host name and port.
The default approach is to take these values from server properties.
If those are not set, we try to retrieve the host name from the network interfaces.</simpara>
<simpara>If you have the discovery client enabled and prefer to retrieve the host address from the registered instance in a service registry, you have to set the <literal>spring.zipkin.locator.discovery.enabled</literal> property (it is applicable for both HTTP-based and Stream-based span reporting), as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring.zipkin.locator.discovery.enabled: true</programlisting>
</section>
</chapter>
<chapter xml:id="_sending_spans_to_zipkin">
<title>Sending Spans to Zipkin</title>
<simpara>By default, if you add <literal>spring-cloud-starter-zipkin</literal> as a dependency to your project, when the span is closed, it is sent to Zipkin over HTTP.
The communication is asynchronous.
You can configure the URL by setting the <literal>spring.zipkin.baseUrl</literal> property, as follows:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring.zipkin.baseUrl: https://192.168.99.100:9411/</programlisting>
<simpara>If you want to find Zipkin through service discovery, you can pass the Zipkin&#8217;s service ID inside the URL, as shown in the following example for <literal>zipkinserver</literal> service ID:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring.zipkin.baseUrl: http://zipkinserver/</programlisting>
<simpara>To disable this feature just set <literal>spring.zipkin.discoveryClientEnabled</literal> to `false.</simpara>
<simpara>When the Discovery Client feature is enabled, Sleuth uses
<literal>LoadBalancerClient</literal> to find the URL of the Zipkin Server. It means
that you can set up the load balancing configuration e.g. via Ribbon.</simpara>
<programlisting language="yaml" linenumbering="unnumbered">zipkinserver:
  ribbon:
    ListOfServers: host1,host2</programlisting>
<simpara>If you have web, rabbit, or kafka together on the classpath, you might need to pick the means by which you would like to send spans to zipkin.
To do so, set <literal>web</literal>, <literal>rabbit</literal>, or <literal>kafka</literal> to the <literal>spring.zipkin.sender.type</literal> property.
The following example shows setting the sender type for <literal>web</literal>:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spring.zipkin.sender.type: web</programlisting>
<simpara>To customize the <literal>RestTemplate</literal> that sends spans to Zipkin via HTTP, you can register
the <literal>ZipkinRestTemplateCustomizer</literal> bean.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
class MyConfig {
	@Bean ZipkinRestTemplateCustomizer myCustomizer() {
		return new ZipkinRestTemplateCustomizer() {
			@Override
			void customize(RestTemplate restTemplate) {
				// customize the RestTemplate
			}
		};
	}
}</programlisting>
<simpara>If, however, you would like to control the full process of creating the <literal>RestTemplate</literal>
object, you will have to create a bean of <literal>zipkin2.reporter.Sender</literal> type.</simpara>
<programlisting language="java" linenumbering="unnumbered">	@Bean Sender myRestTemplateSender(ZipkinProperties zipkin,
			ZipkinRestTemplateCustomizer zipkinRestTemplateCustomizer) {
		RestTemplate restTemplate = mySuperCustomRestTemplate();
		zipkinRestTemplateCustomizer.customize(restTemplate);
		return myCustomSender(zipkin, restTemplate);
	}</programlisting>
</chapter>
<chapter xml:id="_zipkin_stream_span_consumer">
<title>Zipkin Stream Span Consumer</title>
<important>
<simpara>We recommend using Zipkin&#8217;s native support for message-based span sending.
Starting from the Edgware release, the Zipkin Stream server is deprecated.
In the Finchley release, it got removed.</simpara>
</important>
<simpara>If for some reason you need to create the deprecated Stream Zipkin server, see the <link xl:href="https://cloud.spring.io/spring-cloud-static/Dalston.SR4/multi/multi__span_data_as_messages.html#_zipkin_consumer">Dalston Documentation</link>.</simpara>
</chapter>
<chapter xml:id="_integrations">
<title>Integrations</title>
<section xml:id="_opentracing">
<title>OpenTracing</title>
<simpara>Spring Cloud Sleuth is compatible with <link xl:href="https://opentracing.io/">OpenTracing</link>.
If you have OpenTracing on the classpath, we automatically register the OpenTracing <literal>Tracer</literal> bean.
If you wish to disable this, set <literal>spring.sleuth.opentracing.enabled</literal> to <literal>false</literal></simpara>
</section>
<section xml:id="_runnable_and_callable">
<title>Runnable and Callable</title>
<simpara>If you wrap your logic in <literal>Runnable</literal> or <literal>Callable</literal>, you can wrap those classes in their Sleuth representative, as shown in the following example for <literal>Runnable</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">Runnable runnable = new Runnable() {
	@Override
	public void run() {
		// do some work
	}

	@Override
	public String toString() {
		return "spanNameFromToStringMethod";
	}
};
// Manual `TraceRunnable` creation with explicit "calculateTax" Span name
Runnable traceRunnable = new TraceRunnable(tracing, spanNamer, runnable,
		"calculateTax");
// Wrapping `Runnable` with `Tracing`. That way the current span will be available
// in the thread of `Runnable`
Runnable traceRunnableFromTracer = tracing.currentTraceContext().wrap(runnable);</programlisting>
<simpara>The following example shows how to do so for <literal>Callable</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">Callable&lt;String&gt; callable = new Callable&lt;String&gt;() {
	@Override
	public String call() throws Exception {
		return someLogic();
	}

	@Override
	public String toString() {
		return "spanNameFromToStringMethod";
	}
};
// Manual `TraceCallable` creation with explicit "calculateTax" Span name
Callable&lt;String&gt; traceCallable = new TraceCallable&lt;&gt;(tracing, spanNamer, callable,
		"calculateTax");
// Wrapping `Callable` with `Tracing`. That way the current span will be available
// in the thread of `Callable`
Callable&lt;String&gt; traceCallableFromTracer = tracing.currentTraceContext().wrap(callable);</programlisting>
<simpara>That way, you ensure that a new span is created and closed for each execution.</simpara>
</section>
<section xml:id="_hystrix">
<title>Hystrix</title>
<section xml:id="_custom_concurrency_strategy">
<title>Custom Concurrency Strategy</title>
<simpara>We register a custom <link xl:href="https://github.com/Netflix/Hystrix/wiki/Plugins#concurrencystrategy"><literal>HystrixConcurrencyStrategy</literal></link> called <literal>TraceCallable</literal> that wraps all <literal>Callable</literal> instances in their Sleuth representative.
The strategy either starts or continues a span, depending on whether tracing was already going on before the Hystrix command was called.
To disable the custom Hystrix Concurrency Strategy, set the <literal>spring.sleuth.hystrix.strategy.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_manual_command_setting">
<title>Manual Command setting</title>
<simpara>Assume that you have the following <literal>HystrixCommand</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">HystrixCommand&lt;String&gt; hystrixCommand = new HystrixCommand&lt;String&gt;(setter) {
	@Override
	protected String run() throws Exception {
		return someLogic();
	}
};</programlisting>
<simpara>To pass the tracing information, you have to wrap the same logic in the Sleuth version of the <literal>HystrixCommand</literal>, which is called
<literal>TraceCommand</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">TraceCommand&lt;String&gt; traceCommand = new TraceCommand&lt;String&gt;(tracer, setter) {
	@Override
	public String doRun() throws Exception {
		return someLogic();
	}
};</programlisting>
</section>
</section>
<section xml:id="_rxjava">
<title>RxJava</title>
<simpara>We registering a custom <link xl:href="https://github.com/ReactiveX/RxJava/wiki/Plugins#rxjavaschedulershook"><literal>RxJavaSchedulersHook</literal></link> that wraps all <literal>Action0</literal> instances in their Sleuth representative, which is called <literal>TraceAction</literal>.
The hook either starts or continues a span, depending on whether tracing was already going on before the Action was scheduled.
To disable the custom <literal>RxJavaSchedulersHook</literal>, set the <literal>spring.sleuth.rxjava.schedulers.hook.enabled</literal> to <literal>false</literal>.</simpara>
<simpara>You can define a list of regular expressions for thread names for which you do not want spans to be created.
To do so, provide a comma-separated list of regular expressions in the <literal>spring.sleuth.rxjava.schedulers.ignoredthreads</literal> property.</simpara>
<important>
<simpara>The suggest approach to reactive programming and Sleuth is to use
the Reactor support.</simpara>
</important>
</section>
<section xml:id="_http_integration">
<title>HTTP integration</title>
<simpara>Features from this section can be disabled by setting the <literal>spring.sleuth.web.enabled</literal> property with value equal to <literal>false</literal>.</simpara>
<section xml:id="_http_filter">
<title>HTTP Filter</title>
<simpara>Through the <literal>TracingFilter</literal>, all sampled incoming requests result in creation of a Span.
That Span&#8217;s name is <literal>http:</literal> + the path to which the request was sent.
For example, if the request was sent to <literal>/this/that</literal> then the name will be <literal>http:/this/that</literal>.
You can configure which URIs you would like to skip by setting the <literal>spring.sleuth.web.skipPattern</literal> property.
If you have <literal>ManagementServerProperties</literal> on classpath, its value of <literal>contextPath</literal> gets appended to the provided skip pattern.
If you want to reuse the Sleuth&#8217;s default skip patterns and just append your own, pass those patterns by using the <literal>spring.sleuth.web.additionalSkipPattern</literal>.</simpara>
</section>
<section xml:id="_handlerinterceptor">
<title>HandlerInterceptor</title>
<simpara>Since we want the span names to be precise, we use a <literal>TraceHandlerInterceptor</literal> that either wraps an existing <literal>HandlerInterceptor</literal> or is added directly to the list of existing <literal>HandlerInterceptors</literal>.
The <literal>TraceHandlerInterceptor</literal> adds a special request attribute to the given <literal>HttpServletRequest</literal>.
If the the <literal>TracingFilter</literal> does not see this attribute, it creates a &#8220;fallback&#8221; span, which is an additional span created on the server side so that the trace is presented properly in the UI.
If that happens, there is probably missing instrumentation.
In that case, please file an issue in Spring Cloud Sleuth.</simpara>
</section>
<section xml:id="_async_servlet_support">
<title>Async Servlet support</title>
<simpara>If your controller returns a <literal>Callable</literal> or a <literal>WebAsyncTask</literal>, Spring Cloud Sleuth continues the existing span instead of creating a new one.</simpara>
</section>
<section xml:id="_webflux_support">
<title>WebFlux support</title>
<simpara>Through <literal>TraceWebFilter</literal>, all sampled incoming requests result in creation of a Span.
That Span&#8217;s name is <literal>http:</literal> + the path to which the request was sent.
For example, if the request was sent to <literal>/this/that</literal>, the name is <literal>http:/this/that</literal>.
You can configure which URIs you would like to skip by using the <literal>spring.sleuth.web.skipPattern</literal> property.
If you have <literal>ManagementServerProperties</literal> on the classpath, its value of <literal>contextPath</literal> gets appended to the provided skip pattern.
If you want to reuse Sleuth&#8217;s default skip patterns and append your own, pass those patterns by using the <literal>spring.sleuth.web.additionalSkipPattern</literal>.</simpara>
</section>
<section xml:id="_dubbo_rpc_support">
<title>Dubbo RPC support</title>
<simpara>Via the integration with Brave, Spring Cloud Sleuth supports <link xl:href="http://dubbo.io/">Dubbo</link>.
It&#8217;s enough to add the <literal>brave-instrumentation-dubbo-rpc</literal> dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;io.zipkin.brave&lt;/groupId&gt;
    &lt;artifactId&gt;brave-instrumentation-dubbo-rpc&lt;/artifactId&gt;
&lt;/dependency&gt;</programlisting>
<simpara>You need to also set a <literal>dubbo.properties</literal> file with the following contents:</simpara>
<programlisting language="properties" linenumbering="unnumbered">dubbo.provider.filter=tracing
dubbo.consumer.filter=tracing</programlisting>
<simpara>You can read more about Brave - Dubbo integration <link xl:href="https://github.com/openzipkin/brave/tree/master/instrumentation/dubbo-rpc">here</link>.
An example of Spring Cloud Sleuth and Dubbo can be found <link xl:href="https://github.com/openzipkin/sleuth-webmvc-example/compare/add-dubbo-tracing">here</link>.</simpara>
</section>
</section>
<section xml:id="_http_client_integration">
<title>HTTP Client Integration</title>
<section xml:id="_synchronous_rest_template">
<title>Synchronous Rest Template</title>
<simpara>We inject a <literal>RestTemplate</literal> interceptor to ensure that all the tracing information is passed to the requests.
Each time a call is made, a new Span is created.
It gets closed upon receiving the response.
To block the synchronous <literal>RestTemplate</literal> features, set <literal>spring.sleuth.web.client.enabled</literal> to <literal>false</literal>.</simpara>
<important>
<simpara>You have to register <literal>RestTemplate</literal> as a bean so that the interceptors get injected.
If you create a <literal>RestTemplate</literal> instance with a <literal>new</literal> keyword, the instrumentation does NOT work.</simpara>
</important>
</section>
<section xml:id="_asynchronous_rest_template">
<title>Asynchronous Rest Template</title>
<important>
<simpara>Starting with Sleuth <literal>2.0.0</literal>, we no longer register a bean of <literal>AsyncRestTemplate</literal> type.
It is up to you to create such a bean.
Then we instrument it.</simpara>
</important>
<simpara>To block the <literal>AsyncRestTemplate</literal> features, set <literal>spring.sleuth.web.async.client.enabled</literal> to <literal>false</literal>.
To disable creation of the default <literal>TraceAsyncClientHttpRequestFactoryWrapper</literal>, set <literal>spring.sleuth.web.async.client.factory.enabled</literal>
to <literal>false</literal>.
If you do not want to create <literal>AsyncRestClient</literal> at all, set <literal>spring.sleuth.web.async.client.template.enabled</literal> to <literal>false</literal>.</simpara>
<section xml:id="_multiple_asynchronous_rest_templates">
<title>Multiple Asynchronous Rest Templates</title>
<simpara>Sometimes you need to use multiple implementations of the Asynchronous Rest Template.
In the following snippet, you can see an example of how to set up such a custom <literal>AsyncRestTemplate</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
@EnableAutoConfiguration
static class Config {

	@Bean(name = "customAsyncRestTemplate")
	public AsyncRestTemplate traceAsyncRestTemplate() {
		return new AsyncRestTemplate(asyncClientFactory(), clientHttpRequestFactory());
	}

	private ClientHttpRequestFactory clientHttpRequestFactory() {
		ClientHttpRequestFactory clientHttpRequestFactory = new CustomClientHttpRequestFactory();
		//CUSTOMIZE HERE
		return clientHttpRequestFactory;
	}

	private AsyncClientHttpRequestFactory asyncClientFactory() {
		AsyncClientHttpRequestFactory factory = new CustomAsyncClientHttpRequestFactory();
		//CUSTOMIZE HERE
		return factory;
	}
}</programlisting>
</section>
</section>
<section xml:id="__literal_webclient_literal">
<title><literal>WebClient</literal></title>
<simpara>We inject a <literal>ExchangeFilterFunction</literal> implementation that creates a span and, through on-success and on-error callbacks, takes care of closing client-side spans.</simpara>
<simpara>To block this feature, set <literal>spring.sleuth.web.client.enabled</literal> to <literal>false</literal>.</simpara>
<important>
<simpara>You have to register <literal>WebClient</literal> as a bean so that the tracing instrumentation gets applied.
If you create a <literal>WebClient</literal> instance with a <literal>new</literal> keyword,  the instrumentation does NOT work.</simpara>
</important>
</section>
<section xml:id="_traverson">
<title>Traverson</title>
<simpara>If you use the <link xl:href="https://docs.spring.io/spring-hateoas/docs/current/reference/html/#client.traverson">Traverson</link> library, you can inject a <literal>RestTemplate</literal> as a bean into your Traverson object.
Since <literal>RestTemplate</literal> is already intercepted, you get full support for tracing in your client. The following pseudo code
shows how to do that:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired RestTemplate restTemplate;

Traverson traverson = new Traverson(URI.create("http://some/address"),
    MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON_UTF8).setRestOperations(restTemplate);
// use Traverson</programlisting>
</section>
<section xml:id="_apache_literal_httpclientbuilder_literal_and_literal_httpasyncclientbuilder_literal">
<title>Apache <literal>HttpClientBuilder</literal> and <literal>HttpAsyncClientBuilder</literal></title>
<simpara>We instrument the <literal>HttpClientBuilder</literal> and <literal>HttpAsyncClientBuilder</literal> so that
tracing context gets injected to the sent requests.</simpara>
<simpara>To block these features, set <literal>spring.sleuth.web.client.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_netty_literal_httpclient_literal">
<title>Netty <literal>HttpClient</literal></title>
<simpara>We instrument the Netty&#8217;s <literal>HttpClient</literal>.</simpara>
<simpara>To block this feature, set <literal>spring.sleuth.web.client.enabled</literal> to <literal>false</literal>.</simpara>
<important>
<simpara>You have to register <literal>HttpClient</literal> as a bean so that the instrumentation happens.
If you create a <literal>HttpClient</literal> instance with a <literal>new</literal> keyword, the instrumentation does NOT work.</simpara>
</important>
</section>
<section xml:id="__literal_userinforesttemplatecustomizer_literal">
<title><literal>UserInfoRestTemplateCustomizer</literal></title>
<simpara>We instrument the Spring Security&#8217;s <literal>UserInfoRestTemplateCustomizer</literal>.</simpara>
<simpara>To block this feature, set <literal>spring.sleuth.web.client.enabled</literal> to <literal>false</literal>.</simpara>
</section>
</section>
<section xml:id="_feign">
<title>Feign</title>
<simpara>By default, Spring Cloud Sleuth provides integration with Feign through <literal>TraceFeignClientAutoConfiguration</literal>.
You can disable it entirely by setting <literal>spring.sleuth.feign.enabled</literal> to <literal>false</literal>.
If you do so, no Feign-related instrumentation take place.</simpara>
<simpara>Part of Feign instrumentation is done through a <literal>FeignBeanPostProcessor</literal>.
You can disable it by setting <literal>spring.sleuth.feign.processor.enabled</literal> to <literal>false</literal>.
If you set it to <literal>false</literal>, Spring Cloud Sleuth does not instrument any of your custom Feign components.
However, all the default instrumentation is still there.</simpara>
</section>
<section xml:id="_asynchronous_communication">
<title>Asynchronous Communication</title>
<section xml:id="__literal_async_literal_annotated_methods">
<title><literal>@Async</literal> Annotated methods</title>
<simpara>In Spring Cloud Sleuth, we instrument async-related components so that the tracing information is passed between threads.
You can disable this behavior by setting the value of <literal>spring.sleuth.async.enabled</literal> to <literal>false</literal>.</simpara>
<simpara>If you annotate your method with <literal>@Async</literal>, we automatically create a new Span with the following characteristics:</simpara>
<itemizedlist>
<listitem>
<simpara>If the method is annotated with <literal>@SpanName</literal>, the value of the annotation is the Span&#8217;s name.</simpara>
</listitem>
<listitem>
<simpara>If the method is not annotated with <literal>@SpanName</literal>, the Span name is the annotated method name.</simpara>
</listitem>
<listitem>
<simpara>The span is tagged with the method&#8217;s class name and method name.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="__literal_scheduled_literal_annotated_methods">
<title><literal>@Scheduled</literal> Annotated Methods</title>
<simpara>In Spring Cloud Sleuth, we instrument scheduled method execution so that the tracing information is passed between threads.
You can disable this behavior by setting the value of <literal>spring.sleuth.scheduled.enabled</literal> to <literal>false</literal>.</simpara>
<simpara>If you annotate your method with <literal>@Scheduled</literal>, we automatically create a new span with the following characteristics:</simpara>
<itemizedlist>
<listitem>
<simpara>The span name is the annotated method name.</simpara>
</listitem>
<listitem>
<simpara>The span is tagged with the method&#8217;s class name and method name.</simpara>
</listitem>
</itemizedlist>
<simpara>If you want to skip span creation for some <literal>@Scheduled</literal> annotated classes, you can set the <literal>spring.sleuth.scheduled.skipPattern</literal> with a regular expression that matches the fully qualified name of the <literal>@Scheduled</literal> annotated class.
If you use <literal>spring-cloud-sleuth-stream</literal> and <literal>spring-cloud-netflix-hystrix-stream</literal> together, a span is created for each Hystrix metrics and sent to Zipkin.
This behavior may be annoying. That&#8217;s why, by default, <literal>spring.sleuth.scheduled.skipPattern=org.springframework.cloud.netflix.hystrix.stream.HystrixStreamTask</literal>.</simpara>
</section>
<section xml:id="_executor_executorservice_and_scheduledexecutorservice">
<title>Executor, ExecutorService, and ScheduledExecutorService</title>
<simpara>We provide <literal>LazyTraceExecutor</literal>, <literal>TraceableExecutorService</literal>, and <literal>TraceableScheduledExecutorService</literal>. Those implementations create spans each time a new task is submitted, invoked, or scheduled.</simpara>
<simpara>The following example shows how to pass tracing information with <literal>TraceableExecutorService</literal> when working with <literal>CompletableFuture</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">CompletableFuture&lt;Long&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; {
	// perform some logic
	return 1_000_000L;
}, new TraceableExecutorService(beanFactory, executorService,
		// 'calculateTax' explicitly names the span - this param is optional
		"calculateTax"));</programlisting>
<important>
<simpara>Sleuth does not work with <literal>parallelStream()</literal> out of the box.
If you want to have the tracing information propagated through the stream, you have to use the approach with <literal>supplyAsync(&#8230;&#8203;)</literal>, as shown earlier.</simpara>
</important>
<section xml:id="_customization_of_executors">
<title>Customization of Executors</title>
<simpara>Sometimes, you need to set up a custom instance of the <literal>AsyncExecutor</literal>.
The following example shows how to set up such a custom <literal>Executor</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Configuration
@EnableAutoConfiguration
@EnableAsync
static class CustomExecutorConfig extends AsyncConfigurerSupport {

	@Autowired BeanFactory beanFactory;

	@Override public Executor getAsyncExecutor() {
		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
		// CUSTOMIZE HERE
		executor.setCorePoolSize(7);
		executor.setMaxPoolSize(42);
		executor.setQueueCapacity(11);
		executor.setThreadNamePrefix("MyExecutor-");
		// DON'T FORGET TO INITIALIZE
		executor.initialize();
		return new LazyTraceExecutor(this.beanFactory, executor);
	}
}</programlisting>
</section>
</section>
</section>
<section xml:id="_messaging">
<title>Messaging</title>
<simpara>Features from this section can be disabled by setting the <literal>spring.sleuth.messaging.enabled</literal> property with value equal to <literal>false</literal>.</simpara>
<section xml:id="_spring_integration_and_spring_cloud_stream">
<title>Spring Integration and Spring Cloud Stream</title>
<simpara>Spring Cloud Sleuth integrates with <link xl:href="https://projects.spring.io/spring-integration/">Spring Integration</link>.
It creates spans for publish and subscribe events.
To disable Spring Integration instrumentation, set <literal>spring.sleuth.integration.enabled</literal> to <literal>false</literal>.</simpara>
<simpara>You can provide the <literal>spring.sleuth.integration.patterns</literal> pattern to explicitly provide the names of channels that you want to include for tracing.
By default, all channels but <literal>hystrixStreamOutput</literal> channel are included.</simpara>
<important>
<simpara>When using the <literal>Executor</literal> to build a Spring Integration <literal>IntegrationFlow</literal>, you must use the untraced version of the <literal>Executor</literal>.
Decorating the Spring Integration Executor Channel with <literal>TraceableExecutorService</literal> causes the spans to be improperly closed.</simpara>
</important>
</section>
<section xml:id="_spring_rabbitmq">
<title>Spring RabbitMq</title>
<simpara>We instrument the <literal>RabbitTemplate</literal> so that tracing headers get injected
into the message.</simpara>
<simpara>To block this feature, set <literal>spring.sleuth.messaging.rabbit.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_spring_kafka">
<title>Spring Kafka</title>
<simpara>We instrument the Spring Kafka&#8217;s <literal>ProducerFactory</literal> and <literal>ConsumerFactory</literal>
so that tracing headers get injected into the created Spring Kafka&#8217;s
<literal>Producer</literal> and <literal>Consumer</literal>.</simpara>
<simpara>To block this feature, set <literal>spring.sleuth.messaging.kafka.enabled</literal> to <literal>false</literal>.</simpara>
<note>
<simpara>We do not support context propagation via <literal>@KafkaListener</literal> annotation.
Check <link xl:href="https://github.com/spring-cloud/spring-cloud-sleuth/issues/1001">this issue for more information</link>.</simpara>
</note>
</section>
</section>
<section xml:id="_zuul_2">
<title>Zuul</title>
<simpara>We instrument the Zuul Ribbon integration by enriching the Ribbon requests with tracing information.
To disable Zuul support, set the <literal>spring.sleuth.zuul.enabled</literal> property to <literal>false</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="_running_examples">
<title>Running examples</title>
<simpara>You can see the running examples deployed in the <link xl:href="https://run.pivotal.io/">Pivotal Web Services</link>.
Check them out at the following links:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://docssleuth-zipkin-server.cfapps.io/">Zipkin for apps presented in the samples to the top</link>. First make
a request to <link xl:href="https://docssleuth-service1.cfapps.io/start">Service 1</link> and then check out the trace in Zipkin.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://docsbrewing-zipkin-server.cfapps.io/">Zipkin for Brewery on PWS</link>, its <link xl:href="https://github.com/spring-cloud-samples/brewery">Github Code</link>.
Ensure that you&#8217;ve picked the lookback period of 7 days. If there are no traces, go to <link xl:href="https://docsbrewing-presenting.cfapps.io/">Presenting application</link>
and order some beers. Then check Zipkin for traces.</simpara>
</listitem>
</itemizedlist>
</chapter>
</part>
<part xml:id="_spring_cloud_consul">
<title>Spring Cloud Consul</title>
<partintro>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
<simpara>This project provides Consul integrations for Spring Boot apps through autoconfiguration
and binding to the Spring Environment and other Spring programming model idioms. With a few
simple annotations you can quickly enable and configure the common patterns inside your
application and build large distributed systems with Consul based components. The
patterns provided include Service Discovery, Control Bus and Configuration.
Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon), Circuit Breaker
(Hystrix) are provided by integration with Spring Cloud Netflix.</simpara>
</partintro>
<chapter xml:id="spring-cloud-consul-install">
<title>Install Consul</title>
<simpara>Please see the <link xl:href="https://www.consul.io/intro/getting-started/install.html">installation documentation</link> for instructions on how to install Consul.</simpara>
</chapter>
<chapter xml:id="spring-cloud-consul-agent">
<title>Consul Agent</title>
<simpara>A Consul Agent client must be available to all Spring Cloud Consul applications.  By default, the Agent client is expected to be at <literal>localhost:8500</literal>.  See the <link xl:href="https://consul.io/docs/agent/basics.html">Agent documentation</link> for specifics on how to start an Agent client and how to connect to a cluster of Consul Agent Servers.  For development, after you have installed consul, you may start a Consul Agent using the following command:</simpara>
<screen>./src/main/bash/local_run_consul.sh</screen>
<simpara>This will start an agent in server mode on port 8500, with the ui available at <link xl:href="http://localhost:8500">http://localhost:8500</link></simpara>
</chapter>
<chapter xml:id="spring-cloud-consul-discovery">
<title>Service Discovery with Consul</title>
<simpara>Service Discovery is one of the key tenets of a microservice based architecture. Trying to hand configure each client or some form of convention can be very difficult to do and can be very brittle.  Consul provides Service Discovery services via an <link xl:href="https://www.consul.io/docs/agent/http.html">HTTP API</link> and <link xl:href="https://www.consul.io/docs/agent/dns.html">DNS</link>.  Spring Cloud Consul leverages the HTTP API for service registration and discovery.  This does not prevent non-Spring Cloud applications from leveraging the DNS interface.  Consul Agents servers are run in a <link xl:href="https://www.consul.io/docs/internals/architecture.html">cluster</link> that communicates via a <link xl:href="https://www.consul.io/docs/internals/gossip.html">gossip protocol</link> and uses the <link xl:href="https://www.consul.io/docs/internals/consensus.html">Raft consensus protocol</link>.</simpara>
<section xml:id="_how_to_activate">
<title>How to activate</title>
<simpara>To activate Consul Service Discovery use the starter with group <literal>org.springframework.cloud</literal> and artifact id <literal>spring-cloud-starter-consul-discovery</literal>. See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
</section>
<section xml:id="_registering_with_consul">
<title>Registering with Consul</title>
<simpara>When a client registers with Consul, it provides meta-data about itself such as host and port, id, name and tags.  An HTTP <link xl:href="https://www.consul.io/docs/agent/checks.html">Check</link> is created by default that Consul hits the <literal>/health</literal> endpoint every 10 seconds.  If the health check fails, the service instance is marked as critical.</simpara>
<simpara>Example Consul client:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello world";
    }

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</programlisting>
<simpara>(i.e. utterly normal Spring Boot app).  If the Consul client is located somewhere other than <literal>localhost:8500</literal>, the configuration is required to locate the client. Example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      host: localhost
      port: 8500</screen>
</para>
</formalpara>
<caution>
<simpara>If you use <link linkend="spring-cloud-consul-config">Spring Cloud Consul Config</link>, the above values will need to be placed in <literal>bootstrap.yml</literal> instead of <literal>application.yml</literal>.</simpara>
</caution>
<simpara>The default service name, instance id and port, taken from the <literal>Environment</literal>, are <literal>${spring.application.name}</literal>, the Spring Context ID and <literal>${server.port}</literal> respectively.</simpara>
<simpara>To disable the Consul Discovery Client you can set <literal>spring.cloud.consul.discovery.enabled</literal> to <literal>false</literal>.</simpara>
<simpara>To disable the service registration you can set <literal>spring.cloud.consul.discovery.register</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_http_health_check">
<title>HTTP Health Check</title>
<simpara>The health check for a Consul instance defaults to "/health", which is the default locations of a useful endpoint in a Spring Boot Actuator application. You need to change these, even for an Actuator application if you use a non-default context path or servlet path (e.g. <literal>server.servletPath=/foo</literal>) or management endpoint path (e.g. <literal>management.server.servlet.context-path=/admin</literal>). The interval that Consul uses to check the health endpoint may also be configured.  "10s" and "1m" represent 10 seconds and 1 minute respectively.  Example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      discovery:
        healthCheckPath: ${management.server.servlet.context-path}/health
        healthCheckInterval: 15s</screen>
</para>
</formalpara>
<simpara>You can disable the health check by setting <literal>management.health.consul.enabled=false</literal>.</simpara>
<section xml:id="_metadata_and_consul_tags">
<title>Metadata and Consul tags</title>
<simpara>Consul does not yet support metadata on services. Spring Cloud&#8217;s <literal>ServiceInstance</literal> has a <literal>Map&lt;String, String&gt; metadata</literal> field. Spring Cloud Consul uses Consul tags to approximate metadata until Consul officially supports metadata. Tags with the form <literal>key=value</literal> will be split and used as a <literal>Map</literal> key and value respectively. Tags without the equal <literal>=</literal> sign, will be used as both the key and value.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      discovery:
        tags: foo=bar, baz</screen>
</para>
</formalpara>
<simpara>The above configuration will result in a map with <literal>foo&#8594;bar</literal> and <literal>baz&#8594;baz</literal>.</simpara>
</section>
<section xml:id="_making_the_consul_instance_id_unique">
<title>Making the Consul Instance ID Unique</title>
<simpara>By default a consul instance is registered with an ID that is equal to its Spring Application Context ID. By default, the Spring Application Context ID is <literal>${spring.application.name}:comma,separated,profiles:${server.port}</literal>. For most cases, this will allow multiple instances of one service to run on one machine.  If further uniqueness is required, Using Spring Cloud you can override this by providing a unique identifier in <literal>spring.cloud.consul.discovery.instanceId</literal>. For example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      discovery:
        instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${random.value}}}</screen>
</para>
</formalpara>
<simpara>With this metadata, and multiple service instances deployed on localhost, the random value will kick in there to make the instance unique. In Cloudfoundry the <literal>vcap.application.instance_id</literal> will be populated automatically in a Spring Boot application, so the random value will not be needed.</simpara>
</section>
</section>
<section xml:id="_looking_up_services">
<title>Looking up services</title>
<section xml:id="_using_ribbon">
<title>Using Ribbon</title>
<simpara>Spring Cloud has support for <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-feign">Feign</link> (a REST client builder) and also <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-ribbon">Spring <literal>RestTemplate</literal></link>
for looking up services using the logical service names/ids instead of physical URLs. Both Feign and the discovery-aware RestTemplate utilize <link xl:href="https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#spring-cloud-ribbon">Ribbon</link> for client-side load balancing.</simpara>
<simpara>If you want to access service STORES using the RestTemplate simply declare:</simpara>
<screen>@LoadBalanced
@Bean
public RestTemplate loadbalancedRestTemplate() {
     new RestTemplate();
}</screen>
<simpara>and use it like this (notice how we use the STORES service name/id from Consul instead of a fully qualified domainname):</simpara>
<screen>@Autowired
RestTemplate restTemplate;

public String getFirstProduct() {
   return this.restTemplate.getForObject("https://STORES/products/1", String.class);
}</screen>
<simpara>If you have Consul clusters in multiple datacenters and you want to access a service in another datacenter a service name/id alone is not enough. In that case
you use property <literal>spring.cloud.consul.discovery.datacenters.STORES=dc-west</literal> where <literal>STORES</literal> is the service name/id and <literal>dc-west</literal> is the datacenter
where the STORES service lives.</simpara>
</section>
<section xml:id="_using_the_discoveryclient">
<title>Using the DiscoveryClient</title>
<simpara>You can also use the <literal>org.springframework.cloud.client.discovery.DiscoveryClient</literal> which provides a simple API for discovery clients that is not specific to Netflix, e.g.</simpara>
<screen>@Autowired
private DiscoveryClient discoveryClient;

public String serviceUrl() {
    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances("STORES");
    if (list != null &amp;&amp; list.size() &gt; 0 ) {
        return list.get(0).getUri();
    }
    return null;
}</screen>
</section>
</section>
<section xml:id="_consul_catalog_watch">
<title>Consul Catalog Watch</title>
<simpara>The Consul Catalog Watch takes advantage of the ability of consul to <link xl:href="https://www.consul.io/docs/agent/watches.html#services">watch services</link>. The Catalog Watch makes a blocking Consul HTTP API call to determine if any services have changed. If there is new service data a Heartbeat Event is published.</simpara>
<simpara>To change the frequency of when the Config Watch is called change <literal>spring.cloud.consul.config.discovery.catalog-services-watch-delay</literal>. The default value is 1000, which is in milliseconds. The delay is the amount of time after the end of the previous invocation and the start of the next.</simpara>
<simpara>To disable the Catalog Watch set <literal>spring.cloud.consul.discovery.catalogServicesWatch.enabled=false</literal>.</simpara>
<simpara>The watch uses a Spring <literal>TaskScheduler</literal> to schedule the call to consul. By default it is a <literal>ThreadPoolTaskScheduler</literal> with a <literal>poolSize</literal> of 1. To change the <literal>TaskScheduler</literal>, create a bean of type <literal>TaskScheduler</literal> named with the <literal>ConsulDiscoveryClientConfiguration.CATALOG_WATCH_TASK_SCHEDULER_NAME</literal> constant.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-consul-config">
<title>Distributed Configuration with Consul</title>
<simpara>Consul provides a <link xl:href="https://consul.io/docs/agent/http/kv.html">Key/Value Store</link> for storing configuration and other metadata.  Spring Cloud Consul Config is an alternative to the <link xl:href="https://github.com/spring-cloud/spring-cloud-config">Config Server and Client</link>.  Configuration is loaded into the Spring Environment during the special "bootstrap" phase.  Configuration is stored in the <literal>/config</literal> folder by default.  Multiple <literal>PropertySource</literal> instances are created based on the application&#8217;s name and the active profiles that mimicks the Spring Cloud Config order of resolving properties.  For example, an application with the name "testApp" and with the "dev" profile will have the following property sources created:</simpara>
<screen>config/testApp,dev/
config/testApp/
config/application,dev/
config/application/</screen>
<simpara>The most specific property source is at the top, with the least specific at the bottom.  Properties in the <literal>config/application</literal> folder are applicable to all applications using consul for configuration.  Properties in the <literal>config/testApp</literal> folder are only available to the instances of the service named "testApp".</simpara>
<simpara>Configuration is currently read on startup of the application.  Sending a HTTP POST to <literal>/refresh</literal> will cause the configuration to be reloaded. <xref linkend="spring-cloud-consul-config-watch"/> will also automatically detect changes and reload the application context.</simpara>
<section xml:id="_how_to_activate_2">
<title>How to activate</title>
<simpara>To get started with Consul Configuration use the starter with group <literal>org.springframework.cloud</literal> and artifact id <literal>spring-cloud-starter-consul-config</literal>. See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>This will enable auto-configuration that will setup Spring Cloud Consul Config.</simpara>
</section>
<section xml:id="_customizing">
<title>Customizing</title>
<simpara>Consul Config may be customized using the following properties:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      config:
        enabled: true
        prefix: configuration
        defaultContext: apps
        profileSeparator: '::'</screen>
</para>
</formalpara>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to "false" disables Consul Config</simpara>
</listitem>
<listitem>
<simpara><literal>prefix</literal> sets the base folder for configuration values</simpara>
</listitem>
<listitem>
<simpara><literal>defaultContext</literal> sets the folder name used by all applications</simpara>
</listitem>
<listitem>
<simpara><literal>profileSeparator</literal> sets the value of the separator used to separate the profile name in property sources with profiles</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="spring-cloud-consul-config-watch">
<title>Config Watch</title>
<simpara>The Consul Config Watch takes advantage of the ability of consul to <link xl:href="https://www.consul.io/docs/agent/watches.html#keyprefix">watch a key prefix</link>. The Config Watch makes a blocking Consul HTTP API call to determine if any relevant configuration data has changed for the current application. If there is new configuration data a Refresh Event is published. This is equivalent to calling the <literal>/refresh</literal> actuator endpoint.</simpara>
<simpara>To change the frequency of when the Config Watch is called change <literal>spring.cloud.consul.config.watch.delay</literal>. The default value is 1000, which is in milliseconds. The delay is the amount of time after the end of the previous invocation and the start of the next.</simpara>
<simpara>To disable the Config Watch set <literal>spring.cloud.consul.config.watch.enabled=false</literal>.</simpara>
<simpara>The watch uses a Spring <literal>TaskScheduler</literal> to schedule the call to consul. By default it is a <literal>ThreadPoolTaskScheduler</literal> with a <literal>poolSize</literal> of 1. To change the <literal>TaskScheduler</literal>, create a bean of type <literal>TaskScheduler</literal> named with the <literal>ConsulConfigAutoConfiguration.CONFIG_WATCH_TASK_SCHEDULER_NAME</literal> constant.</simpara>
</section>
<section xml:id="spring-cloud-consul-config-format">
<title>YAML or Properties with Config</title>
<simpara>It may be more convenient to store a blob of properties in YAML or Properties format as opposed to individual key/value pairs.  Set the <literal>spring.cloud.consul.config.format</literal> property to <literal>YAML</literal> or <literal>PROPERTIES</literal>. For example to use YAML:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      config:
        format: YAML</screen>
</para>
</formalpara>
<simpara>YAML must be set in the appropriate <literal>data</literal> key in consul. Using the defaults above the keys would look like:</simpara>
<screen>config/testApp,dev/data
config/testApp/data
config/application,dev/data
config/application/data</screen>
<simpara>You could store a YAML document in any of the keys listed above.</simpara>
<simpara>You can change the data key using <literal>spring.cloud.consul.config.data-key</literal>.</simpara>
</section>
<section xml:id="spring-cloud-consul-config-git2consul">
<title>git2consul with Config</title>
<simpara>git2consul is a Consul community project that loads files from a git repository to individual keys into Consul. By default the names of the keys are names of the files. YAML and Properties files are supported with file extensions of <literal>.yml</literal> and <literal>.properties</literal> respectively.  Set the <literal>spring.cloud.consul.config.format</literal> property to <literal>FILES</literal>. For example:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<screen>spring:
  cloud:
    consul:
      config:
        format: FILES</screen>
</para>
</formalpara>
<simpara>Given the following keys in <literal>/config</literal>, the <literal>development</literal> profile and an application name of <literal>foo</literal>:</simpara>
<screen>.gitignore
application.yml
bar.properties
foo-development.properties
foo-production.yml
foo.properties
master.ref</screen>
<simpara>the following property sources would be created:</simpara>
<screen>config/foo-development.properties
config/foo.properties
config/application.yml</screen>
<simpara>The value of each key needs to be a properly formatted YAML or Properties file.</simpara>
</section>
<section xml:id="spring-cloud-consul-failfast">
<title>Fail Fast</title>
<simpara>It may be convenient in certain circumstances (like local development or certain test scenarios) to not fail if consul isn&#8217;t available for configuration. Setting <literal>spring.cloud.consul.config.failFast=false</literal> in <literal>bootstrap.yml</literal> will cause the configuration module to log a warning rather than throw an exception. This will allow the application to continue startup normally.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-consul-retry">
<title>Consul Retry</title>
<simpara>If you expect that the consul agent may occasionally be unavailable when
your app starts, you can ask it to keep trying after a failure. You need to add
<literal>spring-retry</literal> and <literal>spring-boot-starter-aop</literal> to your classpath. The default
behaviour is to retry 6 times with an initial backoff interval of 1000ms and an
exponential multiplier of 1.1 for subsequent backoffs. You can configure these
properties (and others) using <literal>spring.cloud.consul.retry.*</literal> configuration properties.
This works with both Spring Cloud Consul Config and Discovery registration.</simpara>
<tip>
<simpara>To take full control of the retry add a <literal>@Bean</literal> of type
<literal>RetryOperationsInterceptor</literal> with id "consulRetryInterceptor". Spring
Retry has a <literal>RetryInterceptorBuilder</literal> that makes it easy to create one.</simpara>
</tip>
</chapter>
<chapter xml:id="spring-cloud-consul-bus">
<title>Spring Cloud Bus with Consul</title>
<section xml:id="_how_to_activate_3">
<title>How to activate</title>
<simpara>To get started with the Consul Bus use the starter with group <literal>org.springframework.cloud</literal> and artifact id <literal>spring-cloud-starter-consul-bus</literal>. See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link> for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>See the <link xl:href="https://cloud.spring.io/spring-cloud-bus/">Spring Cloud Bus</link> documentation for the available actuator endpoints and howto send custom messages.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-consul-hystrix">
<title>Circuit Breaker with Hystrix</title>
<simpara>Applications can use the Hystrix Circuit Breaker provided by the Spring Cloud Netflix project by including this starter in the projects pom.xml: <literal>spring-cloud-starter-hystrix</literal>.  Hystrix doesn&#8217;t depend on the Netflix Discovery Client. The <literal>@EnableHystrix</literal> annotation should be placed on a configuration class (usually the main class). Then methods can be annotated with <literal>@HystrixCommand</literal> to be protected by a circuit breaker. See <link xl:href="https://projects.spring.io/spring-cloud/spring-cloud.html#_circuit_breaker_hystrix_clients">the documentation</link> for more details.</simpara>
</chapter>
<chapter xml:id="spring-cloud-consul-turbine">
<title>Hystrix metrics aggregation with Turbine and Consul</title>
<simpara>Turbine (provided by the Spring Cloud Netflix project), aggregates multiple instances Hystrix metrics streams, so the dashboard can display an aggregate view. Turbine uses the <literal>DiscoveryClient</literal> interface to lookup relevant instances. To use Turbine with Spring Cloud Consul, configure the Turbine application in a manner similar to the following examples:</simpara>
<formalpara>
<title>pom.xml</title>
<para>
<screen>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-netflix-turbine&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;</screen>
</para>
</formalpara>
<simpara>Notice that the Turbine dependency is not a starter. The turbine starter includes support for Netflix Eureka.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<screen>spring.application.name: turbine
applications: consulhystrixclient
turbine:
  aggregator:
    clusterConfig: ${applications}
  appConfig: ${applications}</screen>
</para>
</formalpara>
<simpara>The <literal>clusterConfig</literal> and <literal>appConfig</literal> sections must match, so it&#8217;s useful to put the comma-separated list of service ID&#8217;s into a separate configuration property.</simpara>
<formalpara>
<title>Turbine.java</title>
<para>
<screen>@EnableTurbine
@SpringBootApplication
public class Turbine {
    public static void main(String[] args) {
        SpringApplication.run(DemoturbinecommonsApplication.class, args);
    }
}</screen>
</para>
</formalpara>
</chapter>
</part>
<part xml:id="_spring_cloud_zookeeper">
<title>Spring Cloud Zookeeper</title>
<partintro>
<simpara>This project provides Zookeeper integrations for Spring Boot applications through
autoconfiguration and binding to the Spring Environment and other Spring programming model
idioms. With a few annotations, you can quickly enable and configure the common patterns
inside your application and build large distributed systems with Zookeeper based
components. The provided patterns include Service Discovery and Configuration. Integration
with Spring Cloud Netflix provides Intelligent Routing (Zuul), Client Side Load Balancing
(Ribbon), and Circuit Breaker (Hystrix).</simpara>
</partintro>
<chapter xml:id="spring-cloud-zookeeper-install">
<title>Install Zookeeper</title>
<simpara>See the <link xl:href="https://zookeeper.apache.org/doc/current/zookeeperStarted.html">installation
documentation</link> for instructions on how to install Zookeeper.</simpara>
<simpara>Spring Cloud Zookeeper uses Apache Curator behind the scenes.
While Zookeeper 3.5.x is still considered "beta" by the Zookeeper development team,
the reality is that it is used in production by many users.
However, Zookeeper 3.4.x is also used in production.
Prior to Apache Curator 4.0, both versions of Zookeeper were supported via two versions of Apache Curator.
Starting with Curator 4.0 both versions of Zookeeper are supported via the same Curator libraries.</simpara>
<simpara>In case you are integrating with version 3.4 you need to change the Zookeeper dependency
that comes shipped with <literal>curator</literal>, and thus <literal>spring-cloud-zookeeper</literal>.
To do so simply exclude that dependency and add the 3.4.x version like shown below.</simpara>
<formalpara>
<title>maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-zookeeper-all&lt;/artifactId&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;
            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;
    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;
    &lt;version&gt;3.4.12&lt;/version&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">compile('org.springframework.cloud:spring-cloud-starter-zookeeper-all') {
  exclude group: 'org.apache.zookeeper', module: 'zookeeper'
}
compile('org.apache.zookeeper:zookeeper:3.4.12') {
  exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-discovery">
<title>Service Discovery with Zookeeper</title>
<simpara>Service Discovery is one of the key tenets of a microservice based architecture. Trying to
hand-configure each client or some form of convention can be difficult to do and can be
brittle. <link xl:href="https://curator.apache.org">Curator</link>(A Java library for Zookeeper) provides Service
Discovery through a <link xl:href="https://curator.apache.org/curator-x-discovery/">Service Discovery
Extension</link>. Spring Cloud Zookeeper uses this extension for service registration and
discovery.</simpara>
<section xml:id="_activating">
<title>Activating</title>
<simpara>Including a dependency on
<literal>org.springframework.cloud:spring-cloud-starter-zookeeper-discovery</literal> enables
autoconfiguration that sets up Spring Cloud Zookeeper Discovery.</simpara>
<note>
<simpara>For web functionality, you still need to include
<literal>org.springframework.boot:spring-boot-starter-web</literal>.</simpara>
</note>
<caution>
<simpara>When working with version 3.4 of Zookeeper you need to change
the way you include the dependency as described <link linkend="spring-cloud-zookeeper-install">here</link>.</simpara>
</caution>
</section>
<section xml:id="_registering_with_zookeeper">
<title>Registering with Zookeeper</title>
<simpara>When a client registers with Zookeeper, it provides metadata (such as host and port, ID,
and name) about itself.</simpara>
<simpara>The following example shows a Zookeeper client:</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello world";
    }

    public static void main(String[] args) {
        new SpringApplicationBuilder(Application.class).web(true).run(args);
    }

}</programlisting>
<note>
<simpara>The preceding example is a normal Spring Boot application.</simpara>
</note>
<simpara>If Zookeeper is located somewhere other than <literal>localhost:2181</literal>, the configuration must
provide the location of the server, as shown in the following example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">spring:
  cloud:
    zookeeper:
      connect-string: localhost:2181</programlisting>
</para>
</formalpara>
<caution>
<simpara>If you use <link linkend="spring-cloud-zookeeper-config">Spring Cloud Zookeeper Config</link>, the
values shown in the preceding example need to be in <literal>bootstrap.yml</literal> instead of
<literal>application.yml</literal>.</simpara>
</caution>
<simpara>The default service name, instance ID, and port (taken from the <literal>Environment</literal>) are
<literal>${spring.application.name}</literal>, the Spring Context ID, and <literal>${server.port}</literal>, respectively.</simpara>
<simpara>Having <literal>spring-cloud-starter-zookeeper-discovery</literal> on the classpath makes the app into both
a Zookeeper &#8220;service&#8221; (that is, it registers itself) and a &#8220;client&#8221; (that is, it can
query Zookeeper to locate other services).</simpara>
<simpara>If you would like to disable the Zookeeper Discovery Client, you can set
<literal>spring.cloud.zookeeper.discovery.enabled</literal> to <literal>false</literal>.</simpara>
</section>
<section xml:id="_using_the_discoveryclient_2">
<title>Using the DiscoveryClient</title>
<simpara>Spring Cloud has support for
<link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-feign">Feign</link>
(a REST client builder) and
<link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-ribbon">Spring
<literal>RestTemplate</literal></link>, using logical service names instead of physical URLs.</simpara>
<simpara>You can also use the <literal>org.springframework.cloud.client.discovery.DiscoveryClient</literal>, which
provides a simple API for discovery clients that is not specific to Netflix, as shown in
the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired
private DiscoveryClient discoveryClient;

public String serviceUrl() {
    List&lt;ServiceInstance&gt; list = discoveryClient.getInstances("STORES");
    if (list != null &amp;&amp; list.size() &gt; 0 ) {
        return list.get(0).getUri().toString();
    }
    return null;
}</programlisting>
</section>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-netflix">
<title>Using Spring Cloud Zookeeper with Spring Cloud Netflix Components</title>
<simpara>Spring Cloud Netflix supplies useful tools that work regardless of which <literal>DiscoveryClient</literal>
implementation you use. Feign, Turbine, Ribbon, and Zuul all work with Spring Cloud
Zookeeper.</simpara>
<section xml:id="_ribbon_with_zookeeper">
<title>Ribbon with Zookeeper</title>
<simpara>Spring Cloud Zookeeper provides an implementation of Ribbon&#8217;s <literal>ServerList</literal>. When you use
the  <literal>spring-cloud-starter-zookeeper-discovery</literal>, Ribbon is autoconfigured to use the
<literal>ZookeeperServerList</literal> by default.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-service-registry">
<title>Spring Cloud Zookeeper and Service Registry</title>
<simpara>Spring Cloud Zookeeper implements the <literal>ServiceRegistry</literal> interface, letting developers
register arbitrary services in a programmatic way.</simpara>
<simpara>The <literal>ServiceInstanceRegistration</literal> class offers a <literal>builder()</literal> method to create a
<literal>Registration</literal> object that can be used by the <literal>ServiceRegistry</literal>, as shown in the following
example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Autowired
private ZookeeperServiceRegistry serviceRegistry;

public void registerThings() {
    ZookeeperRegistration registration = ServiceInstanceRegistration.builder()
            .defaultUriSpec()
            .address("anyUrl")
            .port(10)
            .name("/a/b/c/d/anotherservice")
            .build();
    this.serviceRegistry.register(registration);
}</programlisting>
<section xml:id="_instance_status">
<title>Instance Status</title>
<simpara>Netflix Eureka supports having instances that are <literal>OUT_OF_SERVICE</literal> registered with the
server. These instances are not returned as active service instances. This is useful for
behaviors such as blue/green deployments. (Note that the Curator Service Discovery recipe
does not  support this behavior.) Taking advantage of the flexible payload has let Spring
Cloud Zookeeper implement <literal>OUT_OF_SERVICE</literal> by updating some specific metadata and then
filtering on that metadata in the Ribbon <literal>ZookeeperServerList</literal>. The <literal>ZookeeperServerList</literal>
filters out all non-null instance statuses that do not equal <literal>UP</literal>. If the instance status
field is empty, it is considered to be <literal>UP</literal> for backwards compatibility. To change the
status of an instance, make a <literal>POST</literal> with <literal>OUT_OF_SERVICE</literal> to the <literal>ServiceRegistry</literal>
instance status actuator endpoint, as shown in the following example:</simpara>
<programlisting language="sh" linenumbering="unnumbered">$ http POST http://localhost:8081/service-registry status=OUT_OF_SERVICE</programlisting>
<note>
<simpara>The preceding example uses the <literal>http</literal> command from <link xl:href="https://httpie.org">https://httpie.org</link>.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-dependencies">
<title>Zookeeper Dependencies</title>
<simpara>The following topics cover how to work with Spring Cloud Zookeeper dependencies:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-zookeeper-dependencies-using"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-zookeeper-dependencies-activating"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-zookeeper-dependencies-setting-up"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-zookeeper-dependencies-configuring"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="spring-cloud-zookeeper-dependencies-using">
<title>Using the Zookeeper Dependencies</title>
<simpara>Spring Cloud Zookeeper gives you a possibility to provide dependencies of your application
as properties. As dependencies, you can understand other applications that are registered
in Zookeeper and which you would like to call through
<link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-feign">Feign</link>
(a REST client builder) and <link xl:href="https://github.com/spring-cloud/spring-cloud-netflix/blob/master/docs/src/main/asciidoc/spring-cloud-netflix.adoc#spring-cloud-ribbon">Spring <literal>RestTemplate</literal></link>.</simpara>
<simpara>You can also use the Zookeeper Dependency Watchers functionality to control and monitor
the state of your dependencies.</simpara>
</section>
<section xml:id="spring-cloud-zookeeper-dependencies-activating">
<title>Activating Zookeeper Dependencies</title>
<simpara>Including a dependency on
<literal>org.springframework.cloud:spring-cloud-starter-zookeeper-discovery</literal> enables
autoconfiguration that sets up Spring Cloud Zookeeper Dependencies. Even if you provide
the dependencies in your properties, you can turn off the dependencies. To do so, set the
<literal>spring.cloud.zookeeper.dependency.enabled</literal> property to false (it defaults to <literal>true</literal>).</simpara>
</section>
<section xml:id="spring-cloud-zookeeper-dependencies-setting-up">
<title>Setting up Zookeeper Dependencies</title>
<simpara>Consider the following example of dependency representation:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">spring.application.name: yourServiceName
spring.cloud.zookeeper:
  dependencies:
    newsletter:
      path: /path/where/newsletter/has/registered/in/zookeeper
      loadBalancerType: ROUND_ROBIN
      contentTypeTemplate: application/vnd.newsletter.$version+json
      version: v1
      headers:
        header1:
            - value1
        header2:
            - value2
      required: false
      stubs: org.springframework:foo:stubs
    mailing:
      path: /path/where/mailing/has/registered/in/zookeeper
      loadBalancerType: ROUND_ROBIN
      contentTypeTemplate: application/vnd.mailing.$version+json
      version: v1
      required: true</programlisting>
</para>
</formalpara>
<simpara>The next few sections go through each part of the dependency one by one. The root property
name is <literal>spring.cloud.zookeeper.dependencies</literal>.</simpara>
<section xml:id="spring-cloud-zookeeper-dependencies-setting-up-aliases">
<title>Aliases</title>
<simpara>Below the root property you have to represent each dependency as an alias. This is due to
the constraints of Ribbon, which requires that the application ID be placed in the URL.
Consequently, you cannot pass any complex path, suchas  <literal>/myApp/myRoute/name</literal>). The alias
is the name you use instead of the <literal>serviceId</literal> for <literal>DiscoveryClient</literal>, <literal>Feign</literal>, or
<literal>RestTemplate</literal>.</simpara>
<simpara>In the previous examples, the aliases are <literal>newsletter</literal> and <literal>mailing</literal>. The following
example shows Feign usage with a <literal>newsletter</literal> alias:</simpara>
<programlisting language="java" linenumbering="unnumbered">@FeignClient("newsletter")
public interface NewsletterService {
        @RequestMapping(method = RequestMethod.GET, value = "/newsletter")
        String getNewsletters();
}</programlisting>
</section>
<section xml:id="_path">
<title>Path</title>
<simpara>The path is represented by the <literal>path</literal> YAML property and is the path under which the
dependency is registered under Zookeeper. As described in the
<link linkend="spring-cloud-zookeeper-dependencies-setting-up-aliases">previous section</link>, Ribbon
operates on URLs. As a result, this path is not compliant with its requirement.
That is why Spring Cloud Zookeeper maps the alias to the proper path.</simpara>
</section>
<section xml:id="_load_balancer_type">
<title>Load Balancer Type</title>
<simpara>The load balancer type is represented by <literal>loadBalancerType</literal> YAML property.</simpara>
<simpara>If you know what kind of load-balancing strategy has to be applied when calling this
particular dependency, you can provide it in the YAML file, and it is automatically
applied. You can choose one of the following load balancing strategies:</simpara>
<itemizedlist>
<listitem>
<simpara>STICKY: Once chosen, the instance is always called.</simpara>
</listitem>
<listitem>
<simpara>RANDOM: Picks an instance randomly.</simpara>
</listitem>
<listitem>
<simpara>ROUND_ROBIN: Iterates over instances over and over again.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="__literal_content_type_literal_template_and_version">
<title><literal>Content-Type</literal> Template and Version</title>
<simpara>The <literal>Content-Type</literal> template and version are represented by the <literal>contentTypeTemplate</literal> and
<literal>version</literal> YAML properties.</simpara>
<simpara>If you version your API in the <literal>Content-Type</literal> header, you do not want to add this header
to each of your requests. Also, if you want to call a new version of the API, you do not
want to roam around your code to bump up the API version. That is why you can provide a
<literal>contentTypeTemplate</literal> with a special <literal>$version</literal> placeholder. That placeholder will be filled by the value of the
<literal>version</literal> YAML property. Consider the following example of a <literal>contentTypeTemplate</literal>:</simpara>
<screen>application/vnd.newsletter.$version+json</screen>
<simpara>Further consider the following <literal>version</literal>:</simpara>
<screen>v1</screen>
<simpara>The combination of <literal>contentTypeTemplate</literal> and version results in the creation of a
<literal>Content-Type</literal> header for each request, as follows:</simpara>
<screen>application/vnd.newsletter.v1+json</screen>
</section>
<section xml:id="_default_headers">
<title>Default Headers</title>
<simpara>Default headers are represented by the <literal>headers</literal> map in YAML.</simpara>
<simpara>Sometimes, each call to a dependency requires setting up of some default headers. To not
do that in code, you can set them up in the YAML file, as shown in the following example
<literal>headers</literal> section:</simpara>
<programlisting language="yml" linenumbering="unnumbered">headers:
    Accept:
        - text/html
        - application/xhtml+xml
    Cache-Control:
        - no-cache</programlisting>
<simpara>That <literal>headers</literal> section results in adding the <literal>Accept</literal> and <literal>Cache-Control</literal> headers with
appropriate list of values in your HTTP request.</simpara>
</section>
<section xml:id="_required_dependencies">
<title>Required Dependencies</title>
<simpara>Required dependencies are represented by <literal>required</literal> property in YAML.</simpara>
<simpara>If one of your dependencies is required to be up when your application boots, you can set
the <literal>required: true</literal> property in the YAML file.</simpara>
<simpara>If your application cannot localize the required dependency during boot time, it throws an
exception, and the Spring Context fails to set up. In other words, your application cannot
start if the required dependency is not registered in Zookeeper.</simpara>
<simpara>You can read more about Spring Cloud Zookeeper Presence Checker
<link linkend="spring-cloud-zookeeper-dependency-watcher-presence-checker">later in this document</link>.</simpara>
</section>
<section xml:id="_stubs">
<title>Stubs</title>
<simpara>You can provide a colon-separated path to the JAR containing stubs of the dependency, as
shown in the following example:</simpara>
<simpara><literal>stubs: org.springframework:myApp:stubs</literal></simpara>
<simpara>where:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>org.springframework</literal> is the <literal>groupId</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>myApp</literal> is the <literal>artifactId</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>stubs</literal> is the classifier. (Note that <literal>stubs</literal> is the default value.)</simpara>
</listitem>
</itemizedlist>
<simpara>Because <literal>stubs</literal> is the default classifier, the preceding example is equal to the following
example:</simpara>
<simpara><literal>stubs: org.springframework:myApp</literal></simpara>
</section>
</section>
<section xml:id="spring-cloud-zookeeper-dependencies-configuring">
<title>Configuring Spring Cloud Zookeeper Dependencies</title>
<simpara>You can set the following properties to enable or disable parts of Zookeeper Dependencies
functionalities:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>spring.cloud.zookeeper.dependencies</literal>: If you do not set this property, you cannot use
Zookeeper Dependencies.</simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.zookeeper.dependency.ribbon.enabled</literal> (enabled by default): Ribbon requires
either explicit global configuration or a particular one for a dependency. By turning on
this property, runtime load balancing strategy resolution is possible, and you can use the
<literal>loadBalancerType</literal> section of the Zookeeper Dependencies. The configuration that needs
this property has an implementation of <literal>LoadBalancerClient</literal> that delegates to the
<literal>ILoadBalancer</literal> presented in the next bullet.</simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.zookeeper.dependency.ribbon.loadbalancer</literal> (enabled by default): Thanks to
this property, the custom <literal>ILoadBalancer</literal> knows that the part of the URI passed to Ribbon
might actually be the alias that has to be resolved to a proper path in Zookeeper. Without
this property, you cannot register applications under nested paths.</simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.zookeeper.dependency.headers.enabled</literal> (enabled by default): This property
registers a <literal>RibbonClient</literal> that automatically appends appropriate headers and content
types with their versions, as presented in the Dependency configuration. Without this
setting, those two parameters do not work.</simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.zookeeper.dependency.resttemplate.enabled</literal> (enabled by default): When
enabled, this property modifies the request headers of a <literal>@LoadBalanced</literal>-annotated
<literal>RestTemplate</literal> such that it passes headers and content type with the version set in
dependency configuration. Without this setting, those two parameters do not work.</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-dependency-watcher">
<title>Spring Cloud Zookeeper Dependency Watcher</title>
<simpara>The Dependency Watcher mechanism lets you register listeners to your dependencies. The
functionality is, in fact, an implementation of the <literal>Observator</literal> pattern. When a
dependency changes, its state (to either UP or DOWN), some custom logic can be applied.</simpara>
<section xml:id="_activating_2">
<title>Activating</title>
<simpara>Spring Cloud Zookeeper Dependencies functionality needs to be enabled for you to use the
Dependency Watcher mechanism.</simpara>
</section>
<section xml:id="_registering_a_listener">
<title>Registering a Listener</title>
<simpara>To register a listener, you must implement an interface called
<literal>org.springframework.cloud.zookeeper.discovery.watcher.DependencyWatcherListener</literal> and
register it as a bean. The interface gives you one method:</simpara>
<programlisting language="java" linenumbering="unnumbered">void stateChanged(String dependencyName, DependencyState newState);</programlisting>
<simpara>If you want to register a listener for a particular dependency, the <literal>dependencyName</literal> would
be the discriminator for your concrete implementation. <literal>newState</literal> provides you with
information about whether your dependency has changed to <literal>CONNECTED</literal> or <literal>DISCONNECTED</literal>.</simpara>
</section>
<section xml:id="spring-cloud-zookeeper-dependency-watcher-presence-checker">
<title>Using the Presence Checker</title>
<simpara>Bound with the Dependency Watcher is the functionality called Presence Checker. It lets
you provide custom behavior when your application boots, to react according to the state
of your dependencies.</simpara>
<simpara>The default implementation of the abstract
<literal>org.springframework.cloud.zookeeper.discovery.watcher.presence.DependencyPresenceOnStartupVerifier</literal>
class is the
<literal>org.springframework.cloud.zookeeper.discovery.watcher.presence.DefaultDependencyPresenceOnStartupVerifier</literal>,
which works in the following way.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the dependency is marked us <literal>required</literal> and is not in Zookeeper, when your application
boots, it throws an exception and shuts down.</simpara>
</listitem>
<listitem>
<simpara>If the dependency is not <literal>required</literal>, the
<literal>org.springframework.cloud.zookeeper.discovery.watcher.presence.LogMissingDependencyChecker</literal>
logs that the dependency is missing at the <literal>WARN</literal> level.</simpara>
</listitem>
</orderedlist>
<simpara>Because the <literal>DefaultDependencyPresenceOnStartupVerifier</literal> is registered only when there is
no bean of type <literal>DependencyPresenceOnStartupVerifier</literal>, this functionality can be
overridden.</simpara>
</section>
</chapter>
<chapter xml:id="spring-cloud-zookeeper-config">
<title>Distributed Configuration with Zookeeper</title>
<simpara>Zookeeper provides a
<link xl:href="https://zookeeper.apache.org/doc/current/zookeeperOver.html#sc_dataModelNameSpace">hierarchical namespace</link>
that lets clients store arbitrary data, such as configuration data. Spring Cloud Zookeeper
Config is an alternative to the
<link xl:href="https://github.com/spring-cloud/spring-cloud-config">Config Server and Client</link>.
Configuration is loaded into the Spring Environment during the special &#8220;bootstrap&#8221;
phase. Configuration is stored in the <literal>/config</literal> namespace by default. Multiple
<literal>PropertySource</literal> instances are created, based on the application&#8217;s name and the active
profiles, to mimic the Spring Cloud Config order of resolving properties. For example, an
application with a name of <literal>testApp</literal> and with the <literal>dev</literal> profile has the following property
sources created for it:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>config/testApp,dev</literal></simpara>
</listitem>
<listitem>
<simpara><literal>config/testApp</literal></simpara>
</listitem>
<listitem>
<simpara><literal>config/application,dev</literal></simpara>
</listitem>
<listitem>
<simpara><literal>config/application</literal></simpara>
</listitem>
</itemizedlist>
<simpara>The most specific property source is at the top, with the least specific at the bottom.
Properties in the <literal>config/application</literal> namespace apply to all applications that use
zookeeper for configuration. Properties in the <literal>config/testApp</literal> namespace are available
only to the instances of the service named <literal>testApp</literal>.</simpara>
<simpara>Configuration is currently read on startup of the application. Sending a HTTP <literal>POST</literal>
request to <literal>/refresh</literal> causes the configuration to be reloaded. Watching the configuration
namespace (which Zookeeper supports) is not currently implemented.</simpara>
<section xml:id="_activating_3">
<title>Activating</title>
<simpara>Including a dependency on
<literal>org.springframework.cloud:spring-cloud-starter-zookeeper-config</literal> enables
autoconfiguration that sets up Spring Cloud Zookeeper Config.</simpara>
<caution>
<simpara>When working with version 3.4 of Zookeeper you need to change
the way you include the dependency as described <link linkend="spring-cloud-zookeeper-install">here</link>.</simpara>
</caution>
</section>
<section xml:id="_customizing_2">
<title>Customizing</title>
<simpara>Zookeeper Config may be customized by setting the following properties:</simpara>
<formalpara>
<title>bootstrap.yml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">spring:
  cloud:
    zookeeper:
      config:
        enabled: true
        root: configuration
        defaultContext: apps
        profileSeparator: '::'</programlisting>
</para>
</formalpara>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal>: Setting this value to <literal>false</literal> disables Zookeeper Config.</simpara>
</listitem>
<listitem>
<simpara><literal>root</literal>: Sets the base namespace for configuration values.</simpara>
</listitem>
<listitem>
<simpara><literal>defaultContext</literal>: Sets the name used by all applications.</simpara>
</listitem>
<listitem>
<simpara><literal>profileSeparator</literal>: Sets the value of the separator used to separate the profile name in
property sources with profiles.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_access_control_lists_acls">
<title>Access Control Lists (ACLs)</title>
<simpara>You can add authentication information for Zookeeper ACLs by calling the <literal>addAuthInfo</literal>
method of a <literal>CuratorFramework</literal> bean. One way to accomplish this is to provide your own
<literal>CuratorFramework</literal> bean, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@BoostrapConfiguration
public class CustomCuratorFrameworkConfig {

  @Bean
  public CuratorFramework curatorFramework() {
    CuratorFramework curator = new CuratorFramework();
    curator.addAuthInfo("digest", "user:password".getBytes());
    return curator;
  }

}</programlisting>
<simpara>Consult
<link xl:href="https://github.com/spring-cloud/spring-cloud-zookeeper/blob/master/spring-cloud-zookeeper-core/src/main/java/org/springframework/cloud/zookeeper/ZookeeperAutoConfiguration.java">the ZookeeperAutoConfiguration class</link>
to see how the <literal>CuratorFramework</literal> bean&#8217;s default configuration.</simpara>
<simpara>Alternatively, you can add your credentials from a class that depends on the existing
<literal>CuratorFramework</literal> bean, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@BoostrapConfiguration
public class DefaultCuratorFrameworkConfig {

  public ZookeeperConfig(CuratorFramework curator) {
    curator.addAuthInfo("digest", "user:password".getBytes());
  }

}</programlisting>
<simpara>The creation of this bean must occur during the boostrapping phase. You can register
configuration classes to run during this phase by annotating them with
<literal>@BootstrapConfiguration</literal> and including them in a comma-separated list that you set as the
value of the <literal>org.springframework.cloud.bootstrap.BootstrapConfiguration</literal> property in the
<literal>resources/META-INF/spring.factories</literal> file, as shown in the following example:</simpara>
<formalpara>
<title>resources/META-INF/spring.factories</title>
<para>
<screen>org.springframework.cloud.bootstrap.BootstrapConfiguration=\
my.project.CustomCuratorFrameworkConfig,\
my.project.DefaultCuratorFrameworkConfig</screen>
</para>
</formalpara>
<simpara>Unresolved directive in spring-cloud.adoc - include::../../../../cli/docs/src/main/asciidoc/spring-cloud-cli.adoc[]</simpara>
</section>
</chapter>
</part>
<part xml:id="_spring_cloud_security">
<title>Spring Cloud Security</title>
<partintro>
<simpara>Spring Cloud Security offers a set of primitives for building secure
applications and services with minimum fuss. A declarative model which
can be heavily configured externally (or centrally) lends itself to
the implementation of large systems of co-operating, remote components,
usually with a central indentity management service. It is also extremely
easy to use in a service platform like Cloud Foundry. Building on
Spring Boot and Spring Security OAuth2 we can quickly create systems that
implement common patterns like single sign on, token relay and token
exchange.</simpara>
<note>
<simpara>Spring Cloud is released under the non-restrictive Apache 2.0 license. If you would like to contribute to this section of the documentation or if you find an error, please find the source code and issue trackers in the project at <link xl:href="https://github.com/spring-cloud/spring-cloud-security/tree/master/src/main/asciidoc">github</link>.</simpara>
</note>
</partintro>
<chapter xml:id="_quickstart">
<title>Quickstart</title>
<section xml:id="_oauth2_single_sign_on">
<title>OAuth2 Single Sign On</title>
<simpara>Here&#8217;s a Spring Cloud "Hello World" app with HTTP Basic
authentication and a single user account:</simpara>
<formalpara>
<title>app.groovy</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Grab('spring-boot-starter-security')
@Controller
class Application {

  @RequestMapping('/')
  String home() {
    'Hello World'
  }

}</programlisting>
</para>
</formalpara>
<simpara>You can run it with <literal>spring run app.groovy</literal> and watch the logs for the password (username is "user"). So far this is just the default for a Spring Boot app.</simpara>
<simpara>Here&#8217;s a Spring Cloud app with OAuth2 SSO:</simpara>
<formalpara>
<title>app.groovy</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Controller
@EnableOAuth2Sso
class Application {

  @RequestMapping('/')
  String home() {
    'Hello World'
  }

}</programlisting>
</para>
</formalpara>
<simpara>Spot the difference? This app will actually behave exactly the same as
the previous one, because it doesn&#8217;t know it&#8217;s OAuth2 credentals
yet.</simpara>
<simpara>You can register an app in github quite easily, so try that if you
want a production app on your own domain. If you are happy to test on
localhost:8080, then set up these properties in your application
configuration:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">security:
  oauth2:
    client:
      clientId: bd1c0a783ccdd1c9b9e4
      clientSecret: 1a9030fbca47a5b2c28e92f19050bb77824b5ad1
      accessTokenUri: https://github.com/login/oauth/access_token
      userAuthorizationUri: https://github.com/login/oauth/authorize
      clientAuthenticationScheme: form
    resource:
      userInfoUri: https://api.github.com/user
      preferTokenInfo: false</programlisting>
</para>
</formalpara>
<simpara>run the app above and it will redirect to github for authorization. If
you are already signed into github you won&#8217;t even notice that it has
authenticated.  These credentials will only work if your app is
running on port 8080.</simpara>
<simpara>To limit the scope that the client asks for when it obtains an access token
you can set <literal>security.oauth2.client.scope</literal> (comma separated or an array in YAML). By
default the scope is empty and it is up to to Authorization Server to
decide what the defaults should be, usually depending on the settings in
the client registration that it holds.</simpara>
<note>
<simpara>The examples above are all Groovy scripts. If you want to write the
same code in Java (or Groovy) you need to add Spring Security OAuth2
to the classpath (e.g. see the
<link xl:href="https://github.com/spring-cloud-samples/sso">sample here</link>).</simpara>
</note>
</section>
<section xml:id="_oauth2_protected_resource">
<title>OAuth2 Protected Resource</title>
<simpara>You want to protect an API resource with an OAuth2 token? Here&#8217;s a
simple example (paired with the client above):</simpara>
<formalpara>
<title>app.groovy</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Grab('spring-cloud-starter-security')
@RestController
@EnableResourceServer
class Application {

  @RequestMapping('/')
  def home() {
    [message: 'Hello World']
  }

}</programlisting>
</para>
</formalpara>
<simpara>and</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">security:
  oauth2:
    resource:
      userInfoUri: https://api.github.com/user
      preferTokenInfo: false</programlisting>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="_more_detail">
<title>More Detail</title>
<section xml:id="_single_sign_on">
<title>Single Sign On</title>
<note>
<simpara>All of the OAuth2 SSO and resource server features moved to Spring Boot
in version 1.3. You can find documentation in the
<link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot user guide</link>.</simpara>
</note>
</section>
<section xml:id="_token_relay">
<title>Token Relay</title>
<simpara>A Token Relay is where an OAuth2 consumer acts as a Client and
forwards the incoming token to outgoing resource requests. The
consumer can be a pure Client (like an SSO application) or a Resource
Server.</simpara>
<section xml:id="_client_token_relay">
<title>Client Token Relay</title>
<simpara>If your app is a user facing OAuth2 client (i.e. has declared
<literal>@EnableOAuth2Sso</literal> or <literal>@EnableOAuth2Client</literal>) then it has an
<literal>OAuth2ClientContext</literal> in request scope from Spring Boot. You can
create your own <literal>OAuth2RestTemplate</literal> from this context and an
autowired <literal>OAuth2ProtectedResourceDetails</literal>, and then the context will
always forward the access token downstream, also refreshing the access
token automatically if it expires. (These are features of Spring
Security and Spring Boot.)</simpara>
<note>
<simpara>Spring Boot (1.4.1) does not create an
<literal>OAuth2ProtectedResourceDetails</literal> automatically if you are using
<literal>client_credentials</literal> tokens. In that case you need to create your own
<literal>ClientCredentialsResourceDetails</literal> and configure it with
<literal>@ConfigurationProperties("security.oauth2.client")</literal>.</simpara>
</note>
</section>
<section xml:id="_client_token_relay_in_zuul_proxy">
<title>Client Token Relay in Zuul Proxy</title>
<simpara>If your app also has a
<link xl:href="https://cloud.spring.io/spring-cloud.html#netflix-zuul-reverse-proxy">Spring
Cloud Zuul</link> embedded reverse proxy (using <literal>@EnableZuulProxy</literal>) then you
can ask it to forward OAuth2 access tokens downstream to the services
it is proxying. Thus the SSO app above can be enhanced simply like
this:</simpara>
<formalpara>
<title>app.groovy</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Controller
@EnableOAuth2Sso
@EnableZuulProxy
class Application {

}</programlisting>
</para>
</formalpara>
<simpara>and it will (in addition to logging the user in and grabbing a token)
pass the authentication token downstream to the <literal>/proxy/*</literal>
services. If those services are implemented with
<literal>@EnableResourceServer</literal> then they will get a valid token in the
correct header.</simpara>
<simpara>How does it work? The <literal>@EnableOAuth2Sso</literal> annotation pulls in
<literal>spring-cloud-starter-security</literal> (which you could do manually in a
traditional app), and that in turn triggers some autoconfiguration for
a <literal>ZuulFilter</literal>, which itself is activated because Zuul is on the
classpath (via <literal>@EnableZuulProxy</literal>). The
<link xl:href="https://github.com/spring-cloud/spring-cloud-security/tree/master/src/main/java/org/springframework/cloud/security/oauth2/proxy/OAuth2TokenRelayFilter.java">filter</link>
just extracts an access token from the currently authenticated user,
and puts it in a request header for the downstream requests.</simpara>
</section>
<section xml:id="_resource_server_token_relay">
<title>Resource Server Token Relay</title>
<simpara>If your app has <literal>@EnableResourceServer</literal> you might want to relay the
incoming token downstream to other services. If you use a
<literal>RestTemplate</literal> to contact the downstream services then this is just a
matter of how to create the template with the right context.</simpara>
<simpara>If your service uses <literal>UserInfoTokenServices</literal> to authenticate incoming
tokens (i.e. it is using the <literal>security.oauth2.user-info-uri</literal>
configuration), then you can simply create an <literal>OAuth2RestTemplate</literal>
using an autowired <literal>OAuth2ClientContext</literal> (it will be populated by the
authentication process before it hits the backend code). Equivalently
(with Spring Boot 1.4), you could inject a
<literal>UserInfoRestTemplateFactory</literal> and grab its <literal>OAuth2RestTemplate</literal> in
your configuration. For example:</simpara>
<formalpara>
<title>MyConfiguration.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Bean
public OAuth2RestTemplate restTemplate(UserInfoRestTemplateFactory factory) {
    return factory.getUserInfoRestTemplate();
}</programlisting>
</para>
</formalpara>
<simpara>This rest template will then have the same <literal>OAuth2ClientContext</literal>
(request-scoped) that is used by the authentication filter, so you can
use it to send requests with the same access token.</simpara>
<simpara>If your app is not using <literal>UserInfoTokenServices</literal> but is still a client
(i.e. it declares <literal>@EnableOAuth2Client</literal> or <literal>@EnableOAuth2Sso</literal>), then
with Spring Security Cloud any <literal>OAuth2RestOperations</literal> that the user
creates from an <literal>@Autowired</literal> <literal>@OAuth2Context</literal> will also forward
tokens. This feature is implemented by default as an MVC handler
interceptor, so it only works in Spring MVC. If you are not using MVC
you could use a custom filter or AOP interceptor wrapping an
<literal>AccessTokenContextRelay</literal> to provide the same feature.</simpara>
<simpara>Here&#8217;s a basic
example showing the use of an autowired rest template created
elsewhere ("foo.com" is a Resource Server accepting the same tokens as
the surrounding app):</simpara>
<formalpara>
<title>MyController.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Autowired
private OAuth2RestOperations restTemplate;

@RequestMapping("/relay")
public String relay() {
    ResponseEntity&lt;String&gt; response =
      restTemplate.getForEntity("https://foo.com/bar", String.class);
    return "Success! (" + response.getBody() + ")";
}</programlisting>
</para>
</formalpara>
<simpara>If you don&#8217;t want to forward tokens (and that is a valid
choice, since you might want to act as yourself, rather than the
client that sent you the token), then you only need to create your own
<literal>OAuth2Context</literal> instead of autowiring the default one.</simpara>
<simpara>Feign clients will also pick up an interceptor that uses the
<literal>OAuth2ClientContext</literal> if it is available, so they should also do a
token relay anywhere where a <literal>RestTemplate</literal> would.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_configuring_authentication_downstream_of_a_zuul_proxy">
<title>Configuring Authentication Downstream of a Zuul Proxy</title>
<simpara>You can control the authorization behaviour downstream of an
<literal>@EnableZuulProxy</literal> through the <literal>proxy.auth.*</literal> settings. Example:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">proxy:
  auth:
    routes:
      customers: oauth2
      stores: passthru
      recommendations: none</programlisting>
</para>
</formalpara>
<simpara>In this example the "customers" service gets an OAuth2 token relay,
the "stores" service gets a passthrough (the authorization header is
just passed downstream), and the "recommendations" service has its
authorization header removed. The default behaviour is to do a token
relay if there is a token available, and passthru otherwise.</simpara>
<simpara>See
<link xl:href="https://github.com/spring-cloud/spring-cloud-security/tree/master/src/main/java/org/springframework/cloud/security/oauth2/proxy/ProxyAuthenticationProperties">
ProxyAuthenticationProperties</link> for full details.</simpara>
</chapter>
</part>
<part xml:id="_spring_cloud_for_cloud_foundry">
<title>Spring Cloud for Cloud Foundry</title>
<partintro>
<simpara>Spring Cloud for Cloudfoundry makes it easy to run
<link xl:href="https://github.com/spring-cloud">Spring Cloud</link> apps in
<link xl:href="https://github.com/cloudfoundry">Cloud Foundry</link> (the Platform as a
Service). Cloud Foundry has the notion of a "service", which is
middlware that you "bind" to an app, essentially providing it with an
environment variable containing credentials (e.g. the location and
username to use for the service).</simpara>
<simpara>The <literal>spring-cloud-cloudfoundry-commons</literal> module configures the
Reactor-based Cloud Foundry Java client, v 3.0, and can be used standalone.</simpara>
<simpara>The <literal>spring-cloud-cloudfoundry-web</literal> project provides basic support for
some enhanced features of webapps in Cloud Foundry: binding
automatically to single-sign-on services and optionally enabling
sticky routing for discovery.</simpara>
<simpara>The <literal>spring-cloud-cloudfoundry-discovery</literal> project provides an
implementation of Spring Cloud Commons <literal>DiscoveryClient</literal> so you can
<literal>@EnableDiscoveryClient</literal> and provide your credentials as
<literal>spring.cloud.cloudfoundry.discovery.[username,password]</literal> (also <literal>*.url</literal> if you are not connecting to <link xl:href="https://run.pivotal.io">Pivotal Web Services</link>) and then you
can use the <literal>DiscoveryClient</literal> directly or via a <literal>LoadBalancerClient</literal>.</simpara>
<simpara>The first time you use it the discovery client might be slow owing to
the fact that it has to get an access token from Cloud Foundry.</simpara>
</partintro>
<chapter xml:id="_discovery">
<title>Discovery</title>
<simpara>Here&#8217;s a Spring Cloud app with Cloud Foundry discovery:</simpara>
<formalpara>
<title>app.groovy</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Grab('org.springframework.cloud:spring-cloud-cloudfoundry')
@RestController
@EnableDiscoveryClient
class Application {

  @Autowired
  DiscoveryClient client

  @RequestMapping('/')
  String home() {
    'Hello from ' + client.getLocalServiceInstance()
  }

}</programlisting>
</para>
</formalpara>
<simpara>If you run it without any service bindings:</simpara>
<screen>$ spring jar app.jar app.groovy
$ cf push -p app.jar</screen>
<simpara>It will show its app name in the home page.</simpara>
<simpara>The <literal>DiscoveryClient</literal> can lists all the apps in a space, according to
the credentials it is authenticated with, where the space defaults to
the one the client is running in (if any). If neither org nor space
are configured, they default per the user&#8217;s profile in Cloud Foundry.</simpara>
</chapter>
<chapter xml:id="_single_sign_on_2">
<title>Single Sign On</title>
<note>
<simpara>All of the OAuth2 SSO and resource server features moved to Spring Boot
in version 1.3. You can find documentation in the
<link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot user guide</link>.</simpara>
</note>
<simpara>This project provides automatic binding from CloudFoundry service
credentials to the Spring Boot features. If you have a CloudFoundry
service called "sso", for instance, with credentials containing
"client_id", "client_secret" and "auth_domain", it will bind
automatically to the Spring OAuth2 client that you enable with
<literal>@EnableOAuth2Sso</literal> (from Spring Boot). The name of the service can be
parameterized using <literal>spring.oauth2.sso.serviceId</literal>.</simpara>
</chapter>
</part>
<part xml:id="_spring_cloud_contract">
<title>Spring Cloud Contract</title>
<partintro>
<simpara><emphasis>Documentation Authors: Adam Dudczak, Mathias Düsterhöft, Marcin Grzejszczak, Dennis Kieselhorst, Jakub Kubryński, Karol Lassak,
Olga Maciaszek-Sharma, Mariusz Smykuła, Dave Syer, Jay Bryant</emphasis></simpara>
<simpara>Finchley.RELEASE</simpara>
</partintro>
<chapter xml:id="_spring_cloud_contract_2">
<title>Spring Cloud Contract</title>
<simpara>You need confidence when pushing new features to a new application or service in a
distributed system. This project provides support for Consumer Driven Contracts and
service schemas in Spring applications (for both HTTP and message-based interactions),
covering a range of options for writing tests,  publishing them as assets, and asserting
that a contract is kept by producers and consumers.</simpara>
</chapter>
<chapter xml:id="_spring_cloud_contract_verifier_introduction">
<title>Spring Cloud Contract Verifier Introduction</title>
<tip>
<simpara>The Accurest project was initially started by Marcin Grzejszczak and Jakub Kubrynski
(<link xl:href="http://codearte.io">codearte.io</link>)</simpara>
</tip>
<simpara>Spring Cloud Contract Verifier enables Consumer Driven Contract (CDC) development of
JVM-based applications. It moves TDD to the level of software architecture.</simpara>
<simpara>Spring Cloud Contract Verifier ships with <emphasis>Contract Definition Language</emphasis> (CDL). Contract
definitions are used to produce the following resources:</simpara>
<itemizedlist>
<listitem>
<simpara>JSON stub definitions to be used by WireMock when doing integration testing on the
client code (<emphasis>client tests</emphasis>). Test code must still be written by hand, and test data is
produced by Spring Cloud Contract Verifier.</simpara>
</listitem>
<listitem>
<simpara>Messaging routes, if you&#8217;re using a messaging service. We integrate with Spring
Integration, Spring Cloud Stream, Spring AMQP, and Apache Camel. You can also set your
own integrations.</simpara>
</listitem>
<listitem>
<simpara>Acceptance tests (in JUnit or Spock) are used to verify if server-side implementation
of the API is compliant with the contract (<emphasis>server tests</emphasis>). A full test is generated by
Spring Cloud Contract Verifier.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_why_a_contract_verifier">
<title>Why a Contract Verifier?</title>
<simpara>Assume that we have a system consisting of multiple microservices:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-contract/master/docs/src/main/asciidoc/images/Deps.png"/>
</imageobject>
<textobject><phrase>Microservices Architecture</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_testing_issues">
<title>Testing issues</title>
<simpara>If we wanted to test the application in top left corner to determine whether it can
communicate with other services, we could do one of two things:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy all microservices and perform end-to-end tests.</simpara>
</listitem>
<listitem>
<simpara>Mock other microservices in unit/integration tests.</simpara>
</listitem>
</itemizedlist>
<simpara>Both have their advantages but also a lot of disadvantages.</simpara>
<simpara><emphasis role="strong">Deploy all microservices and perform end to end tests</emphasis></simpara>
<simpara>Advantages:</simpara>
<itemizedlist>
<listitem>
<simpara>Simulates production.</simpara>
</listitem>
<listitem>
<simpara>Tests real communication between services.</simpara>
</listitem>
</itemizedlist>
<simpara>Disadvantages:</simpara>
<itemizedlist>
<listitem>
<simpara>To test one microservice, we have to deploy 6 microservices, a couple of databases,
etc.</simpara>
</listitem>
<listitem>
<simpara>The environment where the tests run is locked for a single suite of tests (nobody else
would be able to run the tests in the meantime).</simpara>
</listitem>
<listitem>
<simpara>They take a long time to run.</simpara>
</listitem>
<listitem>
<simpara>The feedback comes very late in the process.</simpara>
</listitem>
<listitem>
<simpara>They are extremely hard to debug.</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Mock other microservices in unit/integration tests</emphasis></simpara>
<simpara>Advantages:</simpara>
<itemizedlist>
<listitem>
<simpara>They provide very fast feedback.</simpara>
</listitem>
<listitem>
<simpara>They have no infrastructure requirements.</simpara>
</listitem>
</itemizedlist>
<simpara>Disadvantages:</simpara>
<itemizedlist>
<listitem>
<simpara>The implementor of the service creates stubs that might have nothing to do with
reality.</simpara>
</listitem>
<listitem>
<simpara>You can go to production with passing tests and failing production.</simpara>
</listitem>
</itemizedlist>
<simpara>To solve the aforementioned issues, Spring Cloud Contract Verifier with Stub Runner was
created. The main idea is to give you very fast feedback, without the need to set up the
whole world of microservices. If you work on stubs, then the only applications you need
are those that your application directly uses.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-contract/master/docs/src/main/asciidoc/images/Stubs2.png"/>
</imageobject>
<textobject><phrase>Stubbed Services</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Spring Cloud Contract Verifier gives you the certainty that the stubs that you use were
created by the service that you&#8217;re calling. Also, if you can use them, it means that they
were tested against the producer&#8217;s side. In short, you can trust those stubs.</simpara>
</section>
</section>
<section xml:id="_purposes">
<title>Purposes</title>
<simpara>The main purposes of Spring Cloud Contract Verifier with Stub Runner are:</simpara>
<itemizedlist>
<listitem>
<simpara>To ensure that WireMock/Messaging stubs (used when developing the client) do exactly
what the actual server-side implementation does.</simpara>
</listitem>
<listitem>
<simpara>To promote ATDD method and Microservices architectural style.</simpara>
</listitem>
<listitem>
<simpara>To provide a way to publish changes in contracts that are immediately visible on both
sides.</simpara>
</listitem>
<listitem>
<simpara>To generate boilerplate test code to be used on the server side.</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>Spring Cloud Contract Verifier&#8217;s purpose is NOT to start writing business
features in the contracts. Assume that we have a business use case of fraud check. If a
user can be a fraud for 100 different reasons, we would assume that you would create 2
contracts, one for the positive case and one for the negative case. Contract tests are
used to test contracts between applications and not to simulate full behavior.</simpara>
</important>
</section>
<section xml:id="_how_it_works">
<title>How It Works</title>
<simpara>This section explores how Spring Cloud Contract Verifier with Stub Runner works.</simpara>
<section xml:id="spring-cloud-contract-verifier-intro-three-second-tour">
<title>A Three-second Tour</title>
<simpara>This very brief tour walks through using Spring Cloud Contract:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-contract-verifier-intro-three-second-tour-producer"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-contract-verifier-intro-three-second-tour-consumer"/></simpara>
</listitem>
</itemizedlist>
<simpara>You can find a somewhat longer tour
<link linkend="spring-cloud-contract-verifier-intro-three-minute-tour">here</link>.</simpara>
<section xml:id="spring-cloud-contract-verifier-intro-three-second-tour-producer">
<title>On the Producer Side</title>
<simpara>To start working with Spring Cloud Contract, add files with <literal>REST/</literal> messaging contracts
expressed in either Groovy DSL or YAML to the contracts directory, which is set by the
<literal>contractsDslDir</literal> property. By default, it is <literal>$rootDir/src/test/resources/contracts</literal>.</simpara>
<simpara>Then add the Spring Cloud Contract Verifier dependency and plugin to your build file, as
shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The following listing shows how to add the plugin, which should go in the build/plugins
portion of the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Running <literal>./mvnw clean install</literal> automatically generates tests that verify the application
compliance with the added contracts. By default, the tests get generated under
<literal>org.springframework.cloud.contract.verifier.tests.</literal>.</simpara>
<simpara>As the implementation of the functionalities described by the contracts is not yet
present, the tests fail.</simpara>
<simpara>To make them pass, you must add the correct implementation of either handling HTTP
requests or messages. Also, you must add a correct base test class for auto-generated
tests to the project. This class is extended by all the auto-generated tests, and it
should contain all the setup necessary to run them (for example <literal>RestAssuredMockMvc</literal>
controller setup or messaging test setup).</simpara>
<simpara>Once the implementation and the test base class are in place, the tests pass, and both the
application and the stub artifacts are built and installed in the local Maven repository.
The changes can now be merged, and both the application and the stub artifacts may be
published in an online repository.</simpara>
</section>
<section xml:id="spring-cloud-contract-verifier-intro-three-second-tour-consumer">
<title>On the Consumer Side</title>
<simpara><literal>Spring Cloud Contract Stub Runner</literal> can be used in the integration tests to get a running
WireMock instance or messaging route that simulates the actual service.</simpara>
<simpara>To do so, add the dependency to <literal>Spring Cloud Contract Stub Runner</literal>, as shown in the
following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>You can get the Producer-side stubs installed in your Maven repository in either of two
ways:</simpara>
<itemizedlist>
<listitem>
<simpara>By checking out the Producer side repository and adding contracts and generating the stubs
by running the following commands:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cd local-http-server-repo
$ ./mvnw clean install -DskipTests</programlisting>
<tip>
<simpara>The tests are being skipped because the Producer-side contract implementation is not
in place yet, so the automatically-generated contract tests fail.</simpara>
</tip>
</listitem>
<listitem>
<simpara>By getting already-existing producer service stubs from a remote repository. To do so,
pass the stub artifact IDs and artifact repository URL as <literal>Spring Cloud Contract
Stub Runner</literal> properties, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner:
  ids: 'com.example:http-server-dsl:+:stubs:8080'
  repositoryRoot: https://repo.spring.io/libs-snapshot</programlisting>
</listitem>
</itemizedlist>
<simpara>Now you can annotate your test class with <literal>@AutoConfigureStubRunner</literal>. In the annotation,
provide the <literal>group-id</literal> and <literal>artifact-id</literal> values for <literal>Spring Cloud Contract Stub Runner</literal> to
run the collaborators' stubs for you, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.NONE)
@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:6565"},
		stubsMode = StubRunnerProperties.StubsMode.LOCAL)
@DirtiesContext
public class LoanApplicationServiceTests {</programlisting>
<tip>
<simpara>Use the <literal>REMOTE</literal> <literal>stubsMode</literal> when downloading stubs from an online repository and
<literal>LOCAL</literal> for offline work.</simpara>
</tip>
<simpara>Now, in your integration test, you can receive stubbed versions of HTTP responses or
messages that are expected to be emitted by the collaborator service.</simpara>
</section>
</section>
<section xml:id="spring-cloud-contract-verifier-intro-three-minute-tour">
<title>A Three-minute Tour</title>
<simpara>This brief tour walks through using Spring Cloud Contract:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="spring-cloud-contract-verifier-intro-three-minute-tour-producer"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="spring-cloud-contract-verifier-intro-three-minute-tour-consumer"/></simpara>
</listitem>
</itemizedlist>
<simpara>You can find an even more brief tour
<link linkend="spring-cloud-contract-verifier-intro-three-second-tour">here</link>.</simpara>
<section xml:id="spring-cloud-contract-verifier-intro-three-minute-tour-producer">
<title>On the Producer Side</title>
<simpara>To start working with <literal>Spring Cloud Contract</literal>, add files with <literal>REST/</literal> messaging contracts
expressed in either Groovy DSL or YAML to the contracts directory, which is set by the
<literal>contractsDslDir</literal> property. By default, it is <literal>$rootDir/src/test/resources/contracts</literal>.</simpara>
<simpara>For the HTTP stubs, a contract defines what kind of response should be returned for a
given request (taking into account the HTTP methods, URLs, headers, status codes, and so
on). The following example shows how an HTTP stub contract in Groovy DSL:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package contracts

org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'PUT'
		url '/fraudcheck'
		body([
			   "client.id": $(regex('[0-9]{10}')),
			   loanAmount: 99999
		])
		headers {
			contentType('application/json')
		}
	}
	response {
		status OK()
		body([
			   fraudCheckStatus: "FRAUD",
			   "rejection.reason": "Amount too high"
		])
		headers {
			contentType('application/json')
		}
	}
}</programlisting>
<simpara>The same contract expressed in YAML would look like the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">request:
  method: PUT
  url: /fraudcheck
  body:
    "client.id": 1234567890
    loanAmount: 99999
  headers:
    Content-Type: application/json
  matchers:
    body:
      - path: $.['client.id']
        type: by_regex
        value: "[0-9]{10}"
response:
  status: 200
  body:
    fraudCheckStatus: "FRAUD"
    "rejection.reason": "Amount too high"
  headers:
    Content-Type: application/json;charset=UTF-8</programlisting>
<simpara>In the case of messaging, you can define:</simpara>
<itemizedlist>
<listitem>
<simpara>The input and the output messages can be defined (taking into account from and where it
was sent, the message body, and the header).</simpara>
</listitem>
<listitem>
<simpara>The methods that should be called after the message is received.</simpara>
</listitem>
<listitem>
<simpara>The methods that, when called, should trigger a message.</simpara>
</listitem>
</itemizedlist>
<simpara>The following example shows a Camel messaging contract expressed in Groovy DSL:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def contractDsl = Contract.make {
	label 'some_label'
	input {
		messageFrom('jms:delete')
		messageBody([
				bookName: 'foo'
		])
		messageHeaders {
			header('sample', 'header')
		}
		assertThat('bookWasDeleted()')
	}
}</programlisting>
<simpara>The following example shows the same contract expressed in YAML:</simpara>
<programlisting language="yml" linenumbering="unnumbered">label: some_label
input:
  messageFrom: jms:delete
  messageBody:
    bookName: 'foo'
  messageHeaders:
    sample: header
  assertThat: bookWasDeleted()</programlisting>
<simpara>Then you can add Spring Cloud Contract Verifier dependency and plugin to your build file,
as shown in the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The following listing shows how to add the plugin, which should go in the build/plugins
portion of the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Running <literal>./mvnw clean install</literal> automatically generates tests that verify the application
compliance with the added contracts. By default, the generated tests are under
<literal>org.springframework.cloud.contract.verifier.tests.</literal>.</simpara>
<simpara>The following example shows a sample auto-generated test for an HTTP contract:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void validate_shouldMarkClientAsFraud() throws Exception {
    // given:
        MockMvcRequestSpecification request = given()
                .header("Content-Type", "application/vnd.fraud.v1+json")
                .body("{\"client.id\":\"1234567890\",\"loanAmount\":99999}");

    // when:
        ResponseOptions response = given().spec(request)
                .put("/fraudcheck");

    // then:
        assertThat(response.statusCode()).isEqualTo(200);
        assertThat(response.header("Content-Type")).matches("application/vnd.fraud.v1.json.*");
    // and:
        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
        assertThatJson(parsedJson).field("['fraudCheckStatus']").matches("[A-Z]{5}");
        assertThatJson(parsedJson).field("['rejection.reason']").isEqualTo("Amount too high");
}</programlisting>
<simpara>The preceding example uses Spring&#8217;s <literal>MockMvc</literal> to run the tests. This is the default test
mode for HTTP contracts. However, JAX-RX client and explicit HTTP invocations can also be
used. (To do so, change the <literal>testMode</literal> property of the plugin to <literal>JAX-RS</literal> or <literal>EXPLICIT</literal>,
respectively.)</simpara>
<simpara>Apart from the default JUnit, you can instead use Spock tests, by setting the plugin
<literal>testFramework</literal> property to <literal>Spock</literal>.</simpara>
<tip>
<simpara>You can now also generate WireMock scenarios based on the contracts, by including an
order number followed by an underscore at the beginning of the contract file names.</simpara>
</tip>
<simpara>The following example shows an auto-generated test in Spock for a messaging stub contract:</simpara>
<literallayout class="monospaced">[source,groovy,indent=0]</literallayout>
<screen>given:
	 ContractVerifierMessage inputMessage = contractVerifierMessaging.create(
		\'\'\'{"bookName":"foo"}\'\'\',
		['sample': 'header']
	)

when:
	 contractVerifierMessaging.send(inputMessage, 'jms:delete')

then:
	 noExceptionThrown()
	 bookWasDeleted()</screen>
<simpara>As the implementation of the functionalities described by the contracts is not yet
present, the tests fail.</simpara>
<simpara>To make them pass, you must add the correct implementation of handling either HTTP
requests or messages. Also, you must add a correct base test class for auto-generated
tests to the project. This class is extended by all the auto-generated tests and should
contain all the setup necessary to run them (for example, <literal>RestAssuredMockMvc</literal> controller
setup or messaging test setup).</simpara>
<simpara>Once the implementation and the test base class are in place, the tests pass, and both the
application and the stub artifacts are built and installed in the local Maven repository.
Information about installing the stubs jar to the local repository appears in the logs, as
shown in the following example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">[INFO] --- spring-cloud-contract-maven-plugin:1.0.0.BUILD-SNAPSHOT:generateStubs (default-generateStubs) @ http-server ---
[INFO] Building jar: /some/path/http-server/target/http-server-0.0.1-SNAPSHOT-stubs.jar
[INFO]
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ http-server ---
[INFO] Building jar: /some/path/http-server/target/http-server-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- spring-boot-maven-plugin:1.5.5.BUILD-SNAPSHOT:repackage (default) @ http-server ---
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ http-server ---
[INFO] Installing /some/path/http-server/target/http-server-0.0.1-SNAPSHOT.jar to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT.jar
[INFO] Installing /some/path/http-server/pom.xml to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT.pom
[INFO] Installing /some/path/http-server/target/http-server-0.0.1-SNAPSHOT-stubs.jar to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar</programlisting>
<simpara>You can now merge the changes and publish both the application and the stub artifacts
in an online repository.</simpara>
<simpara><emphasis role="strong">Docker Project</emphasis></simpara>
<simpara>In order to enable working with contracts while creating applications in non-JVM
technologies, the <literal>springcloud/spring-cloud-contract</literal> Docker image has been created. It
contains a project that automatically generates tests for HTTP contracts and executes them
in  <literal>EXPLICIT</literal> test mode. Then, if the tests pass, it generates Wiremock stubs and,
optionally, publishes them to an artifact manager. In order to use the image, you can
mount the contracts into the <literal>/contracts</literal> directory and set a few environment variables.</simpara>
</section>
<section xml:id="spring-cloud-contract-verifier-intro-three-minute-tour-consumer">
<title>On the Consumer Side</title>
<simpara><literal>Spring Cloud Contract Stub Runner</literal> can be used in the integration tests to get a running
WireMock instance or messaging route that simulates the actual service.</simpara>
<simpara>To get started, add the dependency to <literal>Spring Cloud Contract Stub Runner</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>You can get the Producer-side stubs installed in your Maven repository in either of two
ways:</simpara>
<itemizedlist>
<listitem>
<simpara>By checking out the Producer side repository and adding contracts and generating the
stubs by running the following commands:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cd local-http-server-repo
$ ./mvnw clean install -DskipTests</programlisting>
<note>
<simpara>The tests are skipped because the Producer-side contract implementation is not yet
in place, so the automatically-generated contract tests fail.</simpara>
</note>
</listitem>
<listitem>
<simpara>Getting already existing producer service stubs from a remote repository. To do so,
pass the stub artifact IDs and artifact repository URl as <literal>Spring Cloud Contract Stub
Runner</literal> properties, as shown in the following example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner:
  ids: 'com.example:http-server-dsl:+:stubs:8080'
  repositoryRoot: https://repo.spring.io/libs-snapshot</programlisting>
</listitem>
</itemizedlist>
<simpara>Now you can annotate your test class with <literal>@AutoConfigureStubRunner</literal>. In the annotation,
provide the <literal>group-id</literal> and <literal>artifact-id</literal> for <literal>Spring Cloud Contract Stub Runner</literal> to run
the collaborators' stubs for you, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.NONE)
@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:6565"},
		stubsMode = StubRunnerProperties.StubsMode.LOCAL)
@DirtiesContext
public class LoanApplicationServiceTests {</programlisting>
<tip>
<simpara>Use the <literal>REMOTE</literal> <literal>stubsMode</literal> when downloading stubs from an online repository and
<literal>LOCAL</literal> for offline work.</simpara>
</tip>
<simpara>In your integration test, you can receive stubbed versions of HTTP responses or messages
that are expected to be emitted by the collaborator service. You can see entries similar
to the following in the build logs:</simpara>
<programlisting language="bash" linenumbering="unnumbered">2016-07-19 14:22:25.403  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Desired version is + - will try to resolve the latest version
2016-07-19 14:22:25.438  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolved version is 0.0.1-SNAPSHOT
2016-07-19 14:22:25.439  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolving artifact com.example:http-server:jar:stubs:0.0.1-SNAPSHOT using remote repositories []
2016-07-19 14:22:25.451  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolved artifact com.example:http-server:jar:stubs:0.0.1-SNAPSHOT to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar
2016-07-19 14:22:25.465  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Unpacking stub from JAR [URI: file:/path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar]
2016-07-19 14:22:25.475  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Unpacked file to [/var/folders/0p/xwq47sq106x1_g3dtv6qfm940000gq/T/contracts100276532569594265]
2016-07-19 14:22:27.737  INFO 41050 --- [           main] o.s.c.c.stubrunner.StubRunnerExecutor    : All stubs are now running RunningStubs [namesAndPorts={com.example:http-server:0.0.1-SNAPSHOT:stubs=8080}]</programlisting>
</section>
</section>
<section xml:id="_defining_the_contract">
<title>Defining the Contract</title>
<simpara>As consumers of services, we need to define what exactly we want to achieve. We need to
formulate our expectations. That is why we write contracts.</simpara>
<simpara>Assume that you want to send a request containing the ID of a client company and the
amount it wants to borrow from us. You also want to send it to the /fraudcheck url via
the PUT method.</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package contracts

org.springframework.cloud.contract.spec.Contract.make {
	request { // (1)
		method 'PUT' // (2)
		url '/fraudcheck' // (3)
		body([ // (4)
			   "client.id": $(regex('[0-9]{10}')),
			   loanAmount: 99999
		])
		headers { // (5)
			contentType('application/json')
		}
	}
	response { // (6)
		status OK() // (7)
		body([ // (8)
			   fraudCheckStatus: "FRAUD",
			   "rejection.reason": "Amount too high"
		])
		headers { // (9)
			contentType('application/json')
		}
	}
}

/*
From the Consumer perspective, when shooting a request in the integration test:

(1) - If the consumer sends a request
(2) - With the "PUT" method
(3) - to the URL "/fraudcheck"
(4) - with the JSON body that
 * has a field `client.id` that matches a regular expression `[0-9]{10}`
 * has a field `loanAmount` that is equal to `99999`
(5) - with header `Content-Type` equal to `application/json`
(6) - then the response will be sent with
(7) - status equal `200`
(8) - and JSON body equal to
 { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
(9) - with header `Content-Type` equal to `application/json`

From the Producer perspective, in the autogenerated producer-side test:

(1) - A request will be sent to the producer
(2) - With the "PUT" method
(3) - to the URL "/fraudcheck"
(4) - with the JSON body that
 * has a field `client.id` that will have a generated value that matches a regular expression `[0-9]{10}`
 * has a field `loanAmount` that is equal to `99999`
(5) - with header `Content-Type` equal to `application/json`
(6) - then the test will assert if the response has been sent with
(7) - status equal `200`
(8) - and JSON body equal to
 { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
(9) - with header `Content-Type` matching `application/json.*`
 */</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request: # (1)
  method: PUT # (2)
  url: /fraudcheck # (3)
  body: # (4)
    "client.id": 1234567890
    loanAmount: 99999
  headers: # (5)
    Content-Type: application/json
  matchers:
    body:
      - path: $.['client.id'] # (6)
        type: by_regex
        value: "[0-9]{10}"
response: # (7)
  status: 200 # (8)
  body:  # (9)
    fraudCheckStatus: "FRAUD"
    "rejection.reason": "Amount too high"
  headers: # (10)
    Content-Type: application/json;charset=UTF-8


#From the Consumer perspective, when shooting a request in the integration test:
#
#(1) - If the consumer sends a request
#(2) - With the "PUT" method
#(3) - to the URL "/fraudcheck"
#(4) - with the JSON body that
# * has a field `client.id`
# * has a field `loanAmount` that is equal to `99999`
#(5) - with header `Content-Type` equal to `application/json`
#(6) - and a `client.id` json entry matches the regular expression `[0-9]{10}`
#(7) - then the response will be sent with
#(8) - status equal `200`
#(9) - and JSON body equal to
# { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
#(10) - with header `Content-Type` equal to `application/json`
#
#From the Producer perspective, in the autogenerated producer-side test:
#
#(1) - A request will be sent to the producer
#(2) - With the "PUT" method
#(3) - to the URL "/fraudcheck"
#(4) - with the JSON body that
# * has a field `client.id` `1234567890`
# * has a field `loanAmount` that is equal to `99999`
#(5) - with header `Content-Type` equal to `application/json`
#(7) - then the test will assert if the response has been sent with
#(8) - status equal `200`
#(9) - and JSON body equal to
# { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
#(10) - with header `Content-Type` equal to `application/json;charset=UTF-8`</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_client_side">
<title>Client Side</title>
<simpara>Spring Cloud Contract generates stubs, which you can use during client-side testing.
You get a running WireMock instance/Messaging route that simulates the service.
You would like to feed that instance with a proper stub definition.</simpara>
<simpara>At some point in time, you need to send a request to the Fraud Detection service.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">ResponseEntity&lt;FraudServiceResponse&gt; response =
		restTemplate.exchange("http://localhost:" + port + "/fraudcheck", HttpMethod.PUT,
				new HttpEntity&lt;&gt;(request, httpHeaders),
				FraudServiceResponse.class);</programlisting>
<simpara>Annotate your test class with <literal>@AutoConfigureStubRunner</literal>. In the annotation provide the group id and artifact id for the Stub Runner to download stubs of your collaborators.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.NONE)
@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:6565"},
		stubsMode = StubRunnerProperties.StubsMode.LOCAL)
@DirtiesContext
public class LoanApplicationServiceTests {</programlisting>
<simpara>After that, during the tests, Spring Cloud Contract automatically finds the stubs
(simulating the real service) in the Maven repository and exposes them on a configured
(or random) port.</simpara>
</section>
<section xml:id="_server_side">
<title>Server Side</title>
<simpara>Since you are developing your stub, you need to be sure that it actually resembles your
concrete implementation. You cannot have a situation where your stub acts in one way and
your application behaves in a different way, especially in production.</simpara>
<simpara>To ensure that your application behaves the way you define in your stub, tests are
generated from the stub you provide.</simpara>
<simpara>The autogenerated test looks, more or less, like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void validate_shouldMarkClientAsFraud() throws Exception {
    // given:
        MockMvcRequestSpecification request = given()
                .header("Content-Type", "application/vnd.fraud.v1+json")
                .body("{\"client.id\":\"1234567890\",\"loanAmount\":99999}");

    // when:
        ResponseOptions response = given().spec(request)
                .put("/fraudcheck");

    // then:
        assertThat(response.statusCode()).isEqualTo(200);
        assertThat(response.header("Content-Type")).matches("application/vnd.fraud.v1.json.*");
    // and:
        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
        assertThatJson(parsedJson).field("['fraudCheckStatus']").matches("[A-Z]{5}");
        assertThatJson(parsedJson).field("['rejection.reason']").isEqualTo("Amount too high");
}</programlisting>
</section>
</section>
<section xml:id="_step_by_step_guide_to_consumer_driven_contracts_cdc">
<title>Step-by-step Guide to Consumer Driven Contracts (CDC)</title>
<simpara>Consider an example of Fraud Detection and the Loan Issuance process. The business
scenario is such that we want to issue loans to people but do not want them to steal from
us. The current implementation of our system grants loans to everybody.</simpara>
<simpara>Assume that <literal>Loan Issuance</literal> is a client to the <literal>Fraud Detection</literal> server. In the current
sprint, we must develop a new feature: if a client wants to borrow too much money, then
we mark the client as a fraud.</simpara>
<simpara>Technical remark - Fraud Detection has an <literal>artifact-id</literal> of <literal>http-server</literal>, while Loan
Issuance has an artifact-id of <literal>http-client</literal>, and both have a <literal>group-id</literal> of <literal>com.example</literal>.</simpara>
<simpara>Social remark - both client and server development teams need to communicate directly and
discuss changes while going through the process. CDC is all about communication.</simpara>
<simpara>The <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/tree/master/samples/standalone/dsl/http-server">server
side code is available here</link> and <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/tree/master/samples/standalone/dsl/http-client">the
client code here</link>.</simpara>
<tip>
<simpara>In this case, the producer owns the contracts. Physically, all the contract are
in the producer&#8217;s repository.</simpara>
</tip>
<section xml:id="_technical_note">
<title>Technical note</title>
<simpara>If using the <emphasis role="strong">SNAPSHOT</emphasis> / <emphasis role="strong">Milestone</emphasis> / <emphasis role="strong">Release Candidate</emphasis> versions please add the
following section to your build:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;repositories&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
&lt;/repositories&gt;
&lt;pluginRepositories&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_consumer_side_loan_issuance">
<title>Consumer side (Loan Issuance)</title>
<simpara>As a developer of the Loan Issuance service (a consumer of the Fraud Detection server), you might do the following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Start doing TDD by writing a test for your feature.</simpara>
</listitem>
<listitem>
<simpara>Write the missing implementation.</simpara>
</listitem>
<listitem>
<simpara>Clone the Fraud Detection service repository locally.</simpara>
</listitem>
<listitem>
<simpara>Define the contract locally in the repo of Fraud Detection service.</simpara>
</listitem>
<listitem>
<simpara>Add the Spring Cloud Contract Verifier plugin.</simpara>
</listitem>
<listitem>
<simpara>Run the integration tests.</simpara>
</listitem>
<listitem>
<simpara>File a pull request.</simpara>
</listitem>
<listitem>
<simpara>Create an initial implementation.</simpara>
</listitem>
<listitem>
<simpara>Take over the pull request.</simpara>
</listitem>
<listitem>
<simpara>Write the missing implementation.</simpara>
</listitem>
<listitem>
<simpara>Deploy your app.</simpara>
</listitem>
<listitem>
<simpara>Work online.</simpara>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Start doing TDD by writing a test for your feature.</emphasis></simpara>
<programlisting language="groovy" linenumbering="unnumbered">@Test
public void shouldBeRejectedDueToAbnormalLoanAmount() {
	// given:
	LoanApplication application = new LoanApplication(new Client("1234567890"),
			99999);
	// when:
	LoanApplicationResult loanApplication = service.loanApplication(application);
	// then:
	assertThat(loanApplication.getLoanApplicationStatus())
			.isEqualTo(LoanApplicationStatus.LOAN_APPLICATION_REJECTED);
	assertThat(loanApplication.getRejectionReason()).isEqualTo("Amount too high");
}</programlisting>
<simpara>Assume that you have written a test of your new feature. If a loan application for a big
amount is received, the system should reject that loan application with some description.</simpara>
<simpara><emphasis role="strong">Write the missing implementation.</emphasis></simpara>
<simpara>At some point in time, you need to send a request to the Fraud Detection service. Assume
that you need to send the request containing the ID of the client and the amount the
client wants to borrow. You want to send it to the <literal>/fraudcheck</literal> url via the <literal>PUT</literal> method.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">ResponseEntity&lt;FraudServiceResponse&gt; response =
		restTemplate.exchange("http://localhost:" + port + "/fraudcheck", HttpMethod.PUT,
				new HttpEntity&lt;&gt;(request, httpHeaders),
				FraudServiceResponse.class);</programlisting>
<simpara>For simplicity, the port of the Fraud Detection service is set to <literal>8080</literal>, and the
application runs on <literal>8090</literal>.</simpara>
<simpara>If you start the test at this point, it breaks, because no service currently runs on port
<literal>8080</literal>.</simpara>
<simpara><emphasis role="strong">Clone the Fraud Detection service repository locally.</emphasis></simpara>
<simpara>You can start by playing around with the server side contract. To do so, you must first
clone it.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://your-git-server.com/server-side.git local-http-server-repo</programlisting>
<simpara><emphasis role="strong">Define the contract locally in the repo of Fraud Detection service.</emphasis></simpara>
<simpara>As a consumer, you need to define what exactly you want to achieve. You need to formulate
your expectations. To do so, write the following contract:</simpara>
<important>
<simpara>Place the contract under <literal>src/test/resources/contracts/fraud</literal> folder. The <literal>fraud</literal> folder
is important because the producer&#8217;s test base class name references that folder.</simpara>
</important>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package contracts

org.springframework.cloud.contract.spec.Contract.make {
	request { // (1)
		method 'PUT' // (2)
		url '/fraudcheck' // (3)
		body([ // (4)
			   "client.id": $(regex('[0-9]{10}')),
			   loanAmount: 99999
		])
		headers { // (5)
			contentType('application/json')
		}
	}
	response { // (6)
		status OK() // (7)
		body([ // (8)
			   fraudCheckStatus: "FRAUD",
			   "rejection.reason": "Amount too high"
		])
		headers { // (9)
			contentType('application/json')
		}
	}
}

/*
From the Consumer perspective, when shooting a request in the integration test:

(1) - If the consumer sends a request
(2) - With the "PUT" method
(3) - to the URL "/fraudcheck"
(4) - with the JSON body that
 * has a field `client.id` that matches a regular expression `[0-9]{10}`
 * has a field `loanAmount` that is equal to `99999`
(5) - with header `Content-Type` equal to `application/json`
(6) - then the response will be sent with
(7) - status equal `200`
(8) - and JSON body equal to
 { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
(9) - with header `Content-Type` equal to `application/json`

From the Producer perspective, in the autogenerated producer-side test:

(1) - A request will be sent to the producer
(2) - With the "PUT" method
(3) - to the URL "/fraudcheck"
(4) - with the JSON body that
 * has a field `client.id` that will have a generated value that matches a regular expression `[0-9]{10}`
 * has a field `loanAmount` that is equal to `99999`
(5) - with header `Content-Type` equal to `application/json`
(6) - then the test will assert if the response has been sent with
(7) - status equal `200`
(8) - and JSON body equal to
 { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
(9) - with header `Content-Type` matching `application/json.*`
 */</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request: # (1)
  method: PUT # (2)
  url: /fraudcheck # (3)
  body: # (4)
    "client.id": 1234567890
    loanAmount: 99999
  headers: # (5)
    Content-Type: application/json
  matchers:
    body:
      - path: $.['client.id'] # (6)
        type: by_regex
        value: "[0-9]{10}"
response: # (7)
  status: 200 # (8)
  body:  # (9)
    fraudCheckStatus: "FRAUD"
    "rejection.reason": "Amount too high"
  headers: # (10)
    Content-Type: application/json;charset=UTF-8


#From the Consumer perspective, when shooting a request in the integration test:
#
#(1) - If the consumer sends a request
#(2) - With the "PUT" method
#(3) - to the URL "/fraudcheck"
#(4) - with the JSON body that
# * has a field `client.id`
# * has a field `loanAmount` that is equal to `99999`
#(5) - with header `Content-Type` equal to `application/json`
#(6) - and a `client.id` json entry matches the regular expression `[0-9]{10}`
#(7) - then the response will be sent with
#(8) - status equal `200`
#(9) - and JSON body equal to
# { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
#(10) - with header `Content-Type` equal to `application/json`
#
#From the Producer perspective, in the autogenerated producer-side test:
#
#(1) - A request will be sent to the producer
#(2) - With the "PUT" method
#(3) - to the URL "/fraudcheck"
#(4) - with the JSON body that
# * has a field `client.id` `1234567890`
# * has a field `loanAmount` that is equal to `99999`
#(5) - with header `Content-Type` equal to `application/json`
#(7) - then the test will assert if the response has been sent with
#(8) - status equal `200`
#(9) - and JSON body equal to
# { "fraudCheckStatus": "FRAUD", "rejectionReason": "Amount too high" }
#(10) - with header `Content-Type` equal to `application/json;charset=UTF-8`</programlisting>
</para>
</formalpara>
<simpara>The YML contract is quite straight-forward. However when you take a look at the Contract
written using a statically typed Groovy DSL - you might wonder what the
<literal>value(client(&#8230;&#8203;), server(&#8230;&#8203;))</literal> parts are. By using this notation, Spring Cloud
Contract lets you define parts of a JSON block, a URL, etc., which are dynamic. In case
of an identifier or a timestamp, you need not hardcode a value. You want to allow some
different ranges of values. To enable ranges of values, you can set regular expressions
matching those values for the consumer side. You can provide the body by means of either
a map notation or String with interpolations.
<link xl:href="https://cloud.spring.io/spring-cloud-contract/single/spring-cloud-contract.html#_contract_dsl">Consult the docs
for more information.</link> We highly recommend using the map notation!</simpara>
<tip>
<simpara>You must understand the map notation in order to set up contracts. Please read the
<link xl:href="http://groovy-lang.org/json.html">Groovy docs regarding JSON</link>.</simpara>
</tip>
<simpara>The previously shown contract is an agreement between two sides that:</simpara>
<itemizedlist>
<listitem>
<simpara>if an HTTP request is sent with all of</simpara>
<itemizedlist>
<listitem>
<simpara>a <literal>PUT</literal> method on the <literal>/fraudcheck</literal> endpoint,</simpara>
</listitem>
<listitem>
<simpara>a JSON body with a <literal>client.id</literal> that matches the regular expression <literal>[0-9]{10}</literal> and
<literal>loanAmount</literal> equal to <literal>99999</literal>,</simpara>
</listitem>
<listitem>
<simpara>and a <literal>Content-Type</literal> header with a value of <literal>application/vnd.fraud.v1+json</literal>,</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>then an HTTP response is sent to the consumer that</simpara>
<itemizedlist>
<listitem>
<simpara>has status <literal>200</literal>,</simpara>
</listitem>
<listitem>
<simpara>contains a JSON body with the <literal>fraudCheckStatus</literal> field containing a value <literal>FRAUD</literal> and
the <literal>rejectionReason</literal> field having value <literal>Amount too high</literal>,</simpara>
</listitem>
<listitem>
<simpara>and a <literal>Content-Type</literal> header with a value of <literal>application/vnd.fraud.v1+json</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>Once you are ready to check the API in practice in the integration tests, you need to
install the stubs locally.</simpara>
<simpara><emphasis role="strong">Add the Spring Cloud Contract Verifier plugin.</emphasis></simpara>
<simpara>We can add either a Maven or a Gradle plugin. In this example, you see how to add Maven.
First, add the <literal>Spring Cloud Contract</literal> BOM.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<simpara>Next, add the <literal>Spring Cloud Contract Verifier</literal> Maven plugin</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example.fraud&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Since the plugin was added, you get the <literal>Spring Cloud Contract Verifier</literal> features which,
from the provided contracts:</simpara>
<itemizedlist>
<listitem>
<simpara>generate and run tests</simpara>
</listitem>
<listitem>
<simpara>produce and install stubs</simpara>
</listitem>
</itemizedlist>
<simpara>You do not want to generate tests since you, as the consumer, want only to play with the
stubs. You need to skip the test generation and execution. When you execute:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ cd local-http-server-repo
$ ./mvnw clean install -DskipTests</programlisting>
<simpara>In the logs, you see something like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">[INFO] --- spring-cloud-contract-maven-plugin:1.0.0.BUILD-SNAPSHOT:generateStubs (default-generateStubs) @ http-server ---
[INFO] Building jar: /some/path/http-server/target/http-server-0.0.1-SNAPSHOT-stubs.jar
[INFO]
[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ http-server ---
[INFO] Building jar: /some/path/http-server/target/http-server-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- spring-boot-maven-plugin:1.5.5.BUILD-SNAPSHOT:repackage (default) @ http-server ---
[INFO]
[INFO] --- maven-install-plugin:2.5.2:install (default-install) @ http-server ---
[INFO] Installing /some/path/http-server/target/http-server-0.0.1-SNAPSHOT.jar to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT.jar
[INFO] Installing /some/path/http-server/pom.xml to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT.pom
[INFO] Installing /some/path/http-server/target/http-server-0.0.1-SNAPSHOT-stubs.jar to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar</programlisting>
<simpara>The following line is extremely important:</simpara>
<programlisting language="bash" linenumbering="unnumbered">[INFO] Installing /some/path/http-server/target/http-server-0.0.1-SNAPSHOT-stubs.jar to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar</programlisting>
<simpara>It confirms that the stubs of the <literal>http-server</literal> have been installed in the local
repository.</simpara>
<simpara><emphasis role="strong">Run the integration tests.</emphasis></simpara>
<simpara>In order to profit from the Spring Cloud Contract Stub Runner functionality of automatic
stub downloading, you must do the following in your consumer side project (<literal>Loan
Application service</literal>):</simpara>
<simpara>Add the <literal>Spring Cloud Contract</literal> BOM:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<simpara>Add the dependency to <literal>Spring Cloud Contract Stub Runner</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>Annotate your test class with <literal>@AutoConfigureStubRunner</literal>. In the annotation, provide the
<literal>group-id</literal> and <literal>artifact-id</literal> for the Stub Runner to download the stubs of your
collaborators. (Optional step) Because you&#8217;re playing with the collaborators offline, you
can also provide the offline work switch (<literal>StubRunnerProperties.StubsMode.LOCAL</literal>).</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment=WebEnvironment.NONE)
@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:6565"},
		stubsMode = StubRunnerProperties.StubsMode.LOCAL)
@DirtiesContext
public class LoanApplicationServiceTests {</programlisting>
<simpara>Now, when you run your tests, you see something like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">2016-07-19 14:22:25.403  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Desired version is + - will try to resolve the latest version
2016-07-19 14:22:25.438  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolved version is 0.0.1-SNAPSHOT
2016-07-19 14:22:25.439  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolving artifact com.example:http-server:jar:stubs:0.0.1-SNAPSHOT using remote repositories []
2016-07-19 14:22:25.451  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Resolved artifact com.example:http-server:jar:stubs:0.0.1-SNAPSHOT to /path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar
2016-07-19 14:22:25.465  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Unpacking stub from JAR [URI: file:/path/to/your/.m2/repository/com/example/http-server/0.0.1-SNAPSHOT/http-server-0.0.1-SNAPSHOT-stubs.jar]
2016-07-19 14:22:25.475  INFO 41050 --- [           main] o.s.c.c.stubrunner.AetherStubDownloader  : Unpacked file to [/var/folders/0p/xwq47sq106x1_g3dtv6qfm940000gq/T/contracts100276532569594265]
2016-07-19 14:22:27.737  INFO 41050 --- [           main] o.s.c.c.stubrunner.StubRunnerExecutor    : All stubs are now running RunningStubs [namesAndPorts={com.example:http-server:0.0.1-SNAPSHOT:stubs=8080}]</programlisting>
<simpara>This output means that Stub Runner has found your stubs and started a server for your app
with group id <literal>com.example</literal>, artifact id <literal>http-server</literal> with version <literal>0.0.1-SNAPSHOT</literal> of
the stubs and with <literal>stubs</literal> classifier on port <literal>8080</literal>.</simpara>
<simpara><emphasis role="strong">File a pull request.</emphasis></simpara>
<simpara>What you have done until now is an iterative process. You can play around with the
contract, install it locally, and work on the consumer side until the contract works as
you wish.</simpara>
<simpara>Once you are satisfied with the results and the test passes, publish a pull request to
the server side. Currently, the consumer side work is done.</simpara>
</section>
<section xml:id="_producer_side_fraud_detection_server">
<title>Producer side (Fraud Detection server)</title>
<simpara>As a developer of the Fraud Detection server (a server to the Loan Issuance service):</simpara>
<simpara><emphasis role="strong">Create an initial implementation.</emphasis></simpara>
<simpara>As a reminder, you can see the initial implementation here:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RequestMapping(value = "/fraudcheck", method = PUT)
public FraudCheckResult fraudCheck(@RequestBody FraudCheck fraudCheck) {
return new FraudCheckResult(FraudCheckStatus.OK, NO_REASON);
}</programlisting>
<simpara><emphasis role="strong">Take over the pull request.</emphasis></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git checkout -b contract-change-pr master
$ git pull https://your-git-server.com/server-side-fork.git contract-change-pr</programlisting>
<simpara>You must add the dependencies needed by the autogenerated tests:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
<simpara>In the configuration of the Maven plugin, pass the <literal>packageWithBaseClasses</literal> property</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example.fraud&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<important>
<simpara>This example uses "convention based" naming by setting the
<literal>packageWithBaseClasses</literal> property. Doing so means that the two last packages combine to
make the name of the base test class. In our case, the contracts were placed under
<literal>src/test/resources/contracts/fraud</literal>. Since you do not have two packages starting from
the <literal>contracts</literal> folder, pick only one, which should be <literal>fraud</literal>. Add the <literal>Base</literal> suffix and
capitalize <literal>fraud</literal>. That gives you the <literal>FraudBase</literal> test class name.</simpara>
</important>
<simpara>All the generated tests extend that class. Over there, you can set up your Spring Context
or whatever is necessary. In this case, use <link xl:href="http://rest-assured.io/">Rest Assured MVC</link> to
start the server side <literal>FraudDetectionController</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.fraud;

import org.junit.Before;

import io.restassured.module.mockmvc.RestAssuredMockMvc;

public class FraudBase {
	@Before
	public void setup() {
		RestAssuredMockMvc.standaloneSetup(new FraudDetectionController(),
				new FraudStatsController(stubbedStatsProvider()));
	}

	private StatsProvider stubbedStatsProvider() {
		return fraudType -&gt; {
			switch (fraudType) {
			case DRUNKS:
				return 100;
			case ALL:
				return 200;
			}
			return 0;
		};
	}

	public void assertThatRejectionReasonIsNull(Object rejectionReason) {
		assert rejectionReason == null;
	}
}</programlisting>
<simpara>Now, if you run the <literal>./mvnw clean install</literal>, you get something like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">Results :

Tests in error:
  ContractVerifierTest.validate_shouldMarkClientAsFraud:32 » IllegalState Parsed...</programlisting>
<simpara>This error occurs because you have a new contract from which a test was generated and it
failed since you have not implemented the feature. The auto-generated test would look
like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void validate_shouldMarkClientAsFraud() throws Exception {
    // given:
        MockMvcRequestSpecification request = given()
                .header("Content-Type", "application/vnd.fraud.v1+json")
                .body("{\"client.id\":\"1234567890\",\"loanAmount\":99999}");

    // when:
        ResponseOptions response = given().spec(request)
                .put("/fraudcheck");

    // then:
        assertThat(response.statusCode()).isEqualTo(200);
        assertThat(response.header("Content-Type")).matches("application/vnd.fraud.v1.json.*");
    // and:
        DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
        assertThatJson(parsedJson).field("['fraudCheckStatus']").matches("[A-Z]{5}");
        assertThatJson(parsedJson).field("['rejection.reason']").isEqualTo("Amount too high");
}</programlisting>
<simpara>If you used the Groovy DSL, you can see, all the <literal>producer()</literal> parts of the Contract that were present in the
<literal>value(consumer(&#8230;&#8203;), producer(&#8230;&#8203;))</literal> blocks got injected into the test.
In case of using YAML, the same applied for the <literal>matchers</literal> sections of the <literal>response</literal>.</simpara>
<simpara>Note that, on the producer side, you are also doing TDD. The expectations are expressed
in the form of a test. This test sends a request to our own application with the URL,
headers, and body defined in the contract. It also is expecting precisely defined values
in the response. In other words, you have the <literal>red</literal> part of <literal>red</literal>, <literal>green</literal>, and
<literal>refactor</literal>. It is time to convert the <literal>red</literal> into the <literal>green</literal>.</simpara>
<simpara><emphasis role="strong">Write the missing implementation.</emphasis></simpara>
<simpara>Because you know the expected input and expected output, you can write the missing
implementation:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RequestMapping(value = "/fraudcheck", method = PUT)
public FraudCheckResult fraudCheck(@RequestBody FraudCheck fraudCheck) {
if (amountGreaterThanThreshold(fraudCheck)) {
	return new FraudCheckResult(FraudCheckStatus.FRAUD, AMOUNT_TOO_HIGH);
}
return new FraudCheckResult(FraudCheckStatus.OK, NO_REASON);
}</programlisting>
<simpara>When you execute <literal>./mvnw clean install</literal> again, the tests pass. Since the <literal>Spring Cloud
Contract Verifier</literal> plugin adds the tests to the <literal>generated-test-sources</literal>, you can
actually run those tests from your IDE.</simpara>
<simpara><emphasis role="strong">Deploy your app.</emphasis></simpara>
<simpara>Once you finish your work, you can deploy your change. First, merge the branch:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git checkout master
$ git merge --no-ff contract-change-pr
$ git push origin master</programlisting>
<simpara>Your CI might run something like <literal>./mvnw clean deploy</literal>, which would publish both the
application and the stub artifacts.</simpara>
</section>
<section xml:id="_consumer_side_loan_issuance_final_step">
<title>Consumer Side (Loan Issuance) Final Step</title>
<simpara>As a developer of the Loan Issuance service (a consumer of the Fraud Detection server):</simpara>
<simpara><emphasis role="strong">Merge branch to master.</emphasis></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git checkout master
$ git merge --no-ff contract-change-pr</programlisting>
<simpara><emphasis role="strong">Work online.</emphasis></simpara>
<simpara>Now you can disable the offline work for Spring Cloud Contract Stub Runner and indicate
where the repository with your stubs is located. At this moment the stubs of the server
side are automatically downloaded from Nexus/Artifactory. You can set the value of
<literal>stubsMode</literal> to <literal>REMOTE</literal>. The following code shows an example of
achieving the same thing by changing the properties.</simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner:
  ids: 'com.example:http-server-dsl:+:stubs:8080'
  repositoryRoot: https://repo.spring.io/libs-snapshot</programlisting>
<simpara>That&#8217;s it!</simpara>
</section>
</section>
<section xml:id="_dependencies">
<title>Dependencies</title>
<simpara>The best way to add dependencies is to use the proper <literal>starter</literal> dependency.</simpara>
<simpara>For <literal>stub-runner</literal>, use <literal>spring-cloud-starter-stub-runner</literal>. When you use a plugin, add
<literal>spring-cloud-starter-contract-verifier</literal>.</simpara>
</section>
<section xml:id="_additional_links">
<title>Additional Links</title>
<simpara>Here are some resources related to Spring Cloud Contract Verifier and Stub Runner. Note
that some may be outdated, because the Spring Cloud Contract Verifier project is under
constant development.</simpara>
<section xml:id="_spring_cloud_contract_video">
<title>Spring Cloud Contract video</title>
<simpara>You can check out the video from the Warsaw JUG about Spring Cloud Contract:</simpara>

</section>
<section xml:id="_readings">
<title>Readings</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.slideshare.net/MarcinGrzejszczak/stick-to-the-rules-consumer-driven-contracts-201507-confitura">Slides from Marcin Grzejszczak&#8217;s talk about Accurest</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://toomuchcoding.com/blog/categories/accurest/">Accurest related articles from Marcin Grzejszczak&#8217;s blog</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://toomuchcoding.com/blog/categories/spring-cloud-contract/">Spring Cloud Contract related articles from Marcin Grzejszczak&#8217;s blog</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://groovy-lang.org/json.html">Groovy docs regarding JSON</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_samples_2">
<title>Samples</title>
<simpara>You can find some samples at
<link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples">samples</link>.</simpara>
</section>
</chapter>
<chapter xml:id="_spring_cloud_contract_faq">
<title>Spring Cloud Contract FAQ</title>
<section xml:id="_why_use_spring_cloud_contract_verifier_and_not_x">
<title>Why use Spring Cloud Contract Verifier and not X ?</title>
<simpara>For the time being Spring Cloud Contract is a JVM based tool. So it could be your first pick when you&#8217;re already creating
software for the JVM. This project has a lot of really interesting features but especially quite a few of them definitely make
Spring Cloud Contract Verifier stand out on the "market" of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are:</simpara>
<itemizedlist>
<listitem>
<simpara>Possibility to do CDC with messaging</simpara>
</listitem>
<listitem>
<simpara>Clear and easy to use, statically typed DSL</simpara>
</listitem>
<listitem>
<simpara>Possibility to copy paste your current JSON file to the contract and only edit its elements</simpara>
</listitem>
<listitem>
<simpara>Automatic generation of tests from the defined Contract</simpara>
</listitem>
<listitem>
<simpara>Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud integration - no discovery service is needed for integration tests</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud Contract integrates with Pact out of the box and provides easy hooks to extend its functionality</simpara>
</listitem>
<listitem>
<simpara>Via Docker adds support for any language &amp; framework used</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_i_don_t_want_to_write_a_contract_in_groovy">
<title>I don&#8217;t want to write a contract in Groovy!</title>
<simpara>No problem. You can write a contract in YAML!</simpara>
</section>
<section xml:id="_what_is_this_value_consumer_producer">
<title>What is this value(consumer(), producer()) ?</title>
<simpara>One of the biggest challenges related to stubs is their reusability. Only if they can be vastly used, will they serve their purpose.
What typically makes that difficult are the hard-coded values of request / response elements. For example dates or ids.
Imagine the following JSON request</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "2016-10-10 20:10:15",
    "id" : "9febab1c-6f36-4a0b-88d6-3b6a6d81cd4a",
    "body" : "foo"
}</programlisting>
<simpara>and JSON response</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "2016-10-10 21:10:15",
    "id" : "c4231e1f-3ca9-48d3-b7e7-567d55f0d051",
    "body" : "bar"
}</programlisting>
<simpara>Imagine the pain required to set proper value of the <literal>time</literal> field (let&#8217;s assume that this content is generated by the
database) by changing the clock in the system or providing stub implementations of data providers. The same is related
to the field called <literal>id</literal>. Will you create a stubbed implementation of UUID generator? Makes little sense&#8230;&#8203;</simpara>
<simpara>So as a consumer you would like to send a request that matches any form of a time or any UUID. That way your system
will work as usual - will generate data and you won&#8217;t have to stub anything out. Let&#8217;s assume that in case of the aforementioned
JSON the most important part is the <literal>body</literal> field. You can focus on that and provide matching for other fields. In other words
you would like the stub to work like this:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "SOMETHING THAT MATCHES TIME",
    "id" : "SOMETHING THAT MATCHES UUID",
    "body" : "foo"
}</programlisting>
<simpara>As far as the response goes as a consumer you need a concrete value that you can operate on. So such a JSON is valid</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "2016-10-10 21:10:15",
    "id" : "c4231e1f-3ca9-48d3-b7e7-567d55f0d051",
    "body" : "bar"
}</programlisting>
<simpara>As you could see in the previous sections we generate tests from contracts. So from the producer&#8217;s side the situation looks
much different. We&#8217;re parsing the provided contract and in the test we want to send a real request to your endpoints.
So for the case of a producer for the request we can&#8217;t have any sort of matching. We need concrete values that the
producer&#8217;s backend can work on. Such a JSON would be a valid one:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "2016-10-10 20:10:15",
    "id" : "9febab1c-6f36-4a0b-88d6-3b6a6d81cd4a",
    "body" : "foo"
}</programlisting>
<simpara>On the other hand from the point of view of the validity of the contract the response doesn&#8217;t necessarily have to
contain concrete values of <literal>time</literal> or <literal>id</literal>. Let&#8217;s say that you generate those on the producer side - again, you&#8217;d
have to do a lot of stubbing to ensure that you always return the same values. That&#8217;s why from the producer&#8217;s side
what you might want is the following response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "time" : "SOMETHING THAT MATCHES TIME",
    "id" : "SOMETHING THAT MATCHES UUID",
    "body" : "bar"
}</programlisting>
<simpara>How can you then provide one time a matcher for the consumer and a concrete value for the producer and vice versa?
In Spring Cloud Contract we&#8217;re allowing you to provide a <emphasis role="strong">dynamic value</emphasis>. That means that it can differ for both
sides of the communication. You can pass the values:</simpara>
<simpara>Either via the <literal>value</literal> method</simpara>
<programlisting language="groovy" linenumbering="unnumbered">value(consumer(...), producer(...))
value(stub(...), test(...))
value(client(...), server(...))</programlisting>
<simpara>or using the <literal>$()</literal> method</simpara>
<programlisting language="groovy" linenumbering="unnumbered">$(consumer(...), producer(...))
$(stub(...), test(...))
$(client(...), server(...))</programlisting>
<simpara>You can read more about this in the <link xl:href="https://cloud.spring.io/spring-cloud-contract/single/spring-cloud-contract.html#_contract_dsl">Contract DSL section</link>.</simpara>
<simpara>Calling <literal>value()</literal> or <literal>$()</literal> tells Spring Cloud Contract that you will be passing a dynamic value.
Inside the <literal>consumer()</literal> method you pass the value that should be used on the consumer side (in the generated stub).
Inside the <literal>producer()</literal> method you pass the value that should be used on the producer side (in the generated test).</simpara>
<tip>
<simpara>If on one side you have passed the regular expression and you haven&#8217;t passed the other, then the
other side will get auto-generated.</simpara>
</tip>
<simpara>Most often you will use that method together with the <literal>regex</literal> helper method. E.g. <literal>consumer(regex('[0-9]{10}'))</literal>.</simpara>
<simpara>To sum it up the contract for the aforementioned scenario would look more or less like this (the regular expression
for time and UUID are simplified and most likely invalid but we want to keep things very simple in this example):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
				request {
					method 'GET'
					url '/someUrl'
					body([
					    time : value(consumer(regex('[0-9]{4}-[0-9]{2}-[0-9]{2} [0-2][0-9]-[0-5][0-9]-[0-5][0-9]')),
					    id: value(consumer(regex('[0-9a-zA-z]{8}-[0-9a-zA-z]{4}-[0-9a-zA-z]{4}-[0-9a-zA-z]{12}'))
					    body: "foo"
					])
				}
			response {
				status OK()
				body([
					    time : value(producer(regex('[0-9]{4}-[0-9]{2}-[0-9]{2} [0-2][0-9]-[0-5][0-9]-[0-5][0-9]')),
					    id: value([producer(regex('[0-9a-zA-z]{8}-[0-9a-zA-z]{4}-[0-9a-zA-z]{4}-[0-9a-zA-z]{12}'))
					    body: "bar"
					])
			}
}</programlisting>
<important>
<simpara>Please read the <link xl:href="http://groovy-lang.org/json.html">Groovy docs related to JSON</link> to understand how to
properly structure the request / response bodies.</simpara>
</important>
</section>
<section xml:id="_how_to_do_stubs_versioning">
<title>How to do Stubs versioning?</title>
<section xml:id="_api_versioning">
<title>API Versioning</title>
<simpara>Let&#8217;s try to answer a question what versioning really means. If you&#8217;re referring to the API version then there are
different approaches.</simpara>
<itemizedlist>
<listitem>
<simpara>use Hypermedia, links and do not version your API by any means</simpara>
</listitem>
<listitem>
<simpara>pass versions through headers / urls</simpara>
</listitem>
</itemizedlist>
<simpara>I will not try to answer a question which approach is better. Whatever suit your needs and allows you to generate
business value should be picked.</simpara>
<simpara>Let&#8217;s assume that you do version your API. In that case you should provide as many contracts as many versions you support.
You can create a subfolder for every version or append it to th contract name - whatever suits you more.</simpara>
</section>
<section xml:id="_jar_versioning">
<title>JAR versioning</title>
<simpara>If by versioning you mean the version of the JAR that contains the stubs then there are essentially two main approaches.</simpara>
<simpara>Let&#8217;s assume that you&#8217;re doing Continuous Delivery / Deployment which means that you&#8217;re generating a new version of
the jar each time you go through the pipeline and that jar can go to production at any time. For example your jar version
looks like this (it got built on the 20.10.2016 at 20:15:21) :</simpara>
<programlisting language="groovy" linenumbering="unnumbered">1.0.0.20161020-201521-RELEASE</programlisting>
<simpara>In that case your generated stub jar will look like this.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">1.0.0.20161020-201521-RELEASE-stubs.jar</programlisting>
<simpara>In this case you should inside your <literal>application.yml</literal> or <literal>@AutoConfigureStubRunner</literal> when referencing stubs provide the
 latest version of the stubs. You can do that by passing the <literal>+</literal> sign. Example</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:8080"})</programlisting>
<simpara>If the versioning however is fixed (e.g. <literal>1.0.4.RELEASE</literal> or <literal>2.1.1</literal>) then you have to set the concrete value of the jar
version. Example for 2.1.1.</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:2.1.1:stubs:8080"})</programlisting>
</section>
<section xml:id="_dev_or_prod_stubs">
<title>Dev or prod stubs</title>
<simpara>You can manipulate the classifier to run the tests against current development version of the stubs of other services
 or the ones that were deployed to production. If you alter your build to deploy the stubs with the <literal>prod-stubs</literal> classifier
 once you reach production deployment then you can run tests in one case with dev stubs and one with prod stubs.</simpara>
<simpara>Example of tests using development version of stubs</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:stubs:8080"})</programlisting>
<simpara>Example of tests using production version of stubs</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids = {"com.example:http-server-dsl:+:prod-stubs:8080"})</programlisting>
<simpara>You can pass those values also via properties from your deployment pipeline.</simpara>
</section>
</section>
<section xml:id="_common_repo_with_contracts">
<title>Common repo with contracts</title>
<simpara>Another way of storing contracts other than having them with the producer is keeping them in a common place.
It can be related to security issues where the consumers can&#8217;t clone the producer&#8217;s code. Also if you keep
contracts in a single place then you, as a producer, will know how many consumers you have and which
consumer will you break with your local changes.</simpara>
<section xml:id="_repo_structure">
<title>Repo structure</title>
<simpara>Let&#8217;s assume that we have a producer with coordinates <literal>com.example:server</literal> and 3 consumers: <literal>client1</literal>,
<literal>client2</literal>, <literal>client3</literal>. Then in the repository with common contracts you would have the following setup
(which you can checkout <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/tree/master/samples/standalone/contracts">here</link>):</simpara>
<programlisting language="bash" linenumbering="unnumbered">├── com
│   └── example
│       └── server
│           ├── client1
│           │   └── expectation.groovy
│           ├── client2
│           │   └── expectation.groovy
│           ├── client3
│           │   └── expectation.groovy
│           └── pom.xml
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    └── assembly
        └── contracts.xml</programlisting>
<simpara>As you can see the under the slash-delimited groupid <literal>/</literal> artifact id folder (<literal>com/example/server</literal>) you have
expectations of the 3 consumers (<literal>client1</literal>, <literal>client2</literal> and <literal>client3</literal>). Expectations are the standard Groovy DSL
contract files as described throughout this documentation. This repository has to produce a JAR file that maps
one to one to the contents of the repo.</simpara>
<simpara>Example of a <literal>pom.xml</literal> inside the <literal>server</literal> folder.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.example&lt;/groupId&gt;
	&lt;artifactId&gt;server&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

	&lt;name&gt;Server Stubs&lt;/name&gt;
	&lt;description&gt;POM used to install locally stubs for consumer side&lt;/description&gt;

	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;
		&lt;relativePath /&gt;
	&lt;/parent&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
		&lt;spring-cloud-contract.version&gt;2.0.1.BUILD-SNAPSHOT&lt;/spring-cloud-contract.version&gt;
		&lt;spring-cloud-dependencies.version&gt;Finchley.BUILD-SNAPSHOT&lt;/spring-cloud-dependencies.version&gt;
		&lt;excludeBuildFolders&gt;true&lt;/excludeBuildFolders&gt;
	&lt;/properties&gt;

	&lt;dependencyManagement&gt;
		&lt;dependencies&gt;
			&lt;dependency&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
				&lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
				&lt;type&gt;pom&lt;/type&gt;
				&lt;scope&gt;import&lt;/scope&gt;
			&lt;/dependency&gt;
		&lt;/dependencies&gt;
	&lt;/dependencyManagement&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
				&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
				&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
				&lt;extensions&gt;true&lt;/extensions&gt;
				&lt;configuration&gt;
					&lt;!-- By default it would search under src/test/resources/ --&gt;
					&lt;contractsDirectory&gt;${project.basedir}&lt;/contractsDirectory&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

	&lt;repositories&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-snapshots&lt;/id&gt;
			&lt;name&gt;Spring Snapshots&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;true&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-milestones&lt;/id&gt;
			&lt;name&gt;Spring Milestones&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
		&lt;repository&gt;
			&lt;id&gt;spring-releases&lt;/id&gt;
			&lt;name&gt;Spring Releases&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/repository&gt;
	&lt;/repositories&gt;
	&lt;pluginRepositories&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-snapshots&lt;/id&gt;
			&lt;name&gt;Spring Snapshots&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;true&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-milestones&lt;/id&gt;
			&lt;name&gt;Spring Milestones&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
		&lt;pluginRepository&gt;
			&lt;id&gt;spring-releases&lt;/id&gt;
			&lt;name&gt;Spring Releases&lt;/name&gt;
			&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
			&lt;snapshots&gt;
				&lt;enabled&gt;false&lt;/enabled&gt;
			&lt;/snapshots&gt;
		&lt;/pluginRepository&gt;
	&lt;/pluginRepositories&gt;

&lt;/project&gt;</programlisting>
<simpara>As you can see there are no dependencies other than the Spring Cloud Contract Maven Plugin.
Those poms are necessary for the consumer side to run <literal>mvn clean install -DskipTests</literal> to locally install
 stubs of the producer project.</simpara>
<simpara>The <literal>pom.xml</literal> in the root folder can look like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

	&lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
	&lt;artifactId&gt;contracts&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

	&lt;name&gt;Contracts&lt;/name&gt;
	&lt;description&gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&lt;/description&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
	&lt;/properties&gt;

	&lt;build&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
				&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
				&lt;executions&gt;
					&lt;execution&gt;
						&lt;id&gt;contracts&lt;/id&gt;
						&lt;phase&gt;prepare-package&lt;/phase&gt;
						&lt;goals&gt;
							&lt;goal&gt;single&lt;/goal&gt;
						&lt;/goals&gt;
						&lt;configuration&gt;
							&lt;attach&gt;true&lt;/attach&gt;
							&lt;descriptor&gt;${basedir}/src/assembly/contracts.xml&lt;/descriptor&gt;
							&lt;!-- If you want an explicit classifier remove the following line --&gt;
							&lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;
						&lt;/configuration&gt;
					&lt;/execution&gt;
				&lt;/executions&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;

&lt;/project&gt;</programlisting>
<simpara>It&#8217;s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
	&lt;id&gt;project&lt;/id&gt;
	&lt;formats&gt;
		&lt;format&gt;jar&lt;/format&gt;
	&lt;/formats&gt;
	&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
	&lt;fileSets&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;${project.basedir}&lt;/directory&gt;
			&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
			&lt;useDefaultExcludes&gt;true&lt;/useDefaultExcludes&gt;
			&lt;excludes&gt;
				&lt;exclude&gt;**/${project.build.directory}/**&lt;/exclude&gt;
				&lt;exclude&gt;mvnw&lt;/exclude&gt;
				&lt;exclude&gt;mvnw.cmd&lt;/exclude&gt;
				&lt;exclude&gt;.mvn/**&lt;/exclude&gt;
				&lt;exclude&gt;src/**&lt;/exclude&gt;
			&lt;/excludes&gt;
		&lt;/fileSet&gt;
	&lt;/fileSets&gt;
&lt;/assembly&gt;</programlisting>
</section>
<section xml:id="_workflow">
<title>Workflow</title>
<simpara>The workflow would look similar to the one presented in the <literal>Step by step guide to CDC</literal>. The only difference
 is that the producer doesn&#8217;t own the contracts anymore. So the consumer and the producer have to work on
 common contracts in a common repository.</simpara>
</section>
<section xml:id="_consumer">
<title>Consumer</title>
<simpara>When the <emphasis role="strong">consumer</emphasis> wants to work on the contracts offline, instead of cloning the producer code, the
consumer team clones the common repository, goes to the required producer&#8217;s folder (e.g. <literal>com/example/server</literal>)
and runs <literal>mvn clean install -DskipTests</literal> to install locally the stubs converted from the contracts.</simpara>
<tip>
<simpara>You need to have <link xl:href="https://maven.apache.org/download.cgi">Maven installed locally</link></simpara>
</tip>
</section>
<section xml:id="_producer">
<title>Producer</title>
<simpara>As a <emphasis role="strong">producer</emphasis> it&#8217;s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency
of the JAR containing the contracts:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;contractsMode&gt;REMOTE&lt;/contractsMode&gt;
		&lt;contractsRepositoryUrl&gt;http://link/to/your/nexus/or/artifactory/or/sth&lt;/contractsRepositoryUrl&gt;
		&lt;contractDependency&gt;
			&lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
			&lt;artifactId&gt;contracts&lt;/artifactId&gt;
		&lt;/contractDependency&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>With this setup the JAR with groupid <literal>com.example.standalone</literal> and artifactid <literal>contracts</literal> will be downloaded
from <literal><link xl:href="http://link/to/your/nexus/or/artifactory/or/sth">http://link/to/your/nexus/or/artifactory/or/sth</link></literal>. It will be then unpacked in a local temporary folder
and contracts present under the <literal>com/example/server</literal> will be picked as the ones used to generate the
tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken
when some incompatible changes are done.</simpara>
<simpara>The rest of the flow looks the same.</simpara>
</section>
<section xml:id="_how_can_i_define_messaging_contracts_per_topic_not_per_producer">
<title>How can I define messaging contracts per topic not per producer?</title>
<simpara>To avoid messaging contracts duplication in the common repo, when few producers writing messages to one topic,
we could create the structure when the rest contracts would be placed in a folder per producer and messaging
contracts in the folder per topic.</simpara>
<section xml:id="_for_maven_project">
<title>For Maven Project</title>
<simpara>To make it possible to work on the producer side we could do the following things (all via Maven plugins):</simpara>
<itemizedlist>
<listitem>
<simpara>Add common repo dependency to your classpath:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
   &lt;groupId&gt;com.example&lt;/groupId&gt;
   &lt;artifactId&gt;common-repo&lt;/artifactId&gt;
   &lt;version&gt;${common-repo.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara>Download the JAR with the contracts and unpack the JAR to target:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
   &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
   &lt;version&gt;3.0.0&lt;/version&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;id&gt;unpack-dependencies&lt;/id&gt;
         &lt;phase&gt;process-resources&lt;/phase&gt;
         &lt;goals&gt;
            &lt;goal&gt;unpack&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;artifactItems&gt;
               &lt;artifactItem&gt;
                  &lt;groupId&gt;com.example&lt;/groupId&gt;
                  &lt;artifactId&gt;common-repo&lt;/artifactId&gt;
                  &lt;type&gt;jar&lt;/type&gt;
                  &lt;overWrite&gt;false&lt;/overWrite&gt;
                  &lt;outputDirectory&gt;${project.build.directory}/contracts&lt;/outputDirectory&gt;
               &lt;/artifactItem&gt;
            &lt;/artifactItems&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara>Rip out all the folders we&#8217;re not interested in:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
   &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
   &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
   &lt;version&gt;1.8&lt;/version&gt;
   &lt;executions&gt;
      &lt;execution&gt;
         &lt;phase&gt;process-resources&lt;/phase&gt;
         &lt;goals&gt;
            &lt;goal&gt;run&lt;/goal&gt;
         &lt;/goals&gt;
         &lt;configuration&gt;
            &lt;tasks&gt;
               &lt;delete includeemptydirs="true"&gt;
                  &lt;fileset dir="${project.build.directory}/contracts"&gt;
                     &lt;include name="**/*" /&gt;
                     &lt;!--Producer artifactId--&gt;
                     &lt;exclude name="**/${project.artifactId}/**" /&gt;
                     &lt;!--List of the supported topics--&gt;
                     &lt;exclude name="**/${first-topic}/**" /&gt;
                     &lt;exclude name="**/${second-topic}/**" /&gt;
                  &lt;/fileset&gt;
               &lt;/delete&gt;
            &lt;/tasks&gt;
         &lt;/configuration&gt;
      &lt;/execution&gt;
   &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara>Run the contract plugin by pointing to the contracts to the folder under target:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
   &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
   &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
   &lt;extensions&gt;true&lt;/extensions&gt;
   &lt;configuration&gt;
      &lt;packageWithBaseClasses&gt;com.example&lt;/packageWithBaseClasses&gt;
      &lt;baseClassMappings&gt;
         &lt;baseClassMapping&gt;
            &lt;contractPackageRegex&gt;.*intoxication.*&lt;/contractPackageRegex&gt;
            &lt;baseClassFQN&gt;com.example.intoxication.BeerIntoxicationBase&lt;/baseClassFQN&gt;
         &lt;/baseClassMapping&gt;
      &lt;/baseClassMappings&gt;
      &lt;contractsDirectory&gt;${project.build.directory}/contracts&lt;/contractsDirectory&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
</section>
<section xml:id="_for_gradle_project">
<title>For Gradle Project</title>
<itemizedlist>
<listitem>
<simpara>Add a custom configuration for the common-repo dependency:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">ext {
    conractsGroupId = "com.example"
    contractsArtifactId = "common-repo"
    contractsVersion = "1.2.3"
}

configurations {
    contracts {
        transitive = false
    }
}</programlisting>
<itemizedlist>
<listitem>
<simpara>Add the common-repo dependency to your classpath:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">dependencies {
    contracts "${conractsGroupId}:${contractsArtifactId}:${contractsVersion}"
    testCompile "${conractsGroupId}:${contractsArtifactId}:${contractsVersion}"
}</programlisting>
<itemizedlist>
<listitem>
<simpara>Download the dependency to an appropriate folder:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">task getContracts(type: Copy) {
    from configurations.contracts
    into new File(project.buildDir, "downloadedContracts")
}</programlisting>
<itemizedlist>
<listitem>
<simpara>Unzip JAR:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">task unzipContracts(type: Copy) {
    def zipFile = new File(project.buildDir, "downloadedContracts/${contractsArtifactId}-${contractsVersion}.jar")
    def outputDir = file("${buildDir}/unpackedContracts")

    from zipTree(zipFile)
    into outputDir
}</programlisting>
<itemizedlist>
<listitem>
<simpara>Cleanup unused contracts:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">task deleteUnwantedContracts(type: Delete) {
    delete fileTree(dir: "${buildDir}/unpackedContracts",
        include: "**/*",
        excludes: [
            "**/${project.name}/**"",
            "**/${first-topic}/**",
            "**/${second-topic}/**"])
}</programlisting>
<itemizedlist>
<listitem>
<simpara>Create task dependencies:</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">unzipContracts.dependsOn("getContracts")
deleteUnwantedContracts.dependsOn("unzipContracts")
build.dependsOn("deleteUnwantedContracts")</programlisting>
<itemizedlist>
<listitem>
<simpara>Configure plugin by specifying the directory containing contracts using <literal>contractsDslDir</literal> property</simpara>
</listitem>
</itemizedlist>
<programlisting language="groovy" linenumbering="unnumbered">contracts {
    contractsDslDir = new File("${buildDir}/unpackedContracts")
}</programlisting>
</section>
</section>
</section>
<section xml:id="_do_i_need_a_binary_storage_can_t_i_use_git">
<title>Do I need a Binary Storage? Can&#8217;t I use Git?</title>
<simpara>In the polyglot world, there are languages that don&#8217;t use binary storages like
Artifactory or Nexus. Starting from Spring Cloud Contract version 2.0.0 we provide
mechanisms to store contracts and stubs in a SCM repository. Currently the
only supported SCM is Git.</simpara>
<simpara>The repository would have to the following setup
(which you can checkout <link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/contracts_git/">here</link>):</simpara>
<screen>.
└── META-INF
    └── com.example
        └── beer-api-producer-git
            └── 0.0.1-SNAPSHOT
                ├── contracts
                │   └── beer-api-consumer
                │       ├── messaging
                │       │   ├── shouldSendAcceptedVerification.groovy
                │       │   └── shouldSendRejectedVerification.groovy
                │       └── rest
                │           ├── shouldGrantABeerIfOldEnough.groovy
                │           └── shouldRejectABeerIfTooYoung.groovy
                └── mappings
                    └── beer-api-consumer
                        └── rest
                            ├── shouldGrantABeerIfOldEnough.json
                            └── shouldRejectABeerIfTooYoung.json</screen>
<simpara>Under <literal>META-INF</literal> folder:</simpara>
<itemizedlist>
<listitem>
<simpara>we group applications via <literal>groupId</literal> (e.g. <literal>com.example</literal>)</simpara>
</listitem>
<listitem>
<simpara>then each application is represented via the <literal>artifactId</literal> (e.g. <literal>beer-api-producer-git</literal>)</simpara>
</listitem>
<listitem>
<simpara>next, the version of the application. The version is mandatory! (e.g. <literal>0.0.1-SNAPSHOT</literal>)</simpara>
</listitem>
<listitem>
<simpara>finally, there are two folders:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>contracts</literal> - the good practice is to store the contracts required by each
consumer in the folder with the consumer name (e.g. <literal>beer-api-consumer</literal>). That way you
can use the <literal>stubs-per-consumer</literal> feature. Further directory structure is arbitrary.</simpara>
</listitem>
<listitem>
<simpara><literal>mappings</literal> - in this folder the Maven / Gradle Spring Cloud Contract plugins will push
the stub server mappings. On the consumer side, Stub Runner will scan this folder
to start stub servers with stub definitions. The folder structure will be a copy
of the one created in the <literal>contracts</literal> subfolder.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<section xml:id="_protocol_convention">
<title>Protocol convention</title>
<simpara>In order to control the type and location of the source of contracts (whether it&#8217;s
a binary storage or an SCM repository), you can use the protocol in the URL of
the repository. Spring Cloud Contract iterates over registered protocol resolvers
and tries to fetch the contracts (via a plugin) or stubs (via Stub Runner).</simpara>
<simpara>For the SCM functionality, currently, we support the Git repository. To use it,
in the property, where the repository URL needs to be placed you just have to prefix
the connection URL with <literal>git://</literal>. Here you can find a couple of examples:</simpara>
<screen>git://file:///foo/bar
git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git
git://git@github.com:spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git</screen>
</section>
<section xml:id="_producer_2">
<title>Producer</title>
<simpara>For the producer, to use the SCM approach, we can reuse the
same mechanism we use for external contracts. We route Spring Cloud Contract
to use the SCM implementation via the URL that contains
the <literal>git://</literal> protocol.</simpara>
<important>
<simpara>You have to manually add the <literal>pushStubsToScm</literal>
goal in Maven or execute (bind) the <literal>pushStubsToScm</literal> task in
Gradle. We don&#8217;t push stubs to <literal>origin</literal> of your git
repository out of the box.</simpara>
</important>
<formalpara>
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;configuration&gt;
        &lt;!-- Base class mappings etc. --&gt;

        &lt;!-- We want to pick contracts from a Git repository --&gt;
        &lt;contractsRepositoryUrl&gt;git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git&lt;/contractsRepositoryUrl&gt;

        &lt;!-- We reuse the contract dependency section to set up the path
        to the folder that contains the contract definitions. In our case the
        path will be /groupId/artifactId/version/contracts --&gt;
        &lt;contractDependency&gt;
            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
            &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/contractDependency&gt;

        &lt;!-- The contracts mode can't be classpath --&gt;
        &lt;contractsMode&gt;REMOTE&lt;/contractsMode&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
                &lt;!-- By default we will not push the stubs back to SCM,
                you have to explicitly add it as a goal --&gt;
                &lt;goal&gt;pushStubsToScm&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Gradle</title>
<para>
<programlisting language="gradle" linenumbering="unnumbered">contracts {
	// We want to pick contracts from a Git repository
	contractDependency {
		stringNotation = "${project.group}:${project.name}:${project.version}"
	}
	/*
	We reuse the contract dependency section to set up the path
	to the folder that contains the contract definitions. In our case the
	path will be /groupId/artifactId/version/contracts
	 */
	contractRepository {
		repositoryUrl = "git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git"
	}
	// The mode can't be classpath
	contractsMode = "REMOTE"
	// Base class mappings etc.
}

/*
In this scenario we want to publish stubs to SCM whenever
the `publish` task is executed
*/
publish.dependsOn("publishStubsToScm")</programlisting>
</para>
</formalpara>
<simpara>With such a setup:</simpara>
<itemizedlist>
<listitem>
<simpara>Git project will be cloned to a temporary directory</simpara>
</listitem>
<listitem>
<simpara>The SCM stub downloader will go to <literal>META-INF/groupId/artifactId/version/contracts</literal> folder
to find contracts. E.g. for <literal>com.example:foo:1.0.0</literal> the path would be
<literal>META-INF/com.example/foo/1.0.0/contracts</literal></simpara>
</listitem>
<listitem>
<simpara>Tests will be generated from the contracts</simpara>
</listitem>
<listitem>
<simpara>Stubs will be created from the contracts</simpara>
</listitem>
<listitem>
<simpara>Once the tests pass, the stubs will be committed in the cloned repository</simpara>
</listitem>
<listitem>
<simpara>Finally, a push will be done to that repo&#8217;s <literal>origin</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_consumer_2">
<title>Consumer</title>
<simpara>On the consumer side when passing the <literal>repositoryRoot</literal> parameter,
either from the <literal>@AutoConfigureStubRunner</literal> annotation, the
JUnit rule or properties, it&#8217;s enough to pass the URL of the
SCM repository, prefixed with the protocol. For example</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(
    stubsMode="REMOTE",
    repositoryRoot="git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git",
    ids="com.example:bookstore:0.0.1.RELEASE"
)</programlisting>
<simpara>With such a setup:</simpara>
<itemizedlist>
<listitem>
<simpara>Git project will be cloned to a temporary directory</simpara>
</listitem>
<listitem>
<simpara>The SCM stub downloader will go to <literal>META-INF/groupId/artifactId/version/</literal> folder
to find stub definitions and contracts. E.g. for <literal>com.example:foo:1.0.0</literal> the path would be
<literal>META-INF/com.example/foo/1.0.0/</literal></simpara>
</listitem>
<listitem>
<simpara>Stub servers will be started and fed with mappings</simpara>
</listitem>
<listitem>
<simpara>Messaging definitions will be read and used in the messaging tests</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_can_i_use_the_pact_broker">
<title>Can I use the Pact Broker?</title>
<simpara>When using <link xl:href="https://pact.io/">Pact</link> you can use the <link xl:href="https://github.com/pact-foundation/pact_broker">Pact Broker</link>
to store and share Pact definitions. Starting from Spring Cloud Contract
2.0.0 one can fetch Pact files from the Pact Broker to generate
tests and stubs.</simpara>
<simpara>As a prerequisite the Pact Converter and Pact Stub Downloader
are required. You have to add it via the <literal>spring-cloud-contract-pact</literal> dependency.
You can read more about it in the <xref linkend="pact-converter"/> section.</simpara>
<important>
<simpara>Pact follows the Consumer Contract convention. That means
that the Consumer creates the Pact definitions first, then
shares the files with the Producer. Those expectations are generated
from the Consumer&#8217;s code and can break the Producer if the expectation
is not met.</simpara>
</important>
<section xml:id="_pact_consumer">
<title>Pact Consumer</title>
<simpara>The consumer uses Pact framework to generate Pact files. The
Pact files are sent to the Pact Broker. An example of such
setup can be found <link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/consumer_pact">here</link>.</simpara>
</section>
<section xml:id="_producer_3">
<title>Producer</title>
<simpara>For the producer, to use the Pact files from the Pact Broker, we can reuse the
same mechanism we use for external contracts. We route Spring Cloud Contract
to use the Pact implementation via the URL that contains
the <literal>pact://</literal> protocol. It&#8217;s enough to pass the URL to the
Pact Broker. An example of such setup can be found <link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/producer_pact">here</link>.</simpara>
<formalpara>
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;configuration&gt;
        &lt;!-- Base class mappings etc. --&gt;

        &lt;!-- We want to pick contracts from a Git repository --&gt;
        &lt;contractsRepositoryUrl&gt;pact://http://localhost:8085&lt;/contractsRepositoryUrl&gt;

        &lt;!-- We reuse the contract dependency section to set up the path
        to the folder that contains the contract definitions. In our case the
        path will be /groupId/artifactId/version/contracts --&gt;
        &lt;contractDependency&gt;
            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
            &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
            &lt;!-- When + is passed, a latest tag will be applied when fetching pacts --&gt;
            &lt;version&gt;+&lt;/version&gt;
        &lt;/contractDependency&gt;

        &lt;!-- The contracts mode can't be classpath --&gt;
        &lt;contractsMode&gt;REMOTE&lt;/contractsMode&gt;
    &lt;/configuration&gt;
    &lt;!-- Don't forget to add spring-cloud-contract-pact to the classpath! --&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-contract-pact&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/plugin&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Gradle</title>
<para>
<programlisting language="gradle" linenumbering="unnumbered">buildscript {
	repositories {
		//...
	}

	dependencies {
		// ...
		// Don't forget to add spring-cloud-contract-pact to the classpath!
		classpath "org.springframework.cloud:spring-cloud-contract-pact:${contractVersion}"
	}
}

contracts {
	// When + is passed, a latest tag will be applied when fetching pacts
	contractDependency {
		stringNotation = "${project.group}:${project.name}:+"
	}
	contractRepository {
		repositoryUrl = "pact://http://localhost:8085"
	}
	// The mode can't be classpath
	contractsMode = "REMOTE"
	// Base class mappings etc.
}</programlisting>
</para>
</formalpara>
<simpara>With such a setup:</simpara>
<itemizedlist>
<listitem>
<simpara>Pact files will be downloaded from the Pact Broker</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud Contract will convert the Pact files into tests and stubs</simpara>
</listitem>
<listitem>
<simpara>The JAR with the stubs gets automatically created as usual</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_pact_consumer_producer_contract_approach">
<title>Pact Consumer (Producer Contract approach)</title>
<simpara>In the scenario where you don&#8217;t want to do Consumer Contract approach
(for every single consumer define the expectations) but you&#8217;d prefer
to do Producer Contracts (the producer provides the contracts and
publishes stubs), it&#8217;s enough to use Spring Cloud Contract with
Stub Runner option. An example of such setup can be found <link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/consumer_pact_stubrunner">here</link>.</simpara>
<simpara>First, remember to add Stub Runner and Spring Cloud Contract Pact module
as test dependencies.</simpara>
<formalpara>
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;!-- Don't forget to add spring-cloud-contract-pact to the classpath! --&gt;
&lt;dependencies&gt;
    &lt;!-- ... --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-contract-pact&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Gradle</title>
<para>
<programlisting language="gradle" linenumbering="unnumbered">dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    //...
    testCompile("org.springframework.cloud:spring-cloud-starter-contract-stub-runner")
    // Don't forget to add spring-cloud-contract-pact to the classpath!
    testCompile("org.springframework.cloud:spring-cloud-contract-pact")
}</programlisting>
</para>
</formalpara>
<simpara>Next, just pass the URL of the Pact Broker to <literal>repositoryRoot</literal>, prefixed
with <literal>pact://</literal> protocol. E.g. <literal>pact://http://localhost:8085</literal></simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureStubRunner(stubsMode = StubRunnerProperties.StubsMode.REMOTE,
		ids = "com.example:beer-api-producer-pact",
		repositoryRoot = "pact://http://localhost:8085")
public class BeerControllerTest {
    //Inject the port of the running stub
    @StubRunnerPort("beer-api-producer-pact") int producerPort;
    //...
}</programlisting>
<simpara>With such a setup:</simpara>
<itemizedlist>
<listitem>
<simpara>Pact files will be downloaded from the Pact Broker</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud Contract will convert the Pact files into stub definitions</simpara>
</listitem>
<listitem>
<simpara>The stub servers will be started and fed with stubs</simpara>
</listitem>
</itemizedlist>
<simpara>For more information about Pact support you can go to
the <xref linkend="pact-stub-downloader"/> section.</simpara>
</section>
</section>
<section xml:id="_how_can_i_debug_the_request_response_being_sent_by_the_generated_tests_client">
<title>How can I debug the request/response being sent by the generated tests client?</title>
<simpara>The generated tests all boil down to RestAssured in some form or fashion which relies on <link xl:href="https://hc.apache.org/httpcomponents-client-ga/">Apache HttpClient</link>.  HttpClient has a facility called <link xl:href="https://hc.apache.org/httpcomponents-client-ga/logging.html#Wire_Logging">wire logging</link> which logs the entire request and response to HttpClient.  Spring Boot has a logging <link xl:href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html">common application property</link> for doing this sort of thing, just add this to your application properties</simpara>
<programlisting language="properties" linenumbering="unnumbered">logging.level.org.apache.http.wire=DEBUG</programlisting>
<section xml:id="_how_can_i_debug_the_mapping_request_response_being_sent_by_wiremock">
<title>How can I debug the mapping/request/response being sent by WireMock?</title>
<simpara>Starting from version <literal>1.2.0</literal> we turn on WireMock logging to
info and the WireMock notifier to being verbose. Now you will
exactly know what request was received by WireMock server and which
matching response definition was picked.</simpara>
<simpara>To turn off this feature just bump WireMock logging to <literal>ERROR</literal></simpara>
<programlisting language="properties" linenumbering="unnumbered">logging.level.com.github.tomakehurst.wiremock=ERROR</programlisting>
</section>
<section xml:id="_how_can_i_see_what_got_registered_in_the_http_server_stub">
<title>How can I see what got registered in the HTTP server stub?</title>
<simpara>You can use the <literal>mappingsOutputFolder</literal> property on <literal>@AutoConfigureStubRunner</literal> or <literal>StubRunnerRule</literal>
to dump all mappings per artifact id. Also the port at which the given stub server was
started will be attached.</simpara>
</section>
<section xml:id="_can_i_reference_text_from_file">
<title>Can I reference text from file?</title>
<simpara>Yes! With version 1.2.0 we&#8217;ve added such a possibility. It&#8217;s enough to call <literal>file(&#8230;&#8203;)</literal> method in the
DSL and provide a path relative to where the contract lays.
If you&#8217;re using YAML just use the <literal>bodyFromFile</literal> property.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_spring_cloud_contract_verifier_setup">
<title>Spring Cloud Contract Verifier Setup</title>
<simpara>You can set up Spring Cloud Contract Verifier in the following ways:</simpara>
<itemizedlist>
<listitem>
<simpara><link linkend="gradle-project">As a Gradle project</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="maven-project">As a Maven project</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="docker-project">As a Docker project</link></simpara>
</listitem>
</itemizedlist>
<section xml:id="gradle-project">
<title>Gradle Project</title>
<simpara>To learn how to set up the Gradle project for Spring Cloud Contract Verifier, read the
following sections:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="gradle-prerequisites"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-add-gradle-plugin"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-and-rest-assured"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-snapshot-versions"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-add-stubs"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-default-setup"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-configure-plugin"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-configuration-options"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-single-base-class"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-different-base-classes"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-invoking-generated-tests"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-pushing-stubs-to-scm"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="gradle-consumer"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="gradle-prerequisites">
<title>Prerequisites</title>
<simpara>In order to use Spring Cloud Contract Verifier with WireMock, you muse use either a
Gradle or a Maven plugin.</simpara>
<warning>
<simpara>If you want to use Spock in your projects, you must add separately the
<literal>spock-core</literal> and <literal>spock-spring</literal> modules. Check <link xl:href="https://spockframework.github.io/">Spock
docs for more information</link></simpara>
</warning>
</section>
<section xml:id="gradle-add-gradle-plugin">
<title>Add Gradle Plugin with Dependencies</title>
<simpara>To add a Gradle plugin with dependencies, use code similar to this:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
	    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}"
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifier_version}"
	}
}

apply plugin: 'groovy'
apply plugin: 'spring-cloud-contract'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${verifier_version}"
	}
}

dependencies {
	testCompile 'org.codehaus.groovy:groovy-all:2.4.6'
	// example with adding Spock core and Spock Spring
	testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
	testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
	testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}</programlisting>
</section>
<section xml:id="gradle-and-rest-assured">
<title>Gradle and Rest Assured 2.0</title>
<simpara>By default, Rest Assured 3.x is added to the classpath. However, to use Rest Assured 2.x
you can add it to the plugins classpath, as shown here:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
	    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}"
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${verifier_version}"
		classpath "com.jayway.restassured:rest-assured:2.5.0"
		classpath "com.jayway.restassured:spring-mock-mvc:2.5.0"
	}
}

depenendencies {
    // all dependencies
    // you can exclude rest-assured from spring-cloud-contract-verifier
    testCompile "com.jayway.restassured:rest-assured:2.5.0"
    testCompile "com.jayway.restassured:spring-mock-mvc:2.5.0"
}</programlisting>
<simpara>That way, the plugin automatically sees that Rest Assured 2.x is present on the classpath
and modifies the imports accordingly.</simpara>
</section>
<section xml:id="gradle-snapshot-versions">
<title>Snapshot Versions for Gradle</title>
<simpara>Add the additional snapshot repository to your build.gradle to use snapshot versions,
which are automatically uploaded after every successful build, as shown here:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}
}</programlisting>
</section>
<section xml:id="gradle-add-stubs">
<title>Add stubs</title>
<simpara>By default, Spring Cloud Contract Verifier is looking for stubs in the
<literal>src/test/resources/contracts</literal> directory.</simpara>
<simpara>The directory containing stub definitions is treated as a class name, and each stub
definition is treated as a single test. Spring Cloud Contract Verifier assumes that it
contains at  least one level of directories that are to be used as the test class name.
If more than  one level of nested directories is present, all except the last one is used
as the package name. For example, with following structure:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">src/test/resources/contracts/myservice/shouldCreateUser.groovy
src/test/resources/contracts/myservice/shouldReturnUser.groovy</programlisting>
<simpara>Spring Cloud Contract Verifier creates a test class named <literal>defaultBasePackage.MyService</literal>
with two methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>shouldCreateUser()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>shouldReturnUser()</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="gradle-run-plugin">
<title>Run the Plugin</title>
<simpara>The plugin registers itself to be invoked before a <literal>check</literal> task. If you want it to be
part of your build process, you need to do nothing more. If you just want to generate
tests, invoke the <literal>generateContractTests</literal> task.</simpara>
</section>
<section xml:id="gradle-default-setup">
<title>Default Setup</title>
<simpara>The default Gradle Plugin setup creates the following Gradle part of the build (in
pseudocode):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">contracts {
    targetFramework = 'JUNIT'
    testMode = 'MockMvc'
    generatedTestSourcesDir = project.file("${project.buildDir}/generated-test-sources/contracts")
    contractsDslDir = "${project.rootDir}/src/test/resources/contracts"
    basePackageForTests = 'org.springframework.cloud.verifier.tests'
    stubsOutputDir = project.file("${project.buildDir}/stubs")

    // the following properties are used when you want to provide where the JAR with contract lays
    contractDependency {
        stringNotation = ''
    }
    contractsPath = ''
    contractsWorkOffline = false
    contractRepository {
        cacheDownloadedContracts(true)
    }
}

tasks.create(type: Jar, name: 'verifierStubsJar', dependsOn: 'generateClientStubs') {
    baseName = project.name
    classifier = contracts.stubsSuffix
    from contractVerifier.stubsOutputDir
}

project.artifacts {
    archives task
}

tasks.create(type: Copy, name: 'copyContracts') {
    from contracts.contractsDslDir
    into contracts.stubsOutputDir
}

verifierStubsJar.dependsOn 'copyContracts'

publishing {
    publications {
        stubs(MavenPublication) {
            artifactId project.name
            artifact verifierStubsJar
        }
    }
}</programlisting>
</section>
<section xml:id="gradle-configure-plugin">
<title>Configure Plugin</title>
<simpara>To change the default configuration, add a <literal>contracts</literal> snippet to your Gradle config, as
shown here:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">contracts {
	testMode = 'MockMvc'
	baseClassForTests = 'org.mycompany.tests'
	generatedTestSourcesDir = project.file('src/generatedContract')
}</programlisting>
</section>
<section xml:id="gradle-configuration-options">
<title>Configuration Options</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">testMode</emphasis>: Defines the mode for acceptance tests. By default, the mode is MockMvc,
which is based on Spring&#8217;s MockMvc. It can also be changed to <emphasis role="strong">JaxRsClient</emphasis> or to
<emphasis role="strong">Explicit</emphasis> for real HTTP calls.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">imports</emphasis>: Creates an array with imports that should be included in generated tests
(for example ['org.myorg.Matchers']). By default, it creates an empty array.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">staticImports</emphasis>: Creates an array with static imports that should be included in
generated tests(for example ['org.myorg.Matchers.*']). By default, it creates an empty
array.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">basePackageForTests</emphasis>: Specifies the base package for all generated tests. If not set,
the value is picked from <literal>baseClassForTests&#8217;s package and from `packageWithBaseClasses</literal>.
If neither of these values are set, then the value is set to
<literal>org.springframework.cloud.contract.verifier.tests</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">baseClassForTests</emphasis>: Creates a base class for all generated tests. By default, if you
use Spock classes, the class is <literal>spock.lang.Specification</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">packageWithBaseClasses</emphasis>: Defines a package where all the base classes reside. This
setting takes precedence over <emphasis role="strong">baseClassForTests</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">baseClassMappings</emphasis>: Explicitly maps a contract package to a FQN of a base class. This
setting takes precedence over <emphasis role="strong">packageWithBaseClasses</emphasis> and <emphasis role="strong">baseClassForTests</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ruleClassForTests</emphasis>: Specifies a rule that should be added to the generated test
classes.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ignoredFiles</emphasis>: Uses an <literal>Antmatcher</literal> to allow defining stub files for which processing
should be skipped. By default, it is an empty array.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsDslDir</emphasis>: Specifies the directory containing contracts written using the
GroovyDSL. By default, its value is <literal>$rootDir/src/test/resources/contracts</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">generatedTestSourcesDir</emphasis>: Specifies the test source directory where tests generated
from the Groovy DSL should be placed. By default its value is
<literal>$buildDir/generated-test-sources/contractVerifier</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">stubsOutputDir</emphasis>: Specifies the directory where the generated WireMock stubs from
the Groovy DSL should be placed.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">targetFramework</emphasis>: Specifies the target test framework to be used. Currently, Spock and
JUnit are supported with JUnit being the default framework.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsProperties</emphasis>: a map containing properties to be passed to Spring Cloud Contract
components. Those properties might be used by e.g. inbuilt or custom Stub Downloaders.</simpara>
</listitem>
</itemizedlist>
<simpara>The following properties are used when you want to specify the location of the JAR
containing the contracts:
* <emphasis role="strong">contractDependency</emphasis>: Specifies the Dependency that provides
<literal>groupid:artifactid:version:classifier</literal> coordinates. You can use the <literal>contractDependency</literal>
closure to set it up.
* <emphasis role="strong">contractsPath</emphasis>: Specifies the path to the jar. If contract dependencies are
 downloaded, the path defaults to <literal>groupid/artifactid</literal> where <literal>groupid</literal> is slash
 separated. Otherwise, it scans contracts under the provided directory.
* <emphasis role="strong">contractsMode</emphasis>: Specifies the mode of downloading contracts (whether the
JAR is available offline, remotely etc.)
* <emphasis role="strong">contractsSnapshotCheckSkip</emphasis>: If set to <literal>true</literal> will not assert whether the
downloaded stubs / contract JAR was downloaded from a remote location or a local one(only applicable to Maven repos, not Git or Pact).
* <emphasis role="strong">deleteStubsAfterTest</emphasis>: If set to <literal>false</literal> will not remove any downloaded
contracts from temporary directories</simpara>
</section>
<section xml:id="gradle-single-base-class">
<title>Single Base Class for All Tests</title>
<simpara>When using Spring Cloud Contract Verifier in default MockMvc, you need to create a base
specification for all generated acceptance tests. In this class, you need to point to an
endpoint, which should be verified.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">abstract class BaseMockMvcSpec extends Specification {

	def setup() {
		RestAssuredMockMvc.standaloneSetup(new PairIdController())
	}

	void isProperCorrelationId(Integer correlationId) {
		assert correlationId == 123456
	}

	void isEmpty(String value) {
		assert value == null
	}

}</programlisting>
<simpara>If you use <literal>Explicit</literal> mode, you can use a base class to initialize the whole tested app
as you might see in regular integration tests. If you use the <literal>JAXRSCLIENT</literal> mode, this
base class should also contain a <literal>protected WebTarget webTarget</literal> field. Right now, the
only option to test the JAX-RS API is to start a web server.</simpara>
</section>
<section xml:id="gradle-different-base-classes">
<title>Different Base Classes for Contracts</title>
<simpara>If your base classes differ between contracts, you can tell the Spring Cloud Contract
plugin which class should get extended by the autogenerated tests. You have two options:</simpara>
<itemizedlist>
<listitem>
<simpara>Follow a convention by providing the <literal>packageWithBaseClasses</literal></simpara>
</listitem>
<listitem>
<simpara>Provide explicit mapping via <literal>baseClassMappings</literal></simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">By Convention</emphasis></simpara>
<simpara>The convention is such that if you have a contract under (for example)
<literal>src/test/resources/contract/foo/bar/baz/</literal> and set the value of the
<literal>packageWithBaseClasses</literal> property to <literal>com.example.base</literal>, then Spring Cloud Contract
Verifier assumes that there is a <literal>BarBazBase</literal> class under the <literal>com.example.base</literal> package.
In other words, the system takes the last two parts of the package, if they exist, and
forms a class with a <literal>Base</literal> suffix. This rule takes precedence over <emphasis role="strong">baseClassForTests</emphasis>.
Here is an example of how it works in the <literal>contracts</literal> closure:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">packageWithBaseClasses = 'com.example.base'</programlisting>
<simpara><emphasis role="strong">By Mapping</emphasis></simpara>
<simpara>You can manually map a regular expression of the contract&#8217;s package to fully qualified
name of the base class for the matched contract. You have to provide a list called
<literal>baseClassMappings</literal> that consists <literal>baseClassMapping</literal> objects that takes a
<literal>contractPackageRegex</literal> to <literal>baseClassFQN</literal> mapping. Consider the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">baseClassForTests = "com.example.FooBase"
baseClassMappings {
	baseClassMapping('.*/com/.*', 'com.example.ComBase')
	baseClassMapping('.*/bar/.*':'com.example.BarBase')
}</programlisting>
<simpara>Let&#8217;s assume that you have contracts under
 - <literal>src/test/resources/contract/com/</literal>
 - <literal>src/test/resources/contract/foo/</literal></simpara>
<simpara>By providing the <literal>baseClassForTests</literal>, we have a fallback in case mapping did not succeed.
(You could also provide the <literal>packageWithBaseClasses</literal> as a fallback.) That way, the tests
generated from <literal>src/test/resources/contract/com/</literal> contracts extend the
<literal>com.example.ComBase</literal>, whereas the rest of the tests extend <literal>com.example.FooBase</literal>.</simpara>
</section>
<section xml:id="gradle-invoking-generated-tests">
<title>Invoking Generated Tests</title>
<simpara>To ensure that the provider side is compliant with defined contracts, you need to invoke:</simpara>
<programlisting language="bash" linenumbering="unnumbered">./gradlew generateContractTests test</programlisting>
</section>
<section xml:id="gradle-pushing-stubs-to-scm">
<title>Pushing stubs to SCM</title>
<simpara>If you&#8217;re using the SCM repository to keep the contracts and
stubs, you might want to automate the step of pushing stubs to
the repository. To do that, it&#8217;s enough to call the <literal>pushStubsToScm</literal>
task. Example:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ ./gradlew pushStubsToScm</programlisting>
<simpara>Under <xref linkend="scm-stub-downloader"/> you can find all possible
configuration options that you can pass either via
the <literal>contractsProperties</literal> field e.g. <literal>contracts { contractsProperties = [foo:"bar"] }</literal>,
via <literal>contractsProperties</literal> method e.g. <literal>contracts { contractsProperties([foo:"bar"]) }</literal>,
a system property or an environment variable.</simpara>
</section>
<section xml:id="gradle-consumer">
<title>Spring Cloud Contract Verifier on the Consumer Side</title>
<simpara>In a consuming service, you need to configure the Spring Cloud Contract Verifier plugin
in exactly the same way as in case of provider. If you do not want to use Stub Runner
then you need to copy contracts stored in <literal>src/test/resources/contracts</literal> and generate
WireMock JSON stubs using:</simpara>
<programlisting language="bash" linenumbering="unnumbered">./gradlew generateClientStubs</programlisting>
<note>
<simpara>The <literal>stubsOutputDir</literal> option has to be set for stub generation to work.</simpara>
</note>
<simpara>When present, JSON stubs can be used in automated tests of consuming a service.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ContextConfiguration(loader == SpringApplicationContextLoader, classes == Application)
class LoanApplicationServiceSpec extends Specification {

 @ClassRule
 @Shared
 WireMockClassRule wireMockRule == new WireMockClassRule()

 @Autowired
 LoanApplicationService sut

 def 'should successfully apply for loan'() {
   given:
 	LoanApplication application =
			new LoanApplication(client: new Client(clientPesel: '12345678901'), amount: 123.123)
   when:
	LoanApplicationResult loanApplication == sut.loanApplication(application)
   then:
	loanApplication.loanApplicationStatus == LoanApplicationStatus.LOAN_APPLIED
	loanApplication.rejectionReason == null
 }
}</programlisting>
<simpara><literal>LoanApplication</literal> makes a call to <literal>FraudDetection</literal> service. This request is handled by a
WireMock server configured with stubs generated by Spring Cloud Contract Verifier.</simpara>
</section>
</section>
<section xml:id="maven-project">
<title>Maven Project</title>
<simpara>To learn how to set up the Maven project for Spring Cloud Contract Verifier, read the
following sections:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="maven-add-plugin"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-rest-assured"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-snapshot-versions"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-add-stubs"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-run-plugin"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-configure-plugin"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-configuration-options"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-single-base"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-different-base"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-invoking-generated-tests"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-pushing-stubs-to-scm"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="maven-sts"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="maven-add-plugin">
<title>Add maven plugin</title>
<simpara>Add the Spring Cloud Contract BOM in a fashion similar to this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
<simpara>Next, add the <literal>Spring Cloud Contract Verifier</literal> Maven plugin:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example.fraud&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>You can read more in the
<link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/">Spring
Cloud Contract Maven Plugin Documentation</link>.</simpara>
</section>
<section xml:id="maven-rest-assured">
<title>Maven and Rest Assured 2.0</title>
<simpara>By default, Rest Assured 3.x is added to the classpath. However, you can use Rest
Assured 2.x by adding it to the plugins classpath, as shown here:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;configuration&gt;
        &lt;packageWithBaseClasses&gt;com.example&lt;/packageWithBaseClasses&gt;
    &lt;/configuration&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-contract-verifier&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
           &lt;groupId&gt;com.jayway.restassured&lt;/groupId&gt;
           &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;
           &lt;version&gt;2.5.0&lt;/version&gt;
           &lt;scope&gt;compile&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
           &lt;groupId&gt;com.jayway.restassured&lt;/groupId&gt;
           &lt;artifactId&gt;spring-mock-mvc&lt;/artifactId&gt;
           &lt;version&gt;2.5.0&lt;/version&gt;
           &lt;scope&gt;compile&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/plugin&gt;

&lt;dependencies&gt;
    &lt;!-- all dependencies --&gt;
    &lt;!-- you can exclude rest-assured from spring-cloud-contract-verifier --&gt;
    &lt;dependency&gt;
       &lt;groupId&gt;com.jayway.restassured&lt;/groupId&gt;
       &lt;artifactId&gt;rest-assured&lt;/artifactId&gt;
       &lt;version&gt;2.5.0&lt;/version&gt;
       &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
       &lt;groupId&gt;com.jayway.restassured&lt;/groupId&gt;
       &lt;artifactId&gt;spring-mock-mvc&lt;/artifactId&gt;
       &lt;version&gt;2.5.0&lt;/version&gt;
       &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
<simpara>That way, the plugin automatically sees that Rest Assured 3.x is present on the classpath
and modifies the imports accordingly.</simpara>
</section>
<section xml:id="maven-snapshot-versions">
<title>Snapshot versions for Maven</title>
<simpara>For Snapshot and Milestone versions, you have to add the following section to your
<literal>pom.xml</literal>, as shown here:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;repositories&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
&lt;/repositories&gt;
&lt;pluginRepositories&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;</programlisting>
</section>
<section xml:id="maven-add-stubs">
<title>Add stubs</title>
<simpara>By default, Spring Cloud Contract Verifier is looking for stubs in the
<literal>src/test/resources/contracts</literal> directory. The directory containing stub definitions is
treated as a class name, and each stub definition is treated as a single test. We assume
that it contains at least one directory to be used as test class name. If there is more
than one level of nested directories, all except the last one is used as package name.
For example, with following structure:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">src/test/resources/contracts/myservice/shouldCreateUser.groovy
src/test/resources/contracts/myservice/shouldReturnUser.groovy</programlisting>
<simpara>Spring Cloud Contract Verifier creates a test class named <literal>defaultBasePackage.MyService</literal>
with two methods</simpara>
<itemizedlist>
<listitem>
<simpara><literal>shouldCreateUser()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>shouldReturnUser()</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="maven-run-plugin">
<title>Run plugin</title>
<simpara>The plugin goal <literal>generateTests</literal> is assigned to be invoked in the phase called
<literal>generate-test-sources</literal>. If you want it to be part of your build process, you need not do
anything. If you just want to generate tests, invoke the <literal>generateTests</literal> goal.</simpara>
</section>
<section xml:id="maven-configure-plugin">
<title>Configure plugin</title>
<simpara>To change the default configuration, just add a <literal>configuration</literal> section to the plugin
definition or the <literal>execution</literal> definition, as shown here:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;goals&gt;
                &lt;goal&gt;convert&lt;/goal&gt;
                &lt;goal&gt;generateStubs&lt;/goal&gt;
                &lt;goal&gt;generateTests&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
        &lt;basePackageForTests&gt;org.springframework.cloud.verifier.twitter.place&lt;/basePackageForTests&gt;
        &lt;baseClassForTests&gt;org.springframework.cloud.verifier.twitter.place.BaseMockMvcSpec&lt;/baseClassForTests&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
</section>
<section xml:id="maven-configuration-options">
<title>Configuration Options</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">testMode</emphasis>: Defines the mode for acceptance tests. By default, the mode is MockMvc,
which is based on Spring&#8217;s MockMvc. It can also be changed to <emphasis role="strong">JaxRsClient</emphasis> or to
<emphasis role="strong">Explicit</emphasis> for real HTTP calls.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">basePackageForTests</emphasis>: Specifies the base package for all generated tests. If not set,
the value is picked from <literal>baseClassForTests&#8217;s package and from `packageWithBaseClasses</literal>.
If neither of these values are set, then the value is set to
<literal>org.springframework.cloud.contract.verifier.tests</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ruleClassForTests</emphasis>: Specifies a rule that should be added to the generated test
classes.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">baseClassForTests</emphasis>: Creates a base class for all generated tests. By default, if you
use Spock classes, the class is <literal>spock.lang.Specification</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsDirectory</emphasis>: Specifies a directory containing contracts written with the
GroovyDSL. The default directory is <literal>/src/test/resources/contracts</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">testFramework</emphasis>: Specifies the target test framework to be used. Currently, Spock and
JUnit are supported with JUnit being the default framework</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">packageWithBaseClasses</emphasis>: Defines a package where all the base classes reside. This
setting takes precedence over <emphasis role="strong">baseClassForTests</emphasis>. The convention is such that, if you
have a contract under (for example) <literal>src/test/resources/contract/foo/bar/baz/</literal> and set
the value of the <literal>packageWithBaseClasses</literal> property to <literal>com.example.base</literal>, then Spring
Cloud Contract Verifier assumes that there is a <literal>BarBazBase</literal> class under the
<literal>com.example.base</literal> package. In other words, the system takes the last two parts of the
package, if they exist, and forms a class with a <literal>Base</literal> suffix.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">baseClassMappings</emphasis>: Specifies a list of base class mappings that provide
<literal>contractPackageRegex</literal>, which is checked against the package where the contract is
located, and <literal>baseClassFQN</literal>, which maps to the fully qualified name of the base class for
the matched contract. For example, if you have a contract under
<literal>src/test/resources/contract/foo/bar/baz/</literal> and map the property
<literal>.* &#8594; com.example.base.BaseClass</literal>, then the test class generated from these contracts
extends <literal>com.example.base.BaseClass</literal>. This setting takes precedence over
<emphasis role="strong">packageWithBaseClasses</emphasis> and <emphasis role="strong">baseClassForTests</emphasis>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsProperties</emphasis>: a map containing properties to be passed to Spring Cloud Contract
components. Those properties might be used by e.g. inbuilt or custom Stub Downloaders.</simpara>
</listitem>
</itemizedlist>
<simpara>If you want to download your contract definitions from a Maven repository, you can use
the following options:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">contractDependency</emphasis>: The contract dependency that contains all the packaged contracts.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsPath</emphasis>: The path to the concrete contracts in the JAR with packaged contracts.
Defaults to <literal>groupid/artifactid</literal> where <literal>gropuid</literal> is slash separated.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsMode</emphasis>: Picks the mode in which stubs will be found and registered</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsSnapshotCheckSkip</emphasis>: If <literal>true</literal> then will not assert whether a stub / contract
JAR was downloaded from local or remote location</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">deleteStubsAfterTest</emphasis>: If set to <literal>false</literal> will not remove any downloaded
contracts from temporary directories</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsRepositoryUrl</emphasis>: URL to a repo with the artifacts that have contracts. If it is not provided,
use the current Maven ones.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsRepositoryUsername</emphasis>: The user name to be used to connect to the repo with contracts.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsRepositoryPassword</emphasis>: The password to be used to connect to the repo with contracts.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsRepositoryProxyHost</emphasis>: The proxy host to be used to connect to the repo with contracts.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">contractsRepositoryProxyPort</emphasis>: The proxy port to be used to connect to the repo with contracts.</simpara>
</listitem>
</itemizedlist>
<simpara>We cache only non-snapshot, explicitly provided versions (for example
<literal>+</literal> or <literal>1.0.0.BUILD-SNAPSHOT</literal> won&#8217;t get cached). By default, this feature is turned on.</simpara>
</section>
<section xml:id="maven-single-base">
<title>Single Base Class for All Tests</title>
<simpara>When using Spring Cloud Contract Verifier in default MockMvc, you need to create a base
specification for all generated acceptance tests. In this class, you need to point to an
endpoint, which should be verified.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.mycompany.tests

import org.mycompany.ExampleSpringController
import com.jayway.restassured.module.mockmvc.RestAssuredMockMvc
import spock.lang.Specification

class MvcSpec extends Specification {
  def setup() {
   RestAssuredMockMvc.standaloneSetup(new ExampleSpringController())
  }
}</programlisting>
<simpara>You can also setup the whole context if necessary.</simpara>
<programlisting language="java" linenumbering="unnumbered">import io.restassured.module.mockmvc.RestAssuredMockMvc;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.context.WebApplicationContext;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = SomeConfig.class, properties="some=property")
public abstract class BaseTestClass {

	@Autowired
	WebApplicationContext context;

	@Before
	public void setup() {
		RestAssuredMockMvc.webAppContextSetup(this.context);
	}
}</programlisting>
<simpara>If you use <literal>EXPLICIT</literal> mode, you can use a base class to initialize the whole tested app
similarly, as you might find in regular integration tests.</simpara>
<programlisting language="java" linenumbering="unnumbered">import io.restassured.RestAssured;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.context.WebApplicationContext;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, classes = SomeConfig.class, properties="some=property")
public abstract class BaseTestClass {

	@LocalServerPort
	int port;

	@Before
	public void setup() {
		RestAssured.baseURI = "http://localhost:" + this.port;
	}
}</programlisting>
<simpara>If you use the <literal>JAXRSCLIENT</literal> mode, this base class should also contain a <literal>protected WebTarget webTarget</literal> field. Right
now, the only option to test the JAX-RS API is to start a web server.</simpara>
</section>
<section xml:id="maven-different-base">
<title>Different base classes for contracts</title>
<simpara>If your base classes differ between contracts, you can tell the Spring Cloud Contract
plugin which class should get extended by the autogenerated tests. You have two options:</simpara>
<itemizedlist>
<listitem>
<simpara>Follow a convention by providing the <literal>packageWithBaseClasses</literal></simpara>
</listitem>
<listitem>
<simpara>provide explicit mapping via <literal>baseClassMappings</literal></simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">By Convention</emphasis></simpara>
<simpara>The convention is such that if you have a contract under (for example)
<literal>src/test/resources/contract/foo/bar/baz/</literal> and set the value of the
<literal>packageWithBaseClasses</literal> property to <literal>com.example.base</literal>, then Spring Cloud Contract
Verifier assumes that there is a <literal>BarBazBase</literal> class under the <literal>com.example.base</literal> package.
In other words, the system takes the last two parts of the package, if they exist, and
forms a class with a <literal>Base</literal> suffix. This rule takes precedence over <emphasis role="strong">baseClassForTests</emphasis>.
Here is an example of how it works in the <literal>contracts</literal> closure:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;hello&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara><emphasis role="strong">By Mapping</emphasis></simpara>
<simpara>You can manually map a regular expression of the contract&#8217;s package to fully qualified
name of the base class for the matched contract. You have to provide a list called
<literal>baseClassMappings</literal> that consists <literal>baseClassMapping</literal> objects that takes a
<literal>contractPackageRegex</literal> to <literal>baseClassFQN</literal> mapping. Consider the following example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;configuration&gt;
		&lt;baseClassForTests&gt;com.example.FooBase&lt;/baseClassForTests&gt;
		&lt;baseClassMappings&gt;
			&lt;baseClassMapping&gt;
				&lt;contractPackageRegex&gt;.*com.*&lt;/contractPackageRegex&gt;
				&lt;baseClassFQN&gt;com.example.TestBase&lt;/baseClassFQN&gt;
			&lt;/baseClassMapping&gt;
		&lt;/baseClassMappings&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Assume that you have contracts under these two locations:
* <literal>src/test/resources/contract/com/</literal>
* <literal>src/test/resources/contract/foo/</literal></simpara>
<simpara>By providing the <literal>baseClassForTests</literal>, we have a fallback in case mapping did not succeed.
(You can also provide the <literal>packageWithBaseClasses</literal> as a fallback.) That way, the tests
generated from <literal>src/test/resources/contract/com/</literal> contracts extend the
<literal>com.example.ComBase</literal>, whereas the rest of the tests extend <literal>com.example.FooBase</literal>.</simpara>
</section>
<section xml:id="maven-invoking-generated-tests">
<title>Invoking generated tests</title>
<simpara>The Spring Cloud Contract Maven Plugin generates verification code in a directory called
<literal>/generated-test-sources/contractVerifier</literal> and attaches this directory to <literal>testCompile</literal>
goal.</simpara>
<simpara>For Groovy Spock code, use the following:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.codehaus.gmavenplus&lt;/groupId&gt;
	&lt;artifactId&gt;gmavenplus-plugin&lt;/artifactId&gt;
	&lt;version&gt;1.5&lt;/version&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;goals&gt;
				&lt;goal&gt;testCompile&lt;/goal&gt;
			&lt;/goals&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
	&lt;configuration&gt;
		&lt;testSources&gt;
			&lt;testSource&gt;
				&lt;directory&gt;${project.basedir}/src/test/groovy&lt;/directory&gt;
				&lt;includes&gt;
					&lt;include&gt;**/*.groovy&lt;/include&gt;
				&lt;/includes&gt;
			&lt;/testSource&gt;
			&lt;testSource&gt;
				&lt;directory&gt;${project.build.directory}/generated-test-sources/contractVerifier&lt;/directory&gt;
				&lt;includes&gt;
					&lt;include&gt;**/*.groovy&lt;/include&gt;
				&lt;/includes&gt;
			&lt;/testSource&gt;
		&lt;/testSources&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
<simpara>To ensure that provider side is compliant with defined contracts, you need to invoke
<literal>mvn generateTest test</literal>.</simpara>
</section>
<section xml:id="maven-pushing-stubs-to-scm">
<title>Pushing stubs to SCM</title>
<simpara>If you&#8217;re using the SCM repository to keep the contracts and
stubs, you might want to automate the step of pushing stubs to
the repository. To do that, it&#8217;s enough to add the <literal>pushStubsToScm</literal>
goal. Example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;configuration&gt;
        &lt;!-- Base class mappings etc. --&gt;

        &lt;!-- We want to pick contracts from a Git repository --&gt;
        &lt;contractsRepositoryUrl&gt;git://https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs-contracts-git.git&lt;/contractsRepositoryUrl&gt;

        &lt;!-- We reuse the contract dependency section to set up the path
        to the folder that contains the contract definitions. In our case the
        path will be /groupId/artifactId/version/contracts --&gt;
        &lt;contractDependency&gt;
            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;
            &lt;artifactId&gt;${project.artifactId}&lt;/artifactId&gt;
            &lt;version&gt;${project.version}&lt;/version&gt;
        &lt;/contractDependency&gt;

        &lt;!-- The contracts mode can't be classpath --&gt;
        &lt;contractsMode&gt;REMOTE&lt;/contractsMode&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
                &lt;!-- By default we will not push the stubs back to SCM,
                you have to explicitly add it as a goal --&gt;
                &lt;goal&gt;pushStubsToScm&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;</programlisting>
<simpara>Under <xref linkend="scm-stub-downloader"/> you can find all possible
configuration options that you can pass either via
the <literal>&lt;configuration&gt;&lt;contractProperties&gt;</literal> map, a system property
or an environment variable.</simpara>
</section>
<section xml:id="maven-sts">
<title>Maven Plugin and STS</title>
<simpara>If you see the following exception while using STS:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-contract/master/docs/src/main/asciidoc/images/sts_exception.png"/>
</imageobject>
<textobject><phrase>STS Exception</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>When you click on the error marker you should see something like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered"> plugin:1.1.0.M1:convert:default-convert:process-test-resources) org.apache.maven.plugin.PluginExecutionException: Execution default-convert of goal org.springframework.cloud:spring-
 cloud-contract-maven-plugin:1.1.0.M1:convert failed. at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145) at
 org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:331) at org.eclipse.m2e.core.internal.embedder.MavenImpl$11.call(MavenImpl.java:1362) at
...
 org.eclipse.core.internal.jobs.Worker.run(Worker.java:55) Caused by: java.lang.NullPointerException at
 org.eclipse.m2e.core.internal.builder.plexusbuildapi.EclipseIncrementalBuildContext.hasDelta(EclipseIncrementalBuildContext.java:53) at
 org.sonatype.plexus.build.incremental.ThreadBuildContext.hasDelta(ThreadBuildContext.java:59) at</programlisting>
<simpara>In order to fix this issue, provide the following section in your <literal>pom.xml</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;build&gt;
    &lt;pluginManagement&gt;
        &lt;plugins&gt;
            &lt;!--This plugin's configuration is used to store Eclipse m2e settings
                only. It has no influence on the Maven build itself. --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt;
                &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt;
                &lt;version&gt;1.0.0&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;lifecycleMappingMetadata&gt;
                        &lt;pluginExecutions&gt;
                             &lt;pluginExecution&gt;
                                &lt;pluginExecutionFilter&gt;
                                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                                    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
                                    &lt;versionRange&gt;[1.0,)&lt;/versionRange&gt;
                                    &lt;goals&gt;
                                        &lt;goal&gt;convert&lt;/goal&gt;
                                    &lt;/goals&gt;
                                &lt;/pluginExecutionFilter&gt;
                                &lt;action&gt;
                                    &lt;execute /&gt;
                                &lt;/action&gt;
                             &lt;/pluginExecution&gt;
                        &lt;/pluginExecutions&gt;
                    &lt;/lifecycleMappingMetadata&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
&lt;/build&gt;</programlisting>
</section>
</section>
<section xml:id="_stubs_and_transitive_dependencies">
<title>Stubs and Transitive Dependencies</title>
<simpara>The Maven and Gradle plugin that add the tasks that create the stubs jar for you. One
problem that arises is that, when reusing the stubs, you can mistakenly import all of
that stub&#8217;s dependencies. When building a Maven artifact, even though you have a couple
of different jars, all of them share one pom:</simpara>
<programlisting language="bash" linenumbering="unnumbered">├── github-webhook-0.0.1.BUILD-20160903.075506-1-stubs.jar
├── github-webhook-0.0.1.BUILD-20160903.075506-1-stubs.jar.sha1
├── github-webhook-0.0.1.BUILD-20160903.075655-2-stubs.jar
├── github-webhook-0.0.1.BUILD-20160903.075655-2-stubs.jar.sha1
├── github-webhook-0.0.1.BUILD-SNAPSHOT.jar
├── github-webhook-0.0.1.BUILD-SNAPSHOT.pom
├── github-webhook-0.0.1.BUILD-SNAPSHOT-stubs.jar
├── ...
└── ...</programlisting>
<simpara>There are three possibilities of working with those dependencies so as not to have any
issues with transitive dependencies:</simpara>
<itemizedlist>
<listitem>
<simpara>Mark all application dependencies as optional</simpara>
</listitem>
<listitem>
<simpara>Create a separate artifactid for the stubs</simpara>
</listitem>
<listitem>
<simpara>Exclude dependencies on the consumer side</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Mark all application dependencies as optional</emphasis></simpara>
<simpara>If, in the <literal>github-webhook</literal> application, you mark all of your dependencies as optional,
when you include the <literal>github-webhook</literal> stubs in another application (or when that
dependency gets downloaded by Stub Runner) then, since all of the dependencies are
optional, they will not get downloaded.</simpara>
<simpara><emphasis role="strong">Create a separate <literal>artifactid</literal> for the stubs</emphasis></simpara>
<simpara>If you create a separate <literal>artifactid</literal>, then you can set it up in whatever way you wish.
For example, you might decide to have no dependencies at all.</simpara>
<simpara><emphasis role="strong">Exclude dependencies on the consumer side</emphasis></simpara>
<simpara>As a consumer, if you add the stub dependency to your classpath, you can explicitly
exclude the unwanted dependencies.</simpara>
</section>
<section xml:id="_ci_server_setup">
<title>CI Server setup</title>
<simpara>When fetching stubs / contracts in a CI, shared environment, what might happen is that
both the producer and the consumer reuse the same local Maven repository. Due to this,
the framework, responsible for downloading a stub JAR from remote location,
can&#8217;t decide which JAR should be picked, local or remote one. That caused
the <literal>"The artifact was found in the local repository but you have explicitly
stated that it should be downloaded from a remote one"</literal> exception
and failed the build.</simpara>
<simpara>For such cases we&#8217;re introducing the property and plugin setup mechanism:</simpara>
<itemizedlist>
<listitem>
<simpara>via <literal>stubrunner.snapshot-check-skip</literal> system property</simpara>
</listitem>
<listitem>
<simpara>via <literal>STUBRUNNER_SNAPSHOT_CHECK_SKIP</literal> environment variable</simpara>
</listitem>
</itemizedlist>
<simpara>if either of these values is set to <literal>true</literal>, then the stub downloader will not
verify the origin of the downloaded JAR.</simpara>
<simpara>For the plugins you need to set the <literal>contractsSnapshotSkipCheck</literal> property
to <literal>true</literal>.</simpara>
</section>
<section xml:id="_scenarios">
<title>Scenarios</title>
<simpara>You can handle scenarios with Spring Cloud Contract Verifier. All you need to do is to
stick to the proper naming convention while creating your contracts. The convention
requires including an order number followed by an underscore. This will work regardles
 of whether you&#8217;re working with YAML or Groovy. Example:</simpara>
<screen>my_contracts_dir\
  scenario1\
    1_login.groovy
    2_showCart.groovy
    3_logout.groovy</screen>
<simpara>Such a tree causes Spring Cloud Contract Verifier to generate WireMock&#8217;s scenario with a
name of <literal>scenario1</literal> and the three following steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>login marked as <literal>Started</literal> pointing to&#8230;&#8203;</simpara>
</listitem>
<listitem>
<simpara>showCart marked as <literal>Step1</literal> pointing to&#8230;&#8203;</simpara>
</listitem>
<listitem>
<simpara>logout marked as <literal>Step2</literal> which will close the scenario.</simpara>
</listitem>
</orderedlist>
<simpara>More details about WireMock scenarios can be found at
<link xl:href="http://wiremock.org/stateful-behaviour.html">http://wiremock.org/stateful-behaviour.html</link></simpara>
<simpara>Spring Cloud Contract Verifier also generates tests with a guaranteed order of execution.</simpara>
</section>
<section xml:id="docker-project">
<title>Docker Project</title>
<simpara>We&#8217;re publishing a <literal>springcloud/spring-cloud-contract</literal> Docker image
that contains a project that will generate tests and execute them in <literal>EXPLICIT</literal> mode
against a running application.</simpara>
<tip>
<simpara>The <literal>EXPLICIT</literal> mode means that the tests generated from contracts will send
real requests and not the mocked ones.</simpara>
</tip>
<section xml:id="_short_intro_to_maven_jars_and_binary_storage">
<title>Short intro to Maven, JARs and Binary storage</title>
<simpara>Since the Docker image can be used by non JVM projects, it&#8217;s good to
explain the basic terms behind Spring Cloud Contract packaging defaults.</simpara>
<simpara>Part of the following definitions were taken from the <link xl:href="https://maven.apache.org/glossary.html">Maven Glossary</link></simpara>
<itemizedlist>
<listitem>
<simpara><literal>Project</literal>: Maven thinks in terms of projects. Everything that you
will build are projects. Those projects follow a well defined
“Project Object Model”. Projects can depend on other projects,
in which case the latter are called “dependencies”. A project may
consistent of several subprojects, however these subprojects are still
treated equally as projects.</simpara>
</listitem>
<listitem>
<simpara><literal>Artifact</literal>: An artifact is something that is either produced or used
by a project. Examples of artifacts produced by Maven for a project
include: JARs, source and binary distributions. Each artifact
is uniquely identified by a group id and an artifact ID which is
unique within a group.</simpara>
</listitem>
<listitem>
<simpara><literal>JAR</literal>: JAR stands for Java ARchive. It&#8217;s a format based on
the ZIP file format. Spring Cloud Contract packages the contracts and generated
stubs in a JAR file.</simpara>
</listitem>
<listitem>
<simpara><literal>GroupId</literal>: A group ID is a universally unique identifier for a project.
While this is often just the project name (eg. commons-collections),
it is helpful to use a fully-qualified package name to distinguish it
from other projects with a similar name (eg. org.apache.maven).
Typically, when published to the Artifact Manager, the <literal>GroupId</literal> will get
slash separated and form part of the URL. E.g. for group id <literal>com.example</literal>
and artifact id <literal>application</literal> would be <literal>/com/example/application/</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Classifier</literal>: The Maven dependency notation looks as follows:
<literal>groupId:artifactId:version:classifier</literal>. The classifier is additional suffix
passed to the dependency. E.g. <literal>stubs</literal>, <literal>sources</literal>. The same dependency
e.g. <literal>com.example:application</literal> can produce multiple artifacts that
differ from each other with the classifier.</simpara>
</listitem>
<listitem>
<simpara><literal>Artifact manager</literal>: When you generate binaries / sources / packages, you would
like them to be available for others to download / reference or reuse. In case
of the JVM world those artifacts would be JARs, for Ruby these are gems
and for Docker those would be Docker images. You can store those artifacts
in a manager. Examples of such managers can be <link xl:href="https://jfrog.com/artifactory/">Artifactory</link>
or <link xl:href="https://www.sonatype.org/nexus/">Nexus</link>.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_how_it_works_2">
<title>How it works</title>
<simpara>The image searches for contracts under the <literal>/contracts</literal> folder.
The output from running the tests will be available under
<literal>/spring-cloud-contract/build</literal> folder (it&#8217;s useful for debugging
purposes).</simpara>
<simpara>It&#8217;s enough for you to mount your contracts, pass the environment variables
 and the image will:</simpara>
<itemizedlist>
<listitem>
<simpara>generate the contract tests</simpara>
</listitem>
<listitem>
<simpara>execute the tests against the provided URL</simpara>
</listitem>
<listitem>
<simpara>generate the <link xl:href="http://wiremock.org">WireMock</link> stubs</simpara>
</listitem>
<listitem>
<simpara>(optional - turned on by default) publish the stubs to a Artifact Manager</simpara>
</listitem>
</itemizedlist>
<section xml:id="_environment_variables">
<title>Environment Variables</title>
<simpara>The Docker image requires some environment variables to point to
your running application, to the Artifact manager instance etc.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>PROJECT_GROUP</literal> - your project&#8217;s group id. Defaults to <literal>com.example</literal></simpara>
</listitem>
<listitem>
<simpara><literal>PROJECT_VERSION</literal> - your project&#8217;s version. Defaults to <literal>0.0.1-SNAPSHOT</literal></simpara>
</listitem>
<listitem>
<simpara><literal>PROJECT_NAME</literal> - artifact id. Defaults to <literal>example</literal></simpara>
</listitem>
<listitem>
<simpara><literal>REPO_WITH_BINARIES_URL</literal> - URL of your Artifact Manager. Defaults to <literal><link xl:href="http://localhost:8081/artifactory/libs-release-local">http://localhost:8081/artifactory/libs-release-local</link></literal>
which is the default URL of <link xl:href="https://jfrog.com/artifactory/">Artifactory</link> running locally</simpara>
</listitem>
<listitem>
<simpara><literal>REPO_WITH_BINARIES_USERNAME</literal> - (optional) username when the Artifact Manager is secured</simpara>
</listitem>
<listitem>
<simpara><literal>REPO_WITH_BINARIES_PASSWORD</literal> - (optional) password when the Artifact Manager is secured</simpara>
</listitem>
<listitem>
<simpara><literal>PUBLISH_ARTIFACTS</literal> - if set to <literal>true</literal> then will publish artifact to binary storage. Defaults to <literal>true</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>These environment variables are used when contracts lay in an external repository. To enable
this feature you must set the <literal>EXTERNAL_CONTRACTS_ARTIFACT_ID</literal> environment variable.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_GROUP_ID</literal> - group id of the project with contracts. Defaults to <literal>com.example</literal></simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_ARTIFACT_ID</literal>- artifact id of the project with contracts.</simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_CLASSIFIER</literal>- classifier of the project with contracts. Empty by default</simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_VERSION</literal> - version of the project with contracts. Defaults to <literal>+</literal>, equivalent to picking the latest</simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_REPO_WITH_BINARIES_URL</literal> - URL of your Artifact Manager. Defaults to value of <literal>REPO_WITH_BINARIES_URL</literal> env var.
If that&#8217;s not set, defaults to <literal><link xl:href="http://localhost:8081/artifactory/libs-release-local">http://localhost:8081/artifactory/libs-release-local</link></literal>
which is the default URL of <link xl:href="https://jfrog.com/artifactory/">Artifactory</link> running locally</simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_PATH</literal> - path to contracts for the given project, inside the project with contracts.
Defaults to slash separated <literal>EXTERNAL_CONTRACTS_GROUP_ID</literal> concatenated with <literal>/</literal> and <literal>EXTERNAL_CONTRACTS_ARTIFACT_ID</literal>. E.g.
for group id <literal>foo.bar</literal> and artifact id <literal>baz</literal>, would result in <literal>foo/bar/baz</literal> contracts path.</simpara>
</listitem>
<listitem>
<simpara><literal>EXTERNAL_CONTRACTS_WORK_OFFLINE</literal> - if set to <literal>true</literal> then will retrieve artifact with contracts
from the container&#8217;s <literal>.m2</literal>. Mount your local <literal>.m2</literal> as a volume available at the container&#8217;s <literal>/root/.m2</literal> path.
You must not set both <literal>EXTERNAL_CONTRACTS_WORK_OFFLINE</literal> and <literal>EXTERNAL_CONTRACTS_REPO_WITH_BINARIES_URL</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>These environment variables are used when tests are executed:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>APPLICATION_BASE_URL</literal> - url against which tests should be executed.
Remember that it has to be accessible from the Docker container (e.g. <literal>localhost</literal>
will not work)</simpara>
</listitem>
<listitem>
<simpara><literal>APPLICATION_USERNAME</literal> - (optional) username for basic authentication to your application</simpara>
</listitem>
<listitem>
<simpara><literal>APPLICATION_PASSWORD</literal> - (optional) password for basic authentication to your application</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_example_of_usage">
<title>Example of usage</title>
<simpara>Let&#8217;s take a look at a simple MVC application</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs
$ cd bookstore</programlisting>
<simpara>The contracts are available under <literal>/contracts</literal> folder.</simpara>
</section>
<section xml:id="docker-server-side">
<title>Server side (nodejs)</title>
<simpara>Since we want to run tests, we could just execute:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ npm test</programlisting>
<simpara>however, for learning purposes, let&#8217;s split it into pieces:</simpara>
<programlisting language="bash" linenumbering="unnumbered"># Stop docker infra (nodejs, artifactory)
$ ./stop_infra.sh
# Start docker infra (nodejs, artifactory)
$ ./setup_infra.sh

# Kill &amp; Run app
$ pkill -f "node app"
$ nohup node app &amp;

# Prepare environment variables
$ SC_CONTRACT_DOCKER_VERSION="..."
$ APP_IP="192.168.0.100"
$ APP_PORT="3000"
$ ARTIFACTORY_PORT="8081"
$ APPLICATION_BASE_URL="http://${APP_IP}:${APP_PORT}"
$ ARTIFACTORY_URL="http://${APP_IP}:${ARTIFACTORY_PORT}/artifactory/libs-release-local"
$ CURRENT_DIR="$( pwd )"
$ CURRENT_FOLDER_NAME=${PWD##*/}
$ PROJECT_VERSION="0.0.1.RELEASE"

# Execute contract tests
$ docker run  --rm -e "APPLICATION_BASE_URL=${APPLICATION_BASE_URL}" -e "PUBLISH_ARTIFACTS=true" -e "PROJECT_NAME=${CURRENT_FOLDER_NAME}" -e "REPO_WITH_BINARIES_URL=${ARTIFACTORY_URL}" -e "PROJECT_VERSION=${PROJECT_VERSION}" -v "${CURRENT_DIR}/contracts/:/contracts:ro" -v "${CURRENT_DIR}/node_modules/spring-cloud-contract/output:/spring-cloud-contract-output/" springcloud/spring-cloud-contract:"${SC_CONTRACT_DOCKER_VERSION}"

# Kill app
$ pkill -f "node app"</programlisting>
<simpara>What will happen is that via bash scripts:</simpara>
<itemizedlist>
<listitem>
<simpara>infrastructure will be set up (MongoDb, Artifactory).
In real life scenario you would just run the NodeJS application
with mocked database. In this example we want to show how we can
benefit from Spring Cloud Contract in no time.</simpara>
</listitem>
<listitem>
<simpara>due to those constraints the contracts also represent the
stateful situation</simpara>
<itemizedlist>
<listitem>
<simpara>first request is a <literal>POST</literal> that causes data to get inserted to the database</simpara>
</listitem>
<listitem>
<simpara>second request is a <literal>GET</literal> that returns a list of data with 1 previously inserted element</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>the NodeJS application will be started (on port <literal>3000</literal>)</simpara>
</listitem>
<listitem>
<simpara>contract tests will be generated via Docker and tests
will be executed against the running application</simpara>
<itemizedlist>
<listitem>
<simpara>the contracts will be taken from <literal>/contracts</literal> folder.</simpara>
</listitem>
<listitem>
<simpara>the output of the test execution is available under
<literal>node_modules/spring-cloud-contract/output</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>the stubs will be uploaded to Artifactory. You can check them out
under <link xl:href="http://localhost:8081/artifactory/libs-release-local/com/example/bookstore/0.0.1.RELEASE/">http://localhost:8081/artifactory/libs-release-local/com/example/bookstore/0.0.1.RELEASE/</link> .
The stubs will be here <link xl:href="http://localhost:8081/artifactory/libs-release-local/com/example/bookstore/0.0.1.RELEASE/bookstore-0.0.1.RELEASE-stubs.jar">http://localhost:8081/artifactory/libs-release-local/com/example/bookstore/0.0.1.RELEASE/bookstore-0.0.1.RELEASE-stubs.jar</link>.</simpara>
</listitem>
</itemizedlist>
<simpara>To see how the client side looks like check out the <xref linkend="stubrunner-docker"/> section.</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_spring_cloud_contract_verifier_messaging">
<title>Spring Cloud Contract Verifier Messaging</title>
<simpara>Spring Cloud Contract Verifier lets you verify applications that use messaging as a
means of communication. All of the integrations shown in this document work with Spring,
but you can also create one of your own and use that.</simpara>
<section xml:id="_integrations_2">
<title>Integrations</title>
<simpara>You can use one of the following four integration configurations:</simpara>
<itemizedlist>
<listitem>
<simpara>Apache Camel</simpara>
</listitem>
<listitem>
<simpara>Spring Integration</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud Stream</simpara>
</listitem>
<listitem>
<simpara>Spring AMQP</simpara>
</listitem>
</itemizedlist>
<simpara>Since we use Spring Boot, if you have added one of these libraries to the classpath, all
the messaging configuration is automatically set up.</simpara>
<important>
<simpara>Remember to put <literal>@AutoConfigureMessageVerifier</literal> on the base class of your
generated tests. Otherwise, messaging part of Spring Cloud Contract Verifier does not
work.</simpara>
</important>
<important>
<simpara>If you want to use Spring Cloud Stream, remember to add a dependency on
<literal>org.springframework.cloud:spring-cloud-stream-test-support</literal>, as shown here:</simpara>
</important>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile "org.springframework.cloud:spring-cloud-stream-test-support"</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_manual_integration_testing">
<title>Manual Integration Testing</title>
<simpara>The main interface used by the tests is
<literal>org.springframework.cloud.contract.verifier.messaging.MessageVerifier</literal>.
It defines how to send and receive messages. You can create your own implementation to
achieve the same goal.</simpara>
<simpara>In a test, you can inject a <literal>ContractVerifierMessageExchange</literal> to send and receive
messages that follow the contract. Then add <literal>@AutoConfigureMessageVerifier</literal> to your test.
Here&#8217;s an example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringTestRunner.class)
@SpringBootTest
@AutoConfigureMessageVerifier
public static class MessagingContractTests {

  @Autowired
  private MessageVerifier verifier;
  ...
}</programlisting>
<note>
<simpara>If your tests require stubs as well, then <literal>@AutoConfigureStubRunner</literal> includes the
messaging configuration, so you only need the one annotation.</simpara>
</note>
</section>
<section xml:id="_publisher_side_test_generation">
<title>Publisher-Side Test Generation</title>
<simpara>Having the <literal>input</literal> or <literal>outputMessage</literal> sections in your DSL results in creation of tests
on the publisher&#8217;s side. By default, JUnit tests are created. However, there is also a
possibility to create Spock tests.</simpara>
<simpara>There are 3 main scenarios that we should take into consideration:</simpara>
<itemizedlist>
<listitem>
<simpara>Scenario 1: There is no input message that produces an output message. The output
message  is triggered by a component inside the application (for example, scheduler).</simpara>
</listitem>
<listitem>
<simpara>Scenario 2: The input message triggers an output message.</simpara>
</listitem>
<listitem>
<simpara>Scenario 3: The input message is consumed and there is no output message.</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>The destination passed to <literal>messageFrom</literal> or <literal>sentTo</literal> can have different
meanings for different messaging implementations. For <emphasis role="strong">Stream</emphasis> and <emphasis role="strong">Integration</emphasis> it is
first resolved as a <literal>destination</literal> of a channel. Then, if there is no such <literal>destination</literal>
it is resolved as a channel name. For <emphasis role="strong">Camel</emphasis>, that&#8217;s a certain component (for example,
<literal>jms</literal>).</simpara>
</important>
<section xml:id="_scenario_1_no_input_message">
<title>Scenario 1: No Input Message</title>
<simpara>For the given contract:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">def contractDsl = Contract.make {
	label 'some_label'
	input {
		triggeredBy('bookReturnedTriggered()')
	}
	outputMessage {
		sentTo('activemq:output')
		body('''{ "bookName" : "foo" }''')
		headers {
			header('BOOK-NAME', 'foo')
			messagingContentType(applicationJson())
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">label: some_label
input:
  triggeredBy: bookReturnedTriggered
outputMessage:
  sentTo: activemq:output
  body:
    bookName: foo
  headers:
    BOOK-NAME: foo
    contentType: application/json</programlisting>
</para>
</formalpara>
<simpara>The following JUnit test is created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
 // when:
  bookReturnedTriggered();

 // then:
  ContractVerifierMessage response = contractVerifierMessaging.receive("activemq:output");
  assertThat(response).isNotNull();
  assertThat(response.getHeader("BOOK-NAME")).isNotNull();
  assertThat(response.getHeader("BOOK-NAME").toString()).isEqualTo("foo");
  assertThat(response.getHeader("contentType")).isNotNull();
  assertThat(response.getHeader("contentType").toString()).isEqualTo("application/json");
 // and:
  DocumentContext parsedJson = JsonPath.parse(contractVerifierObjectMapper.writeValueAsString(response.getPayload()));
  assertThatJson(parsedJson).field("bookName").isEqualTo("foo");
'''</programlisting>
<simpara>And the following Spock test would be created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
 when:
  bookReturnedTriggered()

 then:
  ContractVerifierMessage response = contractVerifierMessaging.receive('activemq:output')
  assert response != null
  response.getHeader('BOOK-NAME')?.toString()  == 'foo'
  response.getHeader('contentType')?.toString()  == 'application/json'
 and:
  DocumentContext parsedJson = JsonPath.parse(contractVerifierObjectMapper.writeValueAsString(response.payload))
  assertThatJson(parsedJson).field("bookName").isEqualTo("foo")

'''</programlisting>
</section>
<section xml:id="_scenario_2_output_triggered_by_input">
<title>Scenario 2: Output Triggered by Input</title>
<simpara>For the given contract:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">def contractDsl = Contract.make {
	label 'some_label'
	input {
		messageFrom('jms:input')
		messageBody([
				bookName: 'foo'
		])
		messageHeaders {
			header('sample', 'header')
		}
	}
	outputMessage {
		sentTo('jms:output')
		body([
				bookName: 'foo'
		])
		headers {
			header('BOOK-NAME', 'foo')
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">label: some_label
input:
  messageFrom: jms:input
  messageBody:
    bookName: 'foo'
  messageHeaders:
    sample: header
outputMessage:
  sentTo: jms:output
  body:
    bookName: foo
  headers:
    BOOK-NAME: foo</programlisting>
</para>
</formalpara>
<simpara>The following JUnit test is created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
// given:
 ContractVerifierMessage inputMessage = contractVerifierMessaging.create(
  "{\\"bookName\\":\\"foo\\"}"
, headers()
  .header("sample", "header"));

// when:
 contractVerifierMessaging.send(inputMessage, "jms:input");

// then:
 ContractVerifierMessage response = contractVerifierMessaging.receive("jms:output");
 assertThat(response).isNotNull();
 assertThat(response.getHeader("BOOK-NAME")).isNotNull();
 assertThat(response.getHeader("BOOK-NAME").toString()).isEqualTo("foo");
// and:
 DocumentContext parsedJson = JsonPath.parse(contractVerifierObjectMapper.writeValueAsString(response.getPayload()));
 assertThatJson(parsedJson).field("bookName").isEqualTo("foo");
'''</programlisting>
<simpara>And the following Spock test would be created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">"""\
given:
   ContractVerifierMessage inputMessage = contractVerifierMessaging.create(
    '''{"bookName":"foo"}''',
    ['sample': 'header']
  )

when:
   contractVerifierMessaging.send(inputMessage, 'jms:input')

then:
   ContractVerifierMessage response = contractVerifierMessaging.receive('jms:output')
   assert response !- null
   response.getHeader('BOOK-NAME')?.toString()  == 'foo'
and:
   DocumentContext parsedJson = JsonPath.parse(contractVerifierObjectMapper.writeValueAsString(response.payload))
   assertThatJson(parsedJson).field("bookName").isEqualTo("foo")
"""</programlisting>
</section>
<section xml:id="_scenario_3_no_output_message">
<title>Scenario 3: No Output Message</title>
<simpara>For the given contract:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">def contractDsl = Contract.make {
	label 'some_label'
	input {
		messageFrom('jms:delete')
		messageBody([
				bookName: 'foo'
		])
		messageHeaders {
			header('sample', 'header')
		}
		assertThat('bookWasDeleted()')
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">label: some_label
input:
  messageFrom: jms:delete
  messageBody:
    bookName: 'foo'
  messageHeaders:
    sample: header
  assertThat: bookWasDeleted()</programlisting>
</para>
</formalpara>
<simpara>The following JUnit test is created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
// given:
 ContractVerifierMessage inputMessage = contractVerifierMessaging.create(
	"{\\"bookName\\":\\"foo\\"}"
, headers()
	.header("sample", "header"));

// when:
 contractVerifierMessaging.send(inputMessage, "jms:delete");

// then:
 bookWasDeleted();
'''</programlisting>
<simpara>And the following Spock test would be created:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
given:
	 ContractVerifierMessage inputMessage = contractVerifierMessaging.create(
		\'\'\'{"bookName":"foo"}\'\'\',
		['sample': 'header']
	)

when:
	 contractVerifierMessaging.send(inputMessage, 'jms:delete')

then:
	 noExceptionThrown()
	 bookWasDeleted()
'''</programlisting>
</section>
</section>
<section xml:id="_consumer_stub_generation">
<title>Consumer Stub Generation</title>
<simpara>Unlike the HTTP part, in messaging, we need to publish the Groovy DSL inside the JAR with
a stub. Then it is parsed on the consumer side and proper stubbed routes are created.</simpara>
<simpara>For more information, see
<link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html/#stub-runner-for-messaging">the
Stub Runner Messaging sections</link>.</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
		&lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;
	&lt;/dependency&gt;

	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
		&lt;artifactId&gt;spring-cloud-starter-contract-stub-runner&lt;/artifactId&gt;
		&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
		&lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;
		&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;dependencyManagement&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
			&lt;version&gt;Finchley.BUILD-SNAPSHOT&lt;/version&gt;
			&lt;type&gt;pom&lt;/type&gt;
			&lt;scope&gt;import&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">ext {
	contractsDir = file("mappings")
	stubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
}

// Automatically added by plugin:
// copyContracts - copies contracts to the output folder from which JAR will be created
// verifierStubsJar - JAR with a provided stub suffix
// the presented publication is also added by the plugin but you can modify it as you wish

publishing {
	publications {
		stubs(MavenPublication) {
			artifactId "${project.name}-stubs"
			artifact verifierStubsJar
		}
	}
}</programlisting>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="_spring_cloud_contract_stub_runner">
<title>Spring Cloud Contract Stub Runner</title>
<simpara>One of the issues that you might encounter while using Spring Cloud Contract Verifier is
passing the generated WireMock JSON stubs from the server side to the client side (or to
various clients). The same takes place in terms of client-side generation for messaging.</simpara>
<simpara>Copying the JSON files and setting the client side for messaging manually is out of the
question. That is why we introduced Spring Cloud Contract Stub Runner. It can
automatically download and run the stubs for you.</simpara>
<section xml:id="_snapshot_versions">
<title>Snapshot versions</title>
<simpara>Add the additional snapshot repository to your <literal>build.gradle</literal> file to use snapshot
versions, which are automatically uploaded after every successful build:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;repositories&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
	&lt;repository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/repository&gt;
&lt;/repositories&gt;
&lt;pluginRepositories&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-snapshots&lt;/id&gt;
		&lt;name&gt;Spring Snapshots&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;true&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-milestones&lt;/id&gt;
		&lt;name&gt;Spring Milestones&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
	&lt;pluginRepository&gt;
		&lt;id&gt;spring-releases&lt;/id&gt;
		&lt;name&gt;Spring Releases&lt;/name&gt;
		&lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
		&lt;snapshots&gt;
			&lt;enabled&gt;false&lt;/enabled&gt;
		&lt;/snapshots&gt;
	&lt;/pluginRepository&gt;
&lt;/pluginRepositories&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_publishing_stubs_as_jars">
<title>Publishing Stubs as JARs</title>
<simpara>The easiest approach would be to centralize the way stubs are kept. For example, you can
keep them as jars in a Maven repository.</simpara>
<tip>
<simpara>For both Maven and Gradle, the setup comes ready to work. However, you can customize
it if you want to.</simpara>
</tip>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- First disable the default jar setup in the properties section --&gt;
&lt;!-- we don't want the verifier to do a jar for us --&gt;
&lt;spring.cloud.contract.verifier.skip&gt;true&lt;/spring.cloud.contract.verifier.skip&gt;

&lt;!-- Next add the assembly plugin to your build --&gt;
&lt;!-- we want the assembly plugin to generate the JAR --&gt;
&lt;plugin&gt;
	&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
	&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
	&lt;executions&gt;
		&lt;execution&gt;
			&lt;id&gt;stub&lt;/id&gt;
			&lt;phase&gt;prepare-package&lt;/phase&gt;
			&lt;goals&gt;
				&lt;goal&gt;single&lt;/goal&gt;
			&lt;/goals&gt;
			&lt;inherited&gt;false&lt;/inherited&gt;
			&lt;configuration&gt;
				&lt;attach&gt;true&lt;/attach&gt;
				&lt;descriptors&gt;
					$../../../../src/assembly/stub.xml
				&lt;/descriptors&gt;
			&lt;/configuration&gt;
		&lt;/execution&gt;
	&lt;/executions&gt;
&lt;/plugin&gt;

&lt;!-- Finally setup your assembly. Below you can find the contents of src/main/assembly/stub.xml --&gt;
&lt;assembly
	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
	&lt;id&gt;stubs&lt;/id&gt;
	&lt;formats&gt;
		&lt;format&gt;jar&lt;/format&gt;
	&lt;/formats&gt;
	&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
	&lt;fileSets&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;src/main/java&lt;/directory&gt;
			&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**com/example/model/*.*&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;${project.build.directory}/classes&lt;/directory&gt;
			&lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**com/example/model/*.*&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;${project.build.directory}/snippets/stubs&lt;/directory&gt;
			&lt;outputDirectory&gt;META-INF/${project.groupId}/${project.artifactId}/${project.version}/mappings&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**/*&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;$../../../../src/test/resources/contracts&lt;/directory&gt;
			&lt;outputDirectory&gt;META-INF/${project.groupId}/${project.artifactId}/${project.version}/contracts&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**/*.groovy&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
	&lt;/fileSets&gt;
&lt;/assembly&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">ext {
	contractsDir = file("mappings")
	stubsOutputDirRoot = file("${project.buildDir}/production/${project.name}-stubs/")
}

// Automatically added by plugin:
// copyContracts - copies contracts to the output folder from which JAR will be created
// verifierStubsJar - JAR with a provided stub suffix
// the presented publication is also added by the plugin but you can modify it as you wish

publishing {
	publications {
		stubs(MavenPublication) {
			artifactId "${project.name}-stubs"
			artifact verifierStubsJar
		}
	}
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_stub_runner_core">
<title>Stub Runner Core</title>
<simpara>Runs stubs for service collaborators. Treating stubs as contracts of services allows to use stub-runner as an implementation of
<link xl:href="https://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</link>.</simpara>
<simpara>Stub Runner allows you to automatically download the stubs of the provided dependencies (or pick those from the classpath), start WireMock servers for them and feed them with proper stub definitions.
For messaging, special stub routes are defined.</simpara>
<section xml:id="_retrieving_stubs">
<title>Retrieving stubs</title>
<simpara>You can pick the following options of acquiring stubs</simpara>
<itemizedlist>
<listitem>
<simpara>Aether based solution that downloads JARs with stubs from Artifactory / Nexus</simpara>
</listitem>
<listitem>
<simpara>Classpath scanning solution that searches classpath via pattern to retrieve stubs</simpara>
</listitem>
<listitem>
<simpara>Write your own implementation of the <literal>org.springframework.cloud.contract.stubrunner.StubDownloaderBuilder</literal> for full customization</simpara>
</listitem>
</itemizedlist>
<simpara>The latter example is described in the <link linkend="custom_stub_runner">Custom Stub Runner</link> section.</simpara>
<section xml:id="_stub_downloading">
<title>Stub downloading</title>
<simpara>You can control the stub downloading via the <literal>stubsMode</literal> switch. It picks value from the
<literal>StubRunnerProperties.StubsMode</literal> enum. You can use the following options</simpara>
<itemizedlist>
<listitem>
<simpara><literal>StubRunnerProperties.StubsMode.CLASSPATH</literal> (default value) - will pick stubs from the classpath</simpara>
</listitem>
<listitem>
<simpara><literal>StubRunnerProperties.StubsMode.LOCAL</literal> - will pick stubs from a local storage (e.g. <literal>.m2</literal>)</simpara>
</listitem>
<listitem>
<simpara><literal>StubRunnerProperties.StubsMode.REMOTE</literal> - will pick stubs from a remote location</simpara>
</listitem>
</itemizedlist>
<simpara>Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(repositoryRoot="https://foo.bar", ids = "com.example:beer-api-producer:+:stubs:8095", stubsMode = StubRunnerProperties.StubsMode.LOCAL)</programlisting>
</section>
<section xml:id="_classpath_scanning">
<title>Classpath scanning</title>
<simpara>If you set the <literal>stubsMode</literal> property to <literal>StubRunnerProperties.StubsMode.CLASSPATH</literal>
(or set nothing since <literal>CLASSPATH</literal> is the default value) then classpath will get scanned.
Let&#8217;s look at the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids = {
    "com.example:beer-api-producer:+:stubs:8095",
    "com.example.foo:bar:1.0.0:superstubs:8096"
})</programlisting>
<simpara>If you&#8217;ve added the dependencies to your classpath</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;beer-api-producer-restdocs&lt;/artifactId&gt;
    &lt;classifier&gt;stubs&lt;/classifier&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;*&lt;/groupId&gt;
            &lt;artifactId&gt;*&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.example.foo&lt;/groupId&gt;
    &lt;artifactId&gt;bar&lt;/artifactId&gt;
    &lt;classifier&gt;superstubs&lt;/classifier&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;*&lt;/groupId&gt;
            &lt;artifactId&gt;*&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile("com.example:beer-api-producer-restdocs:0.0.1-SNAPSHOT:stubs") {
    transitive = false
}
testCompile("com.example.foo:bar:1.0.0:superstubs") {
    transitive = false
}</programlisting>
</para>
</formalpara>
<simpara>Then the following locations on your classpath will get scanned. For <literal>com.example:beer-api-producer-restdocs</literal></simpara>
<itemizedlist>
<listitem>
<simpara>/META-INF/com.example/beer-api-producer-restdocs/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
<listitem>
<simpara>/contracts/com.example/beer-api-producer-restdocs/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
<listitem>
<simpara>/mappings/com.example/beer-api-producer-restdocs/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
</itemizedlist>
<simpara>and <literal>com.example.foo:bar</literal></simpara>
<itemizedlist>
<listitem>
<simpara>/META-INF/com.example.foo/bar/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
<listitem>
<simpara>/contracts/com.example.foo/bar/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
<listitem>
<simpara>/mappings/com.example.foo/bar/<emphasis role="strong">*/</emphasis>.*</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>As you can see you have to explicitly provide the group and artifact ids when packaging the
producer stubs.</simpara>
</tip>
<simpara>The producer would setup the contracts like this:</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── src
    └── test
        └── resources
            └── contracts
                └── com.example
                    └── beer-api-producer-restdocs
                        └── nested
                            └── contract3.groovy</programlisting>
<simpara>To achieve proper stub packaging.</simpara>
<simpara>Or using the <link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/blob/2.0.x/producer_with_restdocs/pom.xml">Maven <literal>assembly</literal> plugin</link> or
<link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/blob/2.0.x/producer_with_restdocs/build.gradle">Gradle Jar</link> task you have to create the following
structure in your stubs jar.</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── META-INF
    └── com.example
        └── beer-api-producer-restdocs
            └── 2.0.0
                ├── contracts
                │   └── nested
                │       └── contract2.groovy
                └── mappings
                    └── mapping.json</programlisting>
<simpara>By maintaining this structure classpath gets scanned and you can profit from the messaging /
HTTP stubs without the need to download artifacts.</simpara>
</section>
</section>
<section xml:id="_running_stubs">
<title>Running stubs</title>
<section xml:id="_limitations">
<title>Limitations</title>
<important>
<simpara>There might be a problem with StubRunner shutting down ports between tests. You might
 have a situation in which you get port conflicts. As long as you use the same context across tests
 everything works fine. But when the context are different (e.g. different stubs or different profiles)
 then you have to either use <literal>@DirtiesContext</literal> to shut down the stub servers, or else run them on
 different ports per test.</simpara>
</important>
</section>
<section xml:id="_running_using_main_app">
<title>Running using main app</title>
<simpara>You can set the following options to the main class:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">-c, --classifier                Suffix for the jar containing stubs (e.
                                  g. 'stubs' if the stub jar would
                                  have a 'stubs' classifier for stubs:
                                  foobar-stubs ). Defaults to 'stubs'
                                  (default: stubs)
--maxPort, --maxp &lt;Integer&gt;     Maximum port value to be assigned to
                                  the WireMock instance. Defaults to
                                  15000 (default: 15000)
--minPort, --minp &lt;Integer&gt;     Minimum port value to be assigned to
                                  the WireMock instance. Defaults to
                                  10000 (default: 10000)
-p, --password                  Password to user when connecting to
                                  repository
--phost, --proxyHost            Proxy host to use for repository
                                  requests
--pport, --proxyPort [Integer]  Proxy port to use for repository
                                  requests
-r, --root                      Location of a Jar containing server
                                  where you keep your stubs (e.g. http:
                                  //nexus.
                                  net/content/repositories/repository)
-s, --stubs                     Comma separated list of Ivy
                                  representation of jars with stubs.
                                  Eg. groupid:artifactid1,groupid2:
                                  artifactid2:classifier
--sm, --stubsMode               Stubs mode to be used. Acceptable values
                                  [CLASSPATH, LOCAL, REMOTE]
-u, --username                  Username to user when connecting to
                                  repository</programlisting>
</section>
<section xml:id="_http_stubs">
<title>HTTP Stubs</title>
<simpara>Stubs are defined in JSON documents, whose syntax is defined in <link xl:href="http://wiremock.org/stubbing.html">WireMock documentation</link></simpara>
<simpara>Example:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
    "request": {
        "method": "GET",
        "url": "/ping"
    },
    "response": {
        "status": 200,
        "body": "pong",
        "headers": {
            "Content-Type": "text/plain"
        }
    }
}</programlisting>
</section>
<section xml:id="_viewing_registered_mappings">
<title>Viewing registered mappings</title>
<simpara>Every stubbed collaborator exposes list of defined mappings under <literal>__/admin/</literal> endpoint.</simpara>
<simpara>You can also use the <literal>mappingsOutputFolder</literal> property to dump the mappings to files.
 For annotation based approach it would look like this</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureStubRunner(ids="a.b.c:loanIssuance,a.b.c:fraudDetectionServer",
mappingsOutputFolder = "target/outputmappings/")</programlisting>
<simpara>and for the JUnit approach like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">@ClassRule @Shared StubRunnerRule rule = new StubRunnerRule()
			.repoRoot("http://some_url")
			.downloadStub("a.b.c", "loanIssuance")
			.downloadStub("a.b.c:fraudDetectionServer")
			.withMappingsOutputFolder("target/outputmappings")</programlisting>
<simpara>Then if you check out the folder <literal>target/outputmappings</literal> you would see the following structure</simpara>
<programlisting language="bash" linenumbering="unnumbered">.
├── fraudDetectionServer_13705
└── loanIssuance_12255</programlisting>
<simpara>That means that there were two stubs registered. <literal>fraudDetectionServer</literal> was registered at port <literal>13705</literal>
and <literal>loanIssuance</literal> at port <literal>12255</literal>. If we take a look at one of the files we would see (for WireMock)
mappings available for the given server:</simpara>
<programlisting language="json" linenumbering="unnumbered">[{
  "id" : "f9152eb9-bf77-4c38-8289-90be7d10d0d7",
  "request" : {
    "url" : "/name",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "fraudDetectionServer"
  },
  "uuid" : "f9152eb9-bf77-4c38-8289-90be7d10d0d7"
},
...
]</programlisting>
</section>
<section xml:id="_messaging_stubs">
<title>Messaging Stubs</title>
<simpara>Depending on the provided Stub Runner dependency and the DSL the messaging routes are automatically set up.</simpara>
</section>
</section>
</section>
<section xml:id="_stub_runner_junit_rule">
<title>Stub Runner JUnit Rule</title>
<simpara>Stub Runner comes with a JUnit rule thanks to which you can very easily download and run stubs for given group and artifact id:</simpara>
<programlisting language="java" linenumbering="unnumbered">@ClassRule public static StubRunnerRule rule = new StubRunnerRule()
		.repoRoot(repoRoot())
		.downloadStub("org.springframework.cloud.contract.verifier.stubs", "loanIssuance")
		.downloadStub("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer");</programlisting>
<simpara>After that rule gets executed Stub Runner connects to your Maven repository and for the given list of dependencies tries to:</simpara>
<itemizedlist>
<listitem>
<simpara>download them</simpara>
</listitem>
<listitem>
<simpara>cache them locally</simpara>
</listitem>
<listitem>
<simpara>unzip them to a temporary folder</simpara>
</listitem>
<listitem>
<simpara>start a WireMock server for each Maven dependency on a random port from the provided range of ports / provided port</simpara>
</listitem>
<listitem>
<simpara>feed the WireMock server with all JSON files that are valid WireMock definitions</simpara>
</listitem>
<listitem>
<simpara>can also send messages (remember to pass an implementation of <literal>MessageVerifier</literal> interface)</simpara>
</listitem>
</itemizedlist>
<simpara>Stub Runner uses <link xl:href="https://wiki.eclipse.org/Aether">Eclipse Aether</link> mechanism to download the Maven dependencies.
Check their <link xl:href="https://wiki.eclipse.org/Aether">docs</link> for more information.</simpara>
<simpara>Since the <literal>StubRunnerRule</literal> implements the <literal>StubFinder</literal> it allows you to find the started stubs:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.stubrunner;

import java.net.URL;
import java.util.Collection;
import java.util.Map;

import org.springframework.cloud.contract.spec.Contract;

public interface StubFinder extends StubTrigger {
	/**
	 * For the given groupId and artifactId tries to find the matching
	 * URL of the running stub.
	 *
	 * @param groupId - might be null. In that case a search only via artifactId takes place
	 * @return URL of a running stub or throws exception if not found
	 */
	URL findStubUrl(String groupId, String artifactId) throws StubNotFoundException;

	/**
	 * For the given Ivy notation {@code [groupId]:artifactId:[version]:[classifier]} tries to
	 * find the matching URL of the running stub. You can also pass only {@code artifactId}.
	 *
	 * @param ivyNotation - Ivy representation of the Maven artifact
	 * @return URL of a running stub or throws exception if not found
	 */
	URL findStubUrl(String ivyNotation) throws StubNotFoundException;

	/**
	 * Returns all running stubs
	 */
	RunningStubs findAllRunningStubs();

	/**
	 * Returns the list of Contracts
	 */
	Map&lt;StubConfiguration, Collection&lt;Contract&gt;&gt; getContracts();
}</programlisting>
<simpara>Example of usage in Spock tests:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ClassRule @Shared StubRunnerRule rule = new StubRunnerRule()
		.stubsMode(StubRunnerProperties.StubsMode.REMOTE)
		.repoRoot(StubRunnerRuleSpec.getResource("/m2repo/repository").toURI().toString())
		.downloadStub("org.springframework.cloud.contract.verifier.stubs", "loanIssuance")
		.downloadStub("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer")
		.withMappingsOutputFolder("target/outputmappingsforrule")


def 'should start WireMock servers'() {
	expect: 'WireMocks are running'
		rule.findStubUrl('org.springframework.cloud.contract.verifier.stubs', 'loanIssuance') != null
		rule.findStubUrl('loanIssuance') != null
		rule.findStubUrl('loanIssuance') == rule.findStubUrl('org.springframework.cloud.contract.verifier.stubs', 'loanIssuance')
		rule.findStubUrl('org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer') != null
	and:
		rule.findAllRunningStubs().isPresent('loanIssuance')
		rule.findAllRunningStubs().isPresent('org.springframework.cloud.contract.verifier.stubs', 'fraudDetectionServer')
		rule.findAllRunningStubs().isPresent('org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer')
	and: 'Stubs were registered'
		"${rule.findStubUrl('loanIssuance').toString()}/name".toURL().text == 'loanIssuance'
		"${rule.findStubUrl('fraudDetectionServer').toString()}/name".toURL().text == 'fraudDetectionServer'
}

def 'should output mappings to output folder'() {
	when:
		def url = rule.findStubUrl('fraudDetectionServer')
	then:
		new File("target/outputmappingsforrule", "fraudDetectionServer_${url.port}").exists()
}</programlisting>
<simpara>Example of usage in JUnit tests:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void should_start_wiremock_servers() throws Exception {
	// expect: 'WireMocks are running'
		then(rule.findStubUrl("org.springframework.cloud.contract.verifier.stubs", "loanIssuance")).isNotNull();
		then(rule.findStubUrl("loanIssuance")).isNotNull();
		then(rule.findStubUrl("loanIssuance")).isEqualTo(rule.findStubUrl("org.springframework.cloud.contract.verifier.stubs", "loanIssuance"));
		then(rule.findStubUrl("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer")).isNotNull();
	// and:
		then(rule.findAllRunningStubs().isPresent("loanIssuance")).isTrue();
		then(rule.findAllRunningStubs().isPresent("org.springframework.cloud.contract.verifier.stubs", "fraudDetectionServer")).isTrue();
		then(rule.findAllRunningStubs().isPresent("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer")).isTrue();
	// and: 'Stubs were registered'
		then(httpGet(rule.findStubUrl("loanIssuance").toString() + "/name")).isEqualTo("loanIssuance");
		then(httpGet(rule.findStubUrl("fraudDetectionServer").toString() + "/name")).isEqualTo("fraudDetectionServer");
}</programlisting>
<simpara>Check the <emphasis role="strong">Common properties for JUnit and Spring</emphasis> for more information on how to apply global configuration of Stub Runner.</simpara>
<important>
<simpara>To use the JUnit rule together with messaging you have to provide an implementation of the
<literal>MessageVerifier</literal> interface to the rule builder (e.g. <literal>rule.messageVerifier(new MyMessageVerifier())</literal>).
If you don&#8217;t do this then whenever you try to send a message an exception will be thrown.</simpara>
</important>
<section xml:id="_maven_settings">
<title>Maven settings</title>
<simpara>The stub downloader honors Maven settings for a different local repository folder.
Authentication details for repositories and profiles are currently not taken into account, so you need to specify it using the properties mentioned above.</simpara>
</section>
<section xml:id="_providing_fixed_ports">
<title>Providing fixed ports</title>
<simpara>You can also run your stubs on fixed ports. You can do it in two different ways. One is to pass it in the properties, and the other via fluent API of
JUnit rule.</simpara>
</section>
<section xml:id="_fluent_api">
<title>Fluent API</title>
<simpara>When using the <literal>StubRunnerRule</literal> you can add a stub to download and then pass the port for the last downloaded stub.</simpara>
<programlisting language="java" linenumbering="unnumbered">@ClassRule public static StubRunnerRule rule = new StubRunnerRule()
		.repoRoot(repoRoot())
		.downloadStub("org.springframework.cloud.contract.verifier.stubs", "loanIssuance")
		.withPort(12345)
		.downloadStub("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer:12346");</programlisting>
<simpara>You can see that for this example the following test is valid:</simpara>
<programlisting language="java" linenumbering="unnumbered">then(rule.findStubUrl("loanIssuance")).isEqualTo(URI.create("http://localhost:12345").toURL());
then(rule.findStubUrl("fraudDetectionServer")).isEqualTo(URI.create("http://localhost:12346").toURL());</programlisting>
</section>
<section xml:id="_stub_runner_with_spring">
<title>Stub Runner with Spring</title>
<simpara>Sets up Spring configuration of the Stub Runner project.</simpara>
<simpara>By providing a list of stubs inside your configuration file the Stub Runner automatically downloads
and registers in WireMock the selected stubs.</simpara>
<simpara>If you want to find the URL of your stubbed dependency you can autowire the <literal>StubFinder</literal> interface and use
its methods as presented below:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ContextConfiguration(classes = Config, loader = SpringBootContextLoader)
@SpringBootTest(properties = [" stubrunner.cloud.enabled=false",
		'foo=${stubrunner.runningstubs.fraudDetectionServer.port}',
		'fooWithGroup=${stubrunner.runningstubs.org.springframework.cloud.contract.verifier.stubs.fraudDetectionServer.port}'])
@AutoConfigureStubRunner(mappingsOutputFolder = "target/outputmappings/")
@DirtiesContext
@ActiveProfiles("test")
class StubRunnerConfigurationSpec extends Specification {

	@Autowired StubFinder stubFinder
	@Autowired Environment environment
	@StubRunnerPort("fraudDetectionServer") int fraudDetectionServerPort
	@StubRunnerPort("org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer") int fraudDetectionServerPortWithGroupId
	@Value('${foo}') Integer foo

	@BeforeClass
	@AfterClass
	void setupProps() {
		System.clearProperty("stubrunner.repository.root")
		System.clearProperty("stubrunner.classifier")
	}

	def 'should start WireMock servers'() {
		expect: 'WireMocks are running'
			stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs', 'loanIssuance') != null
			stubFinder.findStubUrl('loanIssuance') != null
			stubFinder.findStubUrl('loanIssuance') == stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs', 'loanIssuance')
			stubFinder.findStubUrl('loanIssuance') == stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs:loanIssuance')
			stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs:loanIssuance:0.0.1-SNAPSHOT') == stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs:loanIssuance:0.0.1-SNAPSHOT:stubs')
			stubFinder.findStubUrl('org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer') != null
		and:
			stubFinder.findAllRunningStubs().isPresent('loanIssuance')
			stubFinder.findAllRunningStubs().isPresent('org.springframework.cloud.contract.verifier.stubs', 'fraudDetectionServer')
			stubFinder.findAllRunningStubs().isPresent('org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer')
		and: 'Stubs were registered'
			"${stubFinder.findStubUrl('loanIssuance').toString()}/name".toURL().text == 'loanIssuance'
			"${stubFinder.findStubUrl('fraudDetectionServer').toString()}/name".toURL().text == 'fraudDetectionServer'
	}

	def 'should throw an exception when stub is not found'() {
		when:
			stubFinder.findStubUrl('nonExistingService')
		then:
			thrown(StubNotFoundException)
		when:
			stubFinder.findStubUrl('nonExistingGroupId', 'nonExistingArtifactId')
		then:
			thrown(StubNotFoundException)
	}

	def 'should register started servers as environment variables'() {
		expect:
			environment.getProperty("stubrunner.runningstubs.loanIssuance.port") != null
			stubFinder.findAllRunningStubs().getPort("loanIssuance") == (environment.getProperty("stubrunner.runningstubs.loanIssuance.port") as Integer)
		and:
			environment.getProperty("stubrunner.runningstubs.fraudDetectionServer.port") != null
			stubFinder.findAllRunningStubs().getPort("fraudDetectionServer") == (environment.getProperty("stubrunner.runningstubs.fraudDetectionServer.port") as Integer)
		and:
			environment.getProperty("stubrunner.runningstubs.fraudDetectionServer.port") != null
			stubFinder.findAllRunningStubs().getPort("fraudDetectionServer") == (environment.getProperty("stubrunner.runningstubs.org.springframework.cloud.contract.verifier.stubs.fraudDetectionServer.port") as Integer)
	}

	def 'should be able to interpolate a running stub in the passed test property'() {
		given:
			int fraudPort = stubFinder.findAllRunningStubs().getPort("fraudDetectionServer")
		expect:
			fraudPort &gt; 0
			environment.getProperty("foo", Integer) == fraudPort
			environment.getProperty("fooWithGroup", Integer) == fraudPort
			foo == fraudPort
	}

	@Issue("#573")
	def 'should be able to retrieve the port of a running stub via an annotation'() {
		given:
			int fraudPort = stubFinder.findAllRunningStubs().getPort("fraudDetectionServer")
		expect:
			fraudPort &gt; 0
			fraudDetectionServerPort == fraudPort
			fraudDetectionServerPortWithGroupId == fraudPort
	}

	def 'should dump all mappings to a file'() {
		when:
			def url = stubFinder.findStubUrl("fraudDetectionServer")
		then:
			new File("target/outputmappings/", "fraudDetectionServer_${url.port}").exists()
	}

	@Configuration
	@EnableAutoConfiguration
	static class Config {}
}</programlisting>
<simpara>for the following configuration file:</simpara>
<programlisting language="yml" linenumbering="unnumbered">stubrunner:
  repositoryRoot: classpath:m2repo/repository/
  ids:
    - org.springframework.cloud.contract.verifier.stubs:loanIssuance
    - org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer
    - org.springframework.cloud.contract.verifier.stubs:bootService
  stubs-mode: remote</programlisting>
<simpara>Instead of using the properties you can also use the properties inside the <literal>@AutoConfigureStubRunner</literal>.
Below you can find an example of achieving the same result by setting values on the annotation.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@AutoConfigureStubRunner(
		ids = ["org.springframework.cloud.contract.verifier.stubs:loanIssuance",
		"org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer",
		"org.springframework.cloud.contract.verifier.stubs:bootService"],
		stubsMode = StubRunnerProperties.StubsMode.REMOTE,
		repositoryRoot = "classpath:m2repo/repository/")</programlisting>
<simpara>Stub Runner Spring registers environment variables in the following manner
for every registered WireMock server. Example for Stub Runner ids
 <literal>com.example:foo</literal>, <literal>com.example:bar</literal>.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>stubrunner.runningstubs.foo.port</literal></simpara>
</listitem>
<listitem>
<simpara><literal>stubrunner.runningstubs.com.example.foo.port</literal></simpara>
</listitem>
<listitem>
<simpara><literal>stubrunner.runningstubs.bar.port</literal></simpara>
</listitem>
<listitem>
<simpara><literal>stubrunner.runningstubs.com.example.bar.port</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Which you can reference in your code.</simpara>
<simpara>You can also use the <literal>@StubRunnerPort</literal> annotation to inject the port of a running stub.
Value of the annotation can be the <literal>groupid:artifactid</literal> or just the <literal>artifactid</literal>. Example for Stub Runner ids
<literal>com.example:foo</literal>, <literal>com.example:bar</literal>.</simpara>
<programlisting language="java" linenumbering="unnumbered">@StubRunnerPort("foo")
int fooPort;
@StubRunnerPort("com.example:bar")
int barPort;</programlisting>
</section>
</section>
<section xml:id="_stub_runner_spring_cloud">
<title>Stub Runner Spring Cloud</title>
<simpara>Stub Runner can integrate with Spring Cloud.</simpara>
<simpara>For real life examples you can check the</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/producer">producer app sample</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.0.x/consumer_with_discovery">consumer app sample</link></simpara>
</listitem>
</itemizedlist>
<section xml:id="_stubbing_service_discovery">
<title>Stubbing Service Discovery</title>
<simpara>The most important feature of <literal>Stub Runner Spring Cloud</literal> is the fact that it&#8217;s stubbing</simpara>
<itemizedlist>
<listitem>
<simpara><literal>DiscoveryClient</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Ribbon</literal> <literal>ServerList</literal></simpara>
</listitem>
</itemizedlist>
<simpara>that means that regardless of the fact whether you&#8217;re using Zookeeper, Consul, Eureka or anything else, you don&#8217;t need that in your tests.
We&#8217;re starting WireMock instances of your dependencies and we&#8217;re telling your application whenever you&#8217;re using <literal>Feign</literal>, load balanced <literal>RestTemplate</literal>
or <literal>DiscoveryClient</literal> directly, to call those stubbed servers instead of calling the real Service Discovery tool.</simpara>
<simpara>For example this test will pass</simpara>
<programlisting language="groovy" linenumbering="unnumbered">def 'should make service discovery work'() {
	expect: 'WireMocks are running'
		"${stubFinder.findStubUrl('loanIssuance').toString()}/name".toURL().text == 'loanIssuance'
		"${stubFinder.findStubUrl('fraudDetectionServer').toString()}/name".toURL().text == 'fraudDetectionServer'
	and: 'Stubs can be reached via load service discovery'
		restTemplate.getForObject('http://loanIssuance/name', String) == 'loanIssuance'
		restTemplate.getForObject('http://someNameThatShouldMapFraudDetectionServer/name', String) == 'fraudDetectionServer'
}</programlisting>
<simpara>for the following configuration file</simpara>
<programlisting language="yml" linenumbering="unnumbered">stubrunner:
  idsToServiceIds:
    ivyNotation: someValueInsideYourCode
    fraudDetectionServer: someNameThatShouldMapFraudDetectionServer</programlisting>
<section xml:id="_test_profiles_and_service_discovery">
<title>Test profiles and service discovery</title>
<simpara>In your integration tests you typically don&#8217;t want to call neither a discovery service (e.g. Eureka)
or Config Server. That&#8217;s why you create an additional test configuration in which you want to disable
these features.</simpara>
<simpara>Due to certain limitations of <link xl:href="https://github.com/spring-cloud/spring-cloud-commons/issues/156"><literal>spring-cloud-commons</literal></link> to achieve this you have disable these properties
via a static block like presented below (example for Eureka)</simpara>
<programlisting language="java" linenumbering="unnumbered">    //Hack to work around https://github.com/spring-cloud/spring-cloud-commons/issues/156
    static {
        System.setProperty("eureka.client.enabled", "false");
        System.setProperty("spring.cloud.config.failFast", "false");
    }</programlisting>
</section>
</section>
<section xml:id="_additional_configuration">
<title>Additional Configuration</title>
<simpara>You can match the artifactId of the stub with the name of your app by using the <literal>stubrunner.idsToServiceIds:</literal> map.
You can disable Stub Runner Ribbon support by providing: <literal>stubrunner.cloud.ribbon.enabled</literal> equal to <literal>false</literal>
You can disable Stub Runner support by providing: <literal>stubrunner.cloud.enabled</literal> equal to <literal>false</literal></simpara>
<tip>
<simpara>By default all service discovery will be stubbed. That means that regardless of the fact if you have
an existing <literal>DiscoveryClient</literal> its results will be ignored. However, if you want to reuse it, just set
 <literal>stubrunner.cloud.delegate.enabled</literal> to <literal>true</literal> and then your existing <literal>DiscoveryClient</literal> results will be
 merged with the stubbed ones.</simpara>
</tip>
<simpara>The default Maven configuration used by Stub Runner can be tweaked either
via the following system properties or environment variables</simpara>
<itemizedlist>
<listitem>
<simpara><literal>maven.repo.local</literal> - path to the custom maven local repository location</simpara>
</listitem>
<listitem>
<simpara><literal>org.apache.maven.user-settings</literal> - path to custom maven user settings location</simpara>
</listitem>
<listitem>
<simpara><literal>org.apache.maven.global-settings</literal> - path to maven global settings location</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_stub_runner_boot_application">
<title>Stub Runner Boot Application</title>
<simpara>Spring Cloud Contract Stub Runner Boot is a Spring Boot application that exposes REST endpoints to
trigger the messaging labels and to access started WireMock servers.</simpara>
<simpara>One of the use-cases is to run some smoke (end to end) tests on a deployed application.
You can check out the <link xl:href="https://github.com/spring-cloud/spring-cloud-pipelines">Spring Cloud Pipelines</link>
project for more information.</simpara>
<section xml:id="_how_to_use_it">
<title>How to use it?</title>
<section xml:id="_stub_runner_server">
<title>Stub Runner Server</title>
<simpara>Just add the</simpara>
<programlisting language="groovy" linenumbering="unnumbered">compile "org.springframework.cloud:spring-cloud-starter-stub-runner"</programlisting>
<simpara>Annotate a class with <literal>@EnableStubRunnerServer</literal>, build a fat-jar and you&#8217;re ready to go!</simpara>
<simpara>For the properties check the <emphasis role="strong">Stub Runner Spring</emphasis> section.</simpara>
</section>
<section xml:id="_stub_runner_server_fat_jar">
<title>Stub Runner Server Fat Jar</title>
<simpara>You can download a standalone JAR from Maven (for example, for version 1.2.3.RELEASE), as follows:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ wget -O stub-runner.jar 'https://search.maven.org/remote_content?g=org.springframework.cloud&amp;a=spring-cloud-contract-stub-runner-boot&amp;v=1.2.3.RELEASE'
$ java -jar stub-runner.jar --stubrunner.ids=... --stubrunner.repositoryRoot=...</programlisting>
</section>
<section xml:id="_spring_cloud_cli">
<title>Spring Cloud CLI</title>
<simpara>Starting from <literal>1.4.0.RELEASE</literal> version of the <link xl:href="https://cloud.spring.io/spring-cloud-cli">Spring Cloud CLI</link>
project you can start Stub Runner Boot by executing <literal>spring cloud stubrunner</literal>.</simpara>
<simpara>In order to pass the configuration just create a <literal>stubrunner.yml</literal> file in the current working directory
or a subdirectory called <literal>config</literal> or in <literal>~/.spring-cloud</literal>. The file could look like this
(example for running stubs installed locally)</simpara>
<formalpara>
<title>stubrunner.yml</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">stubrunner:
  stubsMode: LOCAL
  ids:
    - com.example:beer-api-producer:+:9876</programlisting>
</para>
</formalpara>
<simpara>and then just call <literal>spring cloud stubrunner</literal> from your terminal window to start
the Stub Runner server. It will be available at port <literal>8750</literal>.</simpara>
</section>
</section>
<section xml:id="_endpoints_2">
<title>Endpoints</title>
<section xml:id="_http_2">
<title>HTTP</title>
<itemizedlist>
<listitem>
<simpara>GET <literal>/stubs</literal> - returns a list of all running stubs in <literal>ivy:integer</literal> notation</simpara>
</listitem>
<listitem>
<simpara>GET <literal>/stubs/{ivy}</literal> - returns a port for the given <literal>ivy</literal> notation (when calling the endpoint <literal>ivy</literal> can also be <literal>artifactId</literal> only)</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_messaging_2">
<title>Messaging</title>
<simpara>For Messaging</simpara>
<itemizedlist>
<listitem>
<simpara>GET <literal>/triggers</literal> - returns a list of all running labels in <literal>ivy : [ label1, label2 &#8230;&#8203;]</literal> notation</simpara>
</listitem>
<listitem>
<simpara>POST <literal>/triggers/{label}</literal> - executes a trigger with <literal>label</literal></simpara>
</listitem>
<listitem>
<simpara>POST <literal>/triggers/{ivy}/{label}</literal> - executes a trigger with <literal>label</literal> for the given <literal>ivy</literal> notation (when calling the endpoint <literal>ivy</literal> can also be <literal>artifactId</literal> only)</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_example">
<title>Example</title>
<programlisting language="groovy" linenumbering="unnumbered">@ContextConfiguration(classes = StubRunnerBoot, loader = SpringBootContextLoader)
@SpringBootTest(properties = "spring.cloud.zookeeper.enabled=false")
@ActiveProfiles("test")
class StubRunnerBootSpec extends Specification {

	@Autowired StubRunning stubRunning

	def setup() {
		RestAssuredMockMvc.standaloneSetup(new HttpStubsController(stubRunning),
				new TriggerController(stubRunning))
	}

	def 'should return a list of running stub servers in "full ivy:port" notation'() {
		when:
			String response = RestAssuredMockMvc.get('/stubs').body.asString()
		then:
			def root = new JsonSlurper().parseText(response)
			root.'org.springframework.cloud.contract.verifier.stubs:bootService:0.0.1-SNAPSHOT:stubs' instanceof Integer
	}

	def 'should return a port on which a [#stubId] stub is running'() {
		when:
			def response = RestAssuredMockMvc.get("/stubs/${stubId}")
		then:
			response.statusCode == 200
			Integer.valueOf(response.body.asString()) &gt; 0
		where:
			stubId &lt;&lt; ['org.springframework.cloud.contract.verifier.stubs:bootService:+:stubs',
					   'org.springframework.cloud.contract.verifier.stubs:bootService:0.0.1-SNAPSHOT:stubs',
					   'org.springframework.cloud.contract.verifier.stubs:bootService:+',
					   'org.springframework.cloud.contract.verifier.stubs:bootService',
					   'bootService']
	}

	def 'should return 404 when missing stub was called'() {
		when:
			def response = RestAssuredMockMvc.get("/stubs/a:b:c:d")
		then:
			response.statusCode == 404
	}

	def 'should return a list of messaging labels that can be triggered when version and classifier are passed'() {
		when:
			String response = RestAssuredMockMvc.get('/triggers').body.asString()
		then:
			def root = new JsonSlurper().parseText(response)
			root.'org.springframework.cloud.contract.verifier.stubs:bootService:0.0.1-SNAPSHOT:stubs'?.containsAll(["delete_book","return_book_1","return_book_2"])
	}

	def 'should trigger a messaging label'() {
		given:
			StubRunning stubRunning = Mock()
			RestAssuredMockMvc.standaloneSetup(new HttpStubsController(stubRunning), new TriggerController(stubRunning))
		when:
			def response = RestAssuredMockMvc.post("/triggers/delete_book")
		then:
			response.statusCode == 200
		and:
			1 * stubRunning.trigger('delete_book')
	}

	def 'should trigger a messaging label for a stub with [#stubId] ivy notation'() {
		given:
			StubRunning stubRunning = Mock()
			RestAssuredMockMvc.standaloneSetup(new HttpStubsController(stubRunning), new TriggerController(stubRunning))
		when:
			def response = RestAssuredMockMvc.post("/triggers/$stubId/delete_book")
		then:
			response.statusCode == 200
		and:
			1 * stubRunning.trigger(stubId, 'delete_book')
		where:
			stubId &lt;&lt; ['org.springframework.cloud.contract.verifier.stubs:bootService:stubs', 'org.springframework.cloud.contract.verifier.stubs:bootService', 'bootService']
	}

	def 'should throw exception when trigger is missing'() {
		when:
			RestAssuredMockMvc.post("/triggers/missing_label")
		then:
			Exception e = thrown(Exception)
			e.message.contains("Exception occurred while trying to return [missing_label] label.")
			e.message.contains("Available labels are")
			e.message.contains("org.springframework.cloud.contract.verifier.stubs:loanIssuance:0.0.1-SNAPSHOT:stubs=[]")
			e.message.contains("org.springframework.cloud.contract.verifier.stubs:bootService:0.0.1-SNAPSHOT:stubs=")
	}

}</programlisting>
</section>
<section xml:id="_stub_runner_boot_with_service_discovery">
<title>Stub Runner Boot with Service Discovery</title>
<simpara>One of the possibilities of using Stub Runner Boot is to use it as a feed of stubs for "smoke-tests". What does it mean?
 Let&#8217;s assume that you don&#8217;t want to deploy 50 microservice to a test environment in order
 to check if your application is working fine. You&#8217;ve already executed a suite of tests during the build process
 but you would also like to ensure that the packaging of your application is fine. What you can do
 is to deploy your application to an environment, start it and run a couple of tests on it to see if
 it&#8217;s working fine. We can call those tests smoke-tests since their idea is to check only a handful
 of testing scenarios.</simpara>
<simpara>The problem with this approach is such that if you&#8217;re doing microservices most likely you&#8217;re
 using a service discovery tool. Stub Runner Boot allows you to solve this issue by starting the
 required stubs and register them in a service discovery tool. Let&#8217;s take a look at an example of
 such a setup with Eureka. Let&#8217;s assume that Eureka was already running.</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@EnableStubRunnerServer
@EnableEurekaClient
@AutoConfigureStubRunner
public class StubRunnerBootEurekaExample {

	public static void main(String[] args) {
		SpringApplication.run(StubRunnerBootEurekaExample.class, args);
	}

}</programlisting>
<simpara>As you can see we want to start a Stub Runner Boot server <literal>@EnableStubRunnerServer</literal>, enable Eureka client <literal>@EnableEurekaClient</literal>
and we want to have the stub runner feature turned on <literal>@AutoConfigureStubRunner</literal>.</simpara>
<simpara>Now let&#8217;s assume that we want to start this application so that the stubs get automatically registered.
 We can do it by running the app <literal>java -jar ${SYSTEM_PROPS} stub-runner-boot-eureka-example.jar</literal> where
 <literal>${SYSTEM_PROPS}</literal> would contain the following list of properties</simpara>
<programlisting language="bash" linenumbering="unnumbered">-Dstubrunner.repositoryRoot=https://repo.spring.io/snapshots (1)
-Dstubrunner.cloud.stubbed.discovery.enabled=false (2)
-Dstubrunner.ids=org.springframework.cloud.contract.verifier.stubs:loanIssuance,org.springframework.cloud.contract.verifier.stubs:fraudDetectionServer,org.springframework.cloud.contract.verifier.stubs:bootService (3)
-Dstubrunner.idsToServiceIds.fraudDetectionServer=someNameThatShouldMapFraudDetectionServer (4)

(1) - we tell Stub Runner where all the stubs reside
(2) - we don't want the default behaviour where the discovery service is stubbed. That's why the stub registration will be picked
(3) - we provide a list of stubs to download
(4) - we provide a list of artifactId to serviceId mapping</programlisting>
<simpara>That way your deployed application can send requests to started WireMock servers via the service
discovery. Most likely points 1-3 could be set by default in <literal>application.yml</literal> cause they are not
likely to change. That way you can provide only the list of stubs to download whenever you start
the Stub Runner Boot.</simpara>
</section>
</section>
<section xml:id="_stubs_per_consumer">
<title>Stubs Per Consumer</title>
<simpara>There are cases in which 2 consumers of the same endpoint want to have 2 different responses.</simpara>
<tip>
<simpara>This approach also allows you to immediately know which consumer is using which part of your API.
You can remove part of a response that your API produces and you can see which of your autogenerated tests
fails. If none fails then you can safely delete that part of the response cause nobody is using it.</simpara>
</tip>
<simpara>Let&#8217;s look at the following example for contract defined for the producer called <literal>producer</literal>.
There are 2 consumers: <literal>foo-consumer</literal> and <literal>bar-consumer</literal>.</simpara>
<simpara><emphasis role="strong">Consumer <literal>foo-service</literal></emphasis></simpara>
<programlisting language="groovy" linenumbering="unnumbered">request {
   url '/foo'
   method GET()
}
response {
    status OK()
    body(
       foo: "foo"
    }
}</programlisting>
<simpara><emphasis role="strong">Consumer <literal>bar-service</literal></emphasis></simpara>
<programlisting language="groovy" linenumbering="unnumbered">request {
   url '/foo'
   method GET()
}
response {
    status OK()
    body(
       bar: "bar"
    }
}</programlisting>
<simpara>You can&#8217;t produce for the same request 2 different responses. That&#8217;s why you can properly package the
contracts and then profit from the <literal>stubsPerConsumer</literal> feature.</simpara>
<simpara>On the producer side the consumers can have a folder that contains contracts related only to them.
By setting the <literal>stubrunner.stubs-per-consumer</literal> flag to <literal>true</literal> we no longer register all stubs but only those that
correspond to the consumer application&#8217;s name. In other words we&#8217;ll scan the path of every stub and
if it contains the subfolder with name of the consumer in the path only then will it get registered.</simpara>
<simpara>On the <literal>foo</literal> producer side the contracts would look like this</simpara>
<programlisting language="bash" linenumbering="unnumbered">.
└── contracts
    ├── bar-consumer
    │   ├── bookReturnedForBar.groovy
    │   └── shouldCallBar.groovy
    └── foo-consumer
        ├── bookReturnedForFoo.groovy
        └── shouldCallFoo.groovy</programlisting>
<simpara>Being the <literal>bar-consumer</literal> consumer you can either set the <literal>spring.application.name</literal> or the <literal>stubrunner.consumer-name</literal> to <literal>bar-consumer</literal>
Or set the test as follows:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ContextConfiguration(classes = Config, loader = SpringBootContextLoader)
@SpringBootTest(properties = ["spring.application.name=bar-consumer"])
@AutoConfigureStubRunner(ids = "org.springframework.cloud.contract.verifier.stubs:producerWithMultipleConsumers",
		repositoryRoot = "classpath:m2repo/repository/",
		stubsMode = StubRunnerProperties.StubsMode.REMOTE,
		stubsPerConsumer = true)
@DirtiesContext
class StubRunnerStubsPerConsumerSpec extends Specification {
...
}</programlisting>
<simpara>Then only the stubs registered under a path that contains the <literal>bar-consumer</literal> in its name (i.e. those from the
<literal>src/test/resources/contracts/bar-consumer/some/contracts/&#8230;&#8203;</literal> folder) will be allowed to be referenced.</simpara>
<simpara>Or set the consumer name explicitly</simpara>
<programlisting language="groovy" linenumbering="unnumbered">@ContextConfiguration(classes = Config, loader = SpringBootContextLoader)
@SpringBootTest
@AutoConfigureStubRunner(ids = "org.springframework.cloud.contract.verifier.stubs:producerWithMultipleConsumers",
		repositoryRoot = "classpath:m2repo/repository/",
		consumerName = "foo-consumer",
		stubsMode = StubRunnerProperties.StubsMode.REMOTE,
		stubsPerConsumer = true)
@DirtiesContext
class StubRunnerStubsPerConsumerWithConsumerNameSpec extends Specification {
...
}</programlisting>
<simpara>Then only the stubs registered under a path that contains the <literal>foo-consumer</literal> in its name (i.e. those from the
<literal>src/test/resources/contracts/foo-consumer/some/contracts/&#8230;&#8203;</literal> folder) will be allowed to be referenced.</simpara>
<simpara>You can check out <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/issues/224">issue 224</link> for more
information about the reasons behind this change.</simpara>
</section>
<section xml:id="_common">
<title>Common</title>
<simpara>This section briefly describes common properties, including:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="common-properties-junit-spring"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="stub-runner-stub-ids"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="common-properties-junit-spring">
<title>Common Properties for JUnit and Spring</title>
<simpara>You can set repetitive properties by using system properties or Spring configuration
properties. Here are their names with their default values:</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Property name</entry>
<entry align="left" valign="top">Default value</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>stubrunner.minPort</simpara></entry>
<entry align="left" valign="top"><simpara>10000</simpara></entry>
<entry align="left" valign="top"><simpara>Minimum value of a port for a started WireMock with stubs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.maxPort</simpara></entry>
<entry align="left" valign="top"><simpara>15000</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum value of a port for a started WireMock with stubs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.repositoryRoot</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Maven repo URL. If blank, then call the local maven repo.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.classifier</simpara></entry>
<entry align="left" valign="top"><simpara>stubs</simpara></entry>
<entry align="left" valign="top"><simpara>Default classifier for the stub artifacts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.stubsMode</simpara></entry>
<entry align="left" valign="top"><simpara>CLASSPATH</simpara></entry>
<entry align="left" valign="top"><simpara>The way you want to fetch and register the stubs</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.ids</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Array of Ivy notation stubs to download.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Optional username to access the tool that stores the JARs with
stubs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Optional password to access the tool that stores the JARs with
stubs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.stubsPerConsumer</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Set to <literal>true</literal> if you want to use different stubs for
each consumer instead of registering all stubs for every consumer.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.consumerName</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>If you want to use a stub for each consumer and want to
override the consumer name just change this value.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="stub-runner-stub-ids">
<title>Stub Runner Stubs IDs</title>
<simpara>You can provide the stubs to download via the <literal>stubrunner.ids</literal> system property. They
follow this pattern:</simpara>
<programlisting language="java" linenumbering="unnumbered">groupId:artifactId:version:classifier:port</programlisting>
<simpara>Note that <literal>version</literal>, <literal>classifier</literal> and <literal>port</literal> are optional.</simpara>
<itemizedlist>
<listitem>
<simpara>If you do not provide the <literal>port</literal>, a random one will be picked.</simpara>
</listitem>
<listitem>
<simpara>If you do not provide the <literal>classifier</literal>, the default is used. (Note that you can
pass an empty classifier this way: <literal>groupId:artifactId:version:</literal>).</simpara>
</listitem>
<listitem>
<simpara>If you do not provide the <literal>version</literal>, then the <literal>+</literal> will be passed and the latest one is
downloaded.</simpara>
</listitem>
</itemizedlist>
<simpara><literal>port</literal> means the port of the WireMock server.</simpara>
<important>
<simpara>Starting with version 1.0.4, you can provide a range of versions that you
would like the Stub Runner to take into consideration. You can read more about the
<link xl:href="https://wiki.eclipse.org/Aether/New_and_Noteworthy#Version_Ranges">Aether versioning
ranges here</link>.</simpara>
</important>
</section>
</section>
<section xml:id="stubrunner-docker">
<title>Stub Runner Docker</title>
<simpara>We&#8217;re publishing a <literal>spring-cloud/spring-cloud-contract-stub-runner</literal> Docker image
that will start the standalone version of Stub Runner.</simpara>
<simpara>If you want to learn more about the basics of Maven, artifact ids,
group ids, classifiers and Artifact Managers, just click here <xref linkend="docker-project"/>.</simpara>
<section xml:id="_how_to_use_it_2">
<title>How to use it</title>
<simpara>Just execute the docker image. You can pass any of the <xref linkend="common-properties-junit-spring"/>
as environment variables. The convention is that all the
letters should be upper case. The camel case notation should
and the dot (<literal>.</literal>) should be separated via underscore (<literal>_</literal>). E.g.
 the <literal>stubrunner.repositoryRoot</literal> property should be represented
  as a <literal>STUBRUNNER_REPOSITORY_ROOT</literal> environment variable.</simpara>
</section>
<section xml:id="_example_of_client_side_usage_in_a_non_jvm_project">
<title>Example of client side usage in a non JVM project</title>
<simpara>We&#8217;d like to use the stubs created in this <xref linkend="docker-server-side"/> step.
Let&#8217;s assume that we want to run the stubs on port <literal>9876</literal>. The NodeJS code
is available here:</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ git clone https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs
$ cd bookstore</programlisting>
<simpara>Let&#8217;s run the Stub Runner Boot application with the stubs.</simpara>
<programlisting language="bash" linenumbering="unnumbered"># Provide the Spring Cloud Contract Docker version
$ SC_CONTRACT_DOCKER_VERSION="..."
# The IP at which the app is running and Docker container can reach it
$ APP_IP="192.168.0.100"
# Spring Cloud Contract Stub Runner properties
$ STUBRUNNER_PORT="8083"
# Stub coordinates 'groupId:artifactId:version:classifier:port'
$ STUBRUNNER_IDS="com.example:bookstore:0.0.1.RELEASE:stubs:9876"
$ STUBRUNNER_REPOSITORY_ROOT="http://${APP_IP}:8081/artifactory/libs-release-local"
# Run the docker with Stub Runner Boot
$ docker run  --rm -e "STUBRUNNER_IDS=${STUBRUNNER_IDS}" -e "STUBRUNNER_REPOSITORY_ROOT=${STUBRUNNER_REPOSITORY_ROOT}" -e "STUBRUNNER_STUBS_MODE=REMOTE" -p "${STUBRUNNER_PORT}:${STUBRUNNER_PORT}" -p "9876:9876" springcloud/spring-cloud-contract-stub-runner:"${SC_CONTRACT_DOCKER_VERSION}"</programlisting>
<simpara>What&#8217;s happening is that</simpara>
<itemizedlist>
<listitem>
<simpara>a standalone Stub Runner application got started</simpara>
</listitem>
<listitem>
<simpara>it downloaded the stub with coordinates <literal>com.example:bookstore:0.0.1.RELEASE:stubs</literal> on port <literal>9876</literal></simpara>
</listitem>
<listitem>
<simpara>it got downloaded from Artifactory running at <literal><link xl:href="http://192.168.0.100:8081/artifactory/libs-release-local">http://192.168.0.100:8081/artifactory/libs-release-local</link></literal></simpara>
</listitem>
<listitem>
<simpara>after a while Stub Runner will be running on port <literal>8083</literal></simpara>
</listitem>
<listitem>
<simpara>and the stubs will be running at port <literal>9876</literal></simpara>
</listitem>
</itemizedlist>
<simpara>On the server side we built a stateful stub. Let&#8217;s use curl to assert
that the stubs are setup properly.</simpara>
<programlisting language="bash" linenumbering="unnumbered"># let's execute the first request (no response is returned)
$ curl -H "Content-Type:application/json" -X POST --data '{ "title" : "Title", "genre" : "Genre", "description" : "Description", "author" : "Author", "publisher" : "Publisher", "pages" : 100, "image_url" : "https://d213dhlpdb53mu.cloudfront.net/assets/pivotal-square-logo-41418bd391196c3022f3cd9f3959b3f6d7764c47873d858583384e759c7db435.svg", "buy_url" : "https://pivotal.io" }' http://localhost:9876/api/books
# Now time for the second request
$ curl -X GET http://localhost:9876/api/books
# You will receive contents of the JSON</programlisting>
<important>
<simpara>If you want use the stubs that you have built locally, on your host,
then you should pass the environment variable <literal>-e STUBRUNNER_STUBS_MODE=LOCAL</literal> and mount
the volume of your local m2 <literal>-v "${HOME}/.m2/:/root/.m2:ro"</literal></simpara>
</important>
</section>
</section>
</chapter>
<chapter xml:id="_stub_runner_for_messaging">
<title>Stub Runner for Messaging</title>
<simpara>Stub Runner can run the published stubs in memory. It can integrate with the following
frameworks:</simpara>
<itemizedlist>
<listitem>
<simpara>Spring Integration</simpara>
</listitem>
<listitem>
<simpara>Spring Cloud Stream</simpara>
</listitem>
<listitem>
<simpara>Spring AMQP</simpara>
</listitem>
</itemizedlist>
<simpara>It also provides entry points to integrate with any other solution on the market.</simpara>
<important>
<simpara>If you have multiple frameworks on the classpath Stub Runner will need to
define which one should be used. Let&#8217;s assume that you have both AMQP, Spring Cloud Stream and Spring Integration
on the classpath. Then you need to set <literal>stubrunner.stream.enabled=false</literal> and <literal>stubrunner.integration.enabled=false</literal>.
That way the only remaining framework is Spring AMQP.</simpara>
</important>
<section xml:id="_stub_triggering">
<title>Stub triggering</title>
<simpara>To trigger a message, use the <literal>StubTrigger</literal> interface:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.stubrunner;

import java.util.Collection;
import java.util.Map;

public interface StubTrigger {

	/**
	 * Triggers an event by a given label for a given {@code groupid:artifactid} notation. You can use only {@code artifactId} too.
	 *
	 * Feature related to messaging.
	 *
	 * @return true - if managed to run a trigger
	 */
	boolean trigger(String ivyNotation, String labelName);

	/**
	 * Triggers an event by a given label.
	 *
	 * Feature related to messaging.
	 *
	 * @return true - if managed to run a trigger
	 */
	boolean trigger(String labelName);

	/**
	 * Triggers all possible events.
	 *
	 * Feature related to messaging.
	 *
	 * @return true - if managed to run a trigger
	 */
	boolean trigger();

	/**
	 * Returns a mapping of ivy notation of a dependency to all the labels it has.
	 *
	 * Feature related to messaging.
	 */
	Map&lt;String, Collection&lt;String&gt;&gt; labels();
}</programlisting>
<simpara>For convenience, the <literal>StubFinder</literal> interface extends <literal>StubTrigger</literal>, so you only need one
or the other in your tests.</simpara>
<simpara><literal>StubTrigger</literal> gives you the following options to trigger a message:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="trigger-label"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="trigger-group-artifact-ids"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="trigger-artifact-ids"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="trigger-all-messages"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="trigger-label">
<title>Trigger by Label</title>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger('return_book_1')</programlisting>
</section>
<section xml:id="trigger-group-artifact-ids">
<title>Trigger by Group and Artifact Ids</title>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger('org.springframework.cloud.contract.verifier.stubs:streamService', 'return_book_1')</programlisting>
</section>
<section xml:id="trigger-artifact-ids">
<title>Trigger by Artifact Ids</title>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger('streamService', 'return_book_1')</programlisting>
</section>
<section xml:id="trigger-all-messages">
<title>Trigger All Messages</title>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger()</programlisting>
</section>
</section>
<section xml:id="_stub_runner_integration">
<title>Stub Runner Integration</title>
<simpara>Spring Cloud Contract Verifier Stub Runner&#8217;s messaging module gives you an easy way to
integrate with Spring Integration. For the provided artifacts, it automatically downloads
the stubs and registers the required routes.</simpara>
<section xml:id="_adding_the_runner_to_the_project">
<title>Adding the Runner to the Project</title>
<simpara>You can have both Spring Integration and Spring Cloud Contract Stub Runner on the
classpath. Remember to annotate your test class with <literal>@AutoConfigureStubRunner</literal>.</simpara>
</section>
<section xml:id="_disabling_the_functionality">
<title>Disabling the functionality</title>
<simpara>If you need to disable this functionality, set the
<literal>stubrunner.integration.enabled=false</literal> property.</simpara>
<simpara>Assume that you have the following Maven repository with deployed stubs for the
<literal>integrationService</literal> application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── .m2
    └── repository
        └── io
            └── codearte
                └── accurest
                    └── stubs
                        └── integrationService
                            ├── 0.0.1-SNAPSHOT
                            │   ├── integrationService-0.0.1-SNAPSHOT.pom
                            │   ├── integrationService-0.0.1-SNAPSHOT-stubs.jar
                            │   └── maven-metadata-local.xml
                            └── maven-metadata-local.xml</programlisting>
<simpara>Further assume the stubs contain the following structure:</simpara>
<programlisting language="bash" linenumbering="unnumbered">├── META-INF
│   └── MANIFEST.MF
└── repository
    ├── accurest
    │   ├── bookDeleted.groovy
    │   ├── bookReturned1.groovy
    │   └── bookReturned2.groovy
    └── mappings</programlisting>
<simpara>Consider the following contracts (numbered <emphasis role="strong">1</emphasis>):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
	label 'return_book_1'
	input {
		triggeredBy('bookReturnedTriggered()')
	}
	outputMessage {
		sentTo('output')
		body('''{ "bookName" : "foo" }''')
		headers {
			header('BOOK-NAME', 'foo')
		}
	}
}</programlisting>
<simpara>Now consider <emphasis role="strong">2</emphasis>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
	label 'return_book_2'
	input {
		messageFrom('input')
		messageBody([
				bookName: 'foo'
		])
		messageHeaders {
			header('sample', 'header')
		}
	}
	outputMessage {
		sentTo('output')
		body([
				bookName: 'foo'
		])
		headers {
			header('BOOK-NAME', 'foo')
		}
	}
}</programlisting>
<simpara>and the following Spring Integration Route:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans:beans xmlns="http://www.springframework.org/schema/integration"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans
			https://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/integration
			https://www.springframework.org/schema/integration/spring-integration.xsd"&gt;


	&lt;!-- REQUIRED FOR TESTING --&gt;
	&lt;bridge input-channel="output"
			output-channel="outputTest"/&gt;

	&lt;channel id="outputTest"&gt;
		&lt;queue/&gt;
	&lt;/channel&gt;

&lt;/beans:beans&gt;</programlisting>
<simpara>These examples lend themselves to three scenarios:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="integration-scenario-1"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="integration-scenario-2"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="integration-scenario-3"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="integration-scenario-1">
<title>Scenario 1 (no input message)</title>
<simpara>To trigger a message via the <literal>return_book_1</literal> label, use the <literal>StubTigger</literal> interface, as
follows:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger('return_book_1')</programlisting>
<simpara>To listen to the output of the message sent to <literal>output</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Message&lt;?&gt; receivedMessage = messaging.receive('outputTest')</programlisting>
<simpara>The received message would pass the following assertions:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">receivedMessage != null
assertJsons(receivedMessage.payload)
receivedMessage.headers.get('BOOK-NAME') == 'foo'</programlisting>
</section>
<section xml:id="integration-scenario-1">
<title>Scenario 2 (output triggered by input)</title>
<simpara>Since the route is set for you, you can send a message to the <literal>output</literal>
destination:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">messaging.send(new BookReturned('foo'), [sample: 'header'], 'input')</programlisting>
<simpara>To listen to the output of the message sent to <literal>output</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Message&lt;?&gt; receivedMessage = messaging.receive('outputTest')</programlisting>
<simpara>The received message passes the following assertions:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">receivedMessage != null
assertJsons(receivedMessage.payload)
receivedMessage.headers.get('BOOK-NAME') == 'foo'</programlisting>
</section>
<section xml:id="integration-scenario-3">
<title>Scenario 3 (input with no output)</title>
<simpara>Since the route is set for you, you can send a message to the <literal>input</literal> destination:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">messaging.send(new BookReturned('foo'), [sample: 'header'], 'delete')</programlisting>
</section>
</section>
</section>
<section xml:id="_stub_runner_stream">
<title>Stub Runner Stream</title>
<simpara>Spring Cloud Contract Verifier Stub Runner&#8217;s messaging module gives you an easy way to
integrate with Spring Stream. For the provided artifacts, it automatically downloads the
stubs and registers the required routes.</simpara>
<warning>
<simpara>If Stub Runner&#8217;s integration with Stream the <literal>messageFrom</literal> or <literal>sentTo</literal> Strings
are resolved first as a <literal>destination</literal> of a channel and no such <literal>destination</literal> exists, the
destination is resolved as a channel name.</simpara>
</warning>
<important>
<simpara>If you want to use Spring Cloud Stream remember, to add a dependency on
<literal>org.springframework.cloud:spring-cloud-stream-test-support</literal>.</simpara>
</important>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile "org.springframework.cloud:spring-cloud-stream-test-support"</programlisting>
</para>
</formalpara>
<section xml:id="_adding_the_runner_to_the_project_2">
<title>Adding the Runner to the Project</title>
<simpara>You can have both Spring Cloud Stream and Spring Cloud Contract Stub Runner on the
classpath. Remember to annotate your test class with <literal>@AutoConfigureStubRunner</literal>.</simpara>
</section>
<section xml:id="_disabling_the_functionality_2">
<title>Disabling the functionality</title>
<simpara>If you need to disable this functionality, set the <literal>stubrunner.stream.enabled=false</literal>
property.</simpara>
<simpara>Assume that you have the following Maven repository with a deployed stubs for the
<literal>streamService</literal> application:</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── .m2
    └── repository
        └── io
            └── codearte
                └── accurest
                    └── stubs
                        └── streamService
                            ├── 0.0.1-SNAPSHOT
                            │   ├── streamService-0.0.1-SNAPSHOT.pom
                            │   ├── streamService-0.0.1-SNAPSHOT-stubs.jar
                            │   └── maven-metadata-local.xml
                            └── maven-metadata-local.xml</programlisting>
<simpara>Further assume the stubs contain the following structure:</simpara>
<programlisting language="bash" linenumbering="unnumbered">├── META-INF
│   └── MANIFEST.MF
└── repository
    ├── accurest
    │   ├── bookDeleted.groovy
    │   ├── bookReturned1.groovy
    │   └── bookReturned2.groovy
    └── mappings</programlisting>
<simpara>Consider the following contracts (numbered <emphasis role="strong">1</emphasis>):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
	label 'return_book_1'
	input { triggeredBy('bookReturnedTriggered()') }
	outputMessage {
		sentTo('returnBook')
		body('''{ "bookName" : "foo" }''')
		headers { header('BOOK-NAME', 'foo') }
	}
}</programlisting>
<simpara>Now consider <emphasis role="strong">2</emphasis>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
	label 'return_book_2'
	input {
		messageFrom('bookStorage')
		messageBody([
			bookName: 'foo'
		])
		messageHeaders { header('sample', 'header') }
	}
	outputMessage {
		sentTo('returnBook')
		body([
			bookName: 'foo'
		])
		headers { header('BOOK-NAME', 'foo') }
	}
}</programlisting>
<simpara>Now consider the following Spring configuration:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner.repositoryRoot: classpath:m2repo/repository/
stubrunner.ids: org.springframework.cloud.contract.verifier.stubs:streamService:0.0.1-SNAPSHOT:stubs
stubrunner.stubs-mode: remote
spring:
  cloud:
    stream:
      bindings:
        output:
          destination: returnBook
        input:
          destination: bookStorage

server:
  port: 0

debug: true</programlisting>
<simpara>These examples lend themselves to three scenarios:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="stream-scenario-1"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="stream-scenario-2"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="stream-scenario-3"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="stream-scenario-1">
<title>Scenario 1 (no input message)</title>
<simpara>To trigger a message via the <literal>return_book_1</literal> label, use the <literal>StubTrigger</literal> interface as
follows:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">stubFinder.trigger('return_book_1')</programlisting>
<simpara>To listen to the output of the message sent to a channel whose <literal>destination</literal> is
<literal>returnBook</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Message&lt;?&gt; receivedMessage = messaging.receive('returnBook')</programlisting>
<simpara>The received message passes the following assertions:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">receivedMessage != null
assertJsons(receivedMessage.payload)
receivedMessage.headers.get('BOOK-NAME') == 'foo'</programlisting>
</section>
<section xml:id="stream-scenario-2">
<title>Scenario 2 (output triggered by input)</title>
<simpara>Since the route is set for you, you can send a message to the <literal>bookStorage</literal>
<literal>destination</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">messaging.send(new BookReturned('foo'), [sample: 'header'], 'bookStorage')</programlisting>
<simpara>To listen to the output of the message sent to <literal>returnBook</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Message&lt;?&gt; receivedMessage = messaging.receive('returnBook')</programlisting>
<simpara>The received message passes the following assertions:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">receivedMessage != null
assertJsons(receivedMessage.payload)
receivedMessage.headers.get('BOOK-NAME') == 'foo'</programlisting>
</section>
<section xml:id="stream-scenario-3">
<title>Scenario 3 (input with no output)</title>
<simpara>Since the route is set for you, you can send a message to the <literal>output</literal>
destination:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">messaging.send(new BookReturned('foo'), [sample: 'header'], 'delete')</programlisting>
</section>
</section>
</section>
<section xml:id="_stub_runner_spring_amqp">
<title>Stub Runner Spring AMQP</title>
<simpara>Spring Cloud Contract Verifier Stub Runner&#8217;s messaging module provides an easy way to
integrate with Spring AMQP&#8217;s Rabbit Template. For the provided artifacts, it
automatically downloads the stubs and registers the required routes.</simpara>
<simpara>The integration tries to work standalone (that is, without interaction with a running
RabbitMQ message broker). It expects a <literal>RabbitTemplate</literal> on the application context and
uses it as a spring boot test named <literal>@SpyBean</literal>. As a result, it can use the mockito spy
functionality to verify and inspect messages sent by the application.</simpara>
<simpara>On the message consumer side, the stub runner considers all <literal>@RabbitListener</literal> annotated
endpoints and all <literal>SimpleMessageListenerContainer</literal> objects on the application context.</simpara>
<simpara>As messages are usually sent to exchanges in AMQP, the message contract contains the
exchange name as the destination. Message listeners on the other side are bound to
queues. Bindings connect an exchange to a queue. If message contracts are triggered, the
Spring AMQP stub runner integration looks for bindings on the application context that
match this exchange. Then it collects the queues from the Spring exchanges and tries to
find message listeners bound to these queues. The message is triggered for all matching
message listeners.</simpara>
<section xml:id="_adding_the_runner_to_the_project_3">
<title>Adding the Runner to the Project</title>
<simpara>You can have both Spring AMQP and Spring Cloud Contract Stub Runner on the classpath and
set the property <literal>stubrunner.amqp.enabled=true</literal>. Remember to annotate your test class
with <literal>@AutoConfigureStubRunner</literal>.</simpara>
<important>
<simpara>If you already have Stream and Integration on the classpath, you need
to disable them explicitly by setting the  <literal>stubrunner.stream.enabled=false</literal> and
<literal>stubrunner.integration.enabled=false</literal> properties.</simpara>
</important>
<simpara>Assume that you have the following Maven repository with a deployed stubs for the
<literal>spring-cloud-contract-amqp-test</literal> application.</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── .m2
    └── repository
        └── com
            └── example
                └── spring-cloud-contract-amqp-test
                    ├── 0.4.0-SNAPSHOT
                    │   ├── spring-cloud-contract-amqp-test-0.4.0-SNAPSHOT.pom
                    │   ├── spring-cloud-contract-amqp-test-0.4.0-SNAPSHOT-stubs.jar
                    │   └── maven-metadata-local.xml
                    └── maven-metadata-local.xml</programlisting>
<simpara>Further assume that the stubs contain the following structure:</simpara>
<programlisting language="bash" linenumbering="unnumbered">├── META-INF
│   └── MANIFEST.MF
└── contracts
    └── shouldProduceValidPersonData.groovy</programlisting>
<simpara>Consider the following contract:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
    // Human readable description
    description 'Should produce valid person data'
    // Label by means of which the output message can be triggered
    label 'contract-test.person.created.event'
    // input to the contract
    input {
        // the contract will be triggered by a method
        triggeredBy('createPerson()')
    }
    // output message of the contract
    outputMessage {
        // destination to which the output message will be sent
        sentTo 'contract-test.exchange'
        headers {
            header('contentType': 'application/json')
            header('__TypeId__': 'org.springframework.cloud.contract.stubrunner.messaging.amqp.Person')
        }
        // the body of the output message
        body ([
                id: $(consumer(9), producer(regex("[0-9]+"))),
                name: "me"
        ])
    }
}</programlisting>
<simpara>Now consider the following Spring configuration:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner:
  repositoryRoot: classpath:m2repo/repository/
  ids: org.springframework.cloud.contract.verifier.stubs.amqp:spring-cloud-contract-amqp-test:0.4.0-SNAPSHOT:stubs
  stubs-mode: remote
  amqp:
    enabled: true
server:
  port: 0</programlisting>
<section xml:id="_triggering_the_message">
<title>Triggering the message</title>
<simpara>To trigger a message using the contract above, use the <literal>StubTrigger</literal> interface as
follows:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">stubTrigger.trigger("contract-test.person.created.event")</programlisting>
<simpara>The message has a destination of <literal>contract-test.exchange</literal>, so the Spring AMQP stub runner
integration looks for bindings related to this exchange.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public Binding binding() {
	return BindingBuilder.bind(new Queue("test.queue")).to(new DirectExchange("contract-test.exchange")).with("#");
}</programlisting>
<simpara>The binding definition binds the queue <literal>test.queue</literal>. As a result, the following listener
definition is matched and invoked with the contract message.</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public SimpleMessageListenerContainer simpleMessageListenerContainer(ConnectionFactory connectionFactory,
																		MessageListenerAdapter listenerAdapter) {
	SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
	container.setConnectionFactory(connectionFactory);
	container.setQueueNames("test.queue");
	container.setMessageListener(listenerAdapter);

	return container;
}</programlisting>
<simpara>Also, the following annotated listener matches and is invoked:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RabbitListener(bindings = @QueueBinding(
		value = @Queue(value = "test.queue"),
		exchange = @Exchange(value = "contract-test.exchange", ignoreDeclarationExceptions = "true")))
public void handlePerson(Person person) {
	this.person = person;
}</programlisting>
<note>
<simpara>The message is directly handed over to the <literal>onMessage</literal> method of the
<literal>MessageListener</literal> associated with the matching <literal>SimpleMessageListenerContainer</literal>.</simpara>
</note>
</section>
<section xml:id="_spring_amqp_test_configuration">
<title>Spring AMQP Test Configuration</title>
<simpara>In order to avoid Spring AMQP trying to connect to a running broker during our tests
configure a mock <literal>ConnectionFactory</literal>.</simpara>
<simpara>To disable the mocked ConnectionFactory, set the following property:
<literal>stubrunner.amqp.mockConnection=false</literal></simpara>
<programlisting language="yaml" linenumbering="unnumbered">stubrunner:
  amqp:
    mockConnection: false</programlisting>
</section>
</section>
</section>
</chapter>
<chapter xml:id="_contract_dsl">
<title>Contract DSL</title>
<simpara>Spring Cloud Contract supports out of the box 2 types of DSL. One written in
<literal>Groovy</literal> and one written in <literal>YAML</literal>.</simpara>
<simpara>If you decide to write the contract in Groovy, do not be alarmed if you have not used Groovy
before. Knowledge of the language is not really needed, as the Contract DSL uses only a
tiny subset of it (only literals, method calls and closures). Also, the DSL is statically
typed, to make it programmer-readable without any knowledge of the DSL itself.</simpara>
<important>
<simpara>Remember that, inside the Groovy contract file, you have to provide the fully
qualified name to the <literal>Contract</literal> class and <literal>make</literal> static imports, such as
<literal>org.springframework.cloud.spec.Contract.make { &#8230;&#8203; }</literal>. You can also provide an import to
the <literal>Contract</literal> class: <literal>import org.springframework.cloud.spec.Contract</literal> and then call
<literal>Contract.make { &#8230;&#8203; }</literal>.</simpara>
</important>
<tip>
<simpara>Spring Cloud Contract supports defining multiple contracts in a single file.</simpara>
</tip>
<simpara>The following is a complete example of a Groovy contract definition:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'PUT'
		url '/api/12'
		headers {
			header 'Content-Type': 'application/vnd.org.springframework.cloud.contract.verifier.twitter-places-analyzer.v1+json'
		}
		body '''\
		[{
			"created_at": "Sat Jul 26 09:38:57 +0000 2014",
			"id": 492967299297845248,
			"id_str": "492967299297845248",
			"text": "Gonna see you at Warsaw",
			"place":
			{
				"attributes":{},
				"bounding_box":
				{
					"coordinates":
						[[
							[-77.119759,38.791645],
							[-76.909393,38.791645],
							[-76.909393,38.995548],
							[-77.119759,38.995548]
						]],
					"type":"Polygon"
				},
				"country":"United States",
				"country_code":"US",
				"full_name":"Washington, DC",
				"id":"01fbe706f872cb32",
				"name":"Washington",
				"place_type":"city",
				"url": "https://api.twitter.com/1/geo/id/01fbe706f872cb32.json"
			}
		}]
	'''
	}
	response {
		status OK()
	}
}</programlisting>
<simpara>The following is a complete example of a YAML contract definition:</simpara>
<programlisting language="yml" linenumbering="unnumbered">description: Some description
name: some name
priority: 8
ignored: true
request:
  url: /foo
  queryParameters:
    a: b
    b: c
  method: PUT
  headers:
    foo: bar
    fooReq: baz
  body:
    foo: bar
  matchers:
    body:
      - path: $.foo
        type: by_regex
        value: bar
    headers:
      - key: foo
        regex: bar
response:
  status: 200
  headers:
    foo2: bar
    foo3: foo33
    fooRes: baz
  body:
    foo2: bar
    foo3: baz
    nullValue: null
  matchers:
    body:
      - path: $.foo2
        type: by_regex
        value: bar
      - path: $.foo3
        type: by_command
        value: executeMe($it)
      - path: $.nullValue
        type: by_null
        value: null
    headers:
      - key: foo2
        regex: bar
      - key: foo3
        command: andMeToo($it)</programlisting>
<tip>
<simpara>You can compile contracts to stubs mapping using standalone maven command:
<literal>mvn org.springframework.cloud:spring-cloud-contract-maven-plugin:convert</literal></simpara>
</tip>
<section xml:id="_limitations_2">
<title>Limitations</title>
<warning>
<simpara>Spring Cloud Contract Verifier does not properly support XML. Please use JSON or
help us implement this feature.</simpara>
</warning>
<warning>
<simpara>The support for verifying the size of JSON arrays is experimental. If you want
to turn it on, please set the value of the following system property to <literal>true</literal>:
<literal>spring.cloud.contract.verifier.assert.size</literal>. By default, this feature is set to <literal>false</literal>.
You can also provide the <literal>assertJsonSize</literal> property in the plugin configuration.</simpara>
</warning>
<warning>
<simpara>Because JSON structure can have any form, it can be impossible to parse it
properly when using the Groovy DSL and the <literal>value(consumer(&#8230;&#8203;), producer(&#8230;&#8203;))</literal> notation in <literal>GString</literal>. That
is why you should use the Groovy Map notation.</simpara>
</warning>
</section>
<section xml:id="_common_top_level_elements">
<title>Common Top-Level elements</title>
<simpara>The following sections describe the most common top-level elements:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="contract-dsl-description"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-name"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-ignoring-contracts"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-passing-values-from-files"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-http-top-level-elements"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="contract-dsl-description">
<title>Description</title>
<simpara>You can add a <literal>description</literal> to your contract. The description is arbitrary text. The
following code shows an example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">		org.springframework.cloud.contract.spec.Contract.make {
			description('''
given:
	An input
when:
	Sth happens
then:
	Output
''')
		}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">description: Some description
name: some name
priority: 8
ignored: true
request:
  url: /foo
  queryParameters:
    a: b
    b: c
  method: PUT
  headers:
    foo: bar
    fooReq: baz
  body:
    foo: bar
  matchers:
    body:
      - path: $.foo
        type: by_regex
        value: bar
    headers:
      - key: foo
        regex: bar
response:
  status: 200
  headers:
    foo2: bar
    foo3: foo33
    fooRes: baz
  body:
    foo2: bar
    foo3: baz
    nullValue: null
  matchers:
    body:
      - path: $.foo2
        type: by_regex
        value: bar
      - path: $.foo3
        type: by_command
        value: executeMe($it)
      - path: $.nullValue
        type: by_null
        value: null
    headers:
      - key: foo2
        regex: bar
      - key: foo3
        command: andMeToo($it)</programlisting>
</para>
</formalpara>
</section>
<section xml:id="contract-dsl-name">
<title>Name</title>
<simpara>You can provide a name for your contract. Assume that you provided the following name:
<literal>should register a user</literal>. If you do so, the name of the autogenerated test is
<literal>validate_should_register_a_user</literal>. Also, the name of the stub in a WireMock stub is
<literal>should_register_a_user.json</literal>.</simpara>
<important>
<simpara>You must ensure that the name does not contain any characters that make the
generated test not compile. Also, remember that, if you provide the same name for
multiple contracts, your autogenerated tests fail to compile and your generated stubs
override each other.</simpara>
</important>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	name("some_special_name")
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">name: some name</programlisting>
</para>
</formalpara>
</section>
<section xml:id="contract-dsl-ignoring-contracts">
<title>Ignoring Contracts</title>
<simpara>If you want to ignore a contract, you can either set a value of ignored contracts in the
plugin configuration or set the <literal>ignored</literal> property on the contract itself:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	ignored()
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">ignored: true</programlisting>
</para>
</formalpara>
</section>
<section xml:id="contract-dsl-passing-values-from-files">
<title>Passing Values from Files</title>
<simpara>Starting with version <literal>1.2.0</literal>, you can pass values from files. Assume that you have the
following resources in our project.</simpara>
<programlisting language="bash" linenumbering="unnumbered">└── src
    └── test
        └── resources
            └── contracts
                ├── readFromFile.groovy
                ├── request.json
                └── response.json</programlisting>
<simpara>Further assume that your contract is as follows:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import org.springframework.cloud.contract.spec.Contract

Contract.make {
	request {
		method('PUT')
		headers {
			contentType(applicationJson())
		}
		body(file("request.json"))
		url("/1")
	}
	response {
		status OK()
		body(file("response.json"))
		headers {
			contentType(textPlain())
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
  method: GET
  url: /foo
  bodyFromFile: request.json
response:
  status: 200
  bodyFromFile: response.json</programlisting>
</para>
</formalpara>
<simpara>Further assume that the JSON files is as follows:</simpara>
<simpara><emphasis role="strong">request.json</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{ "status" : "REQUEST" }</programlisting>
<simpara><emphasis role="strong">response.json</emphasis></simpara>
<programlisting language="json" linenumbering="unnumbered">{ "status" : "RESPONSE" }</programlisting>
<simpara>When test or stub generation takes place, the contents of the file is passed to the body
of a request or a response. The name of the file needs to be a file with location
relative to the folder in which the contract lays.</simpara>
</section>
<section xml:id="contract-dsl-http-top-level-elements">
<title>HTTP Top-Level Elements</title>
<simpara>The following methods can be called in the top-level closure of a contract definition.
<literal>request</literal> and <literal>response</literal> are mandatory. <literal>priority</literal> is optional.</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	// Definition of HTTP request part of the contract
	// (this can be a valid request or invalid depending
	// on type of contract being specified).
	request {
		//...
	}

	// Definition of HTTP response part of the contract
	// (a service implementing this contract should respond
	// with following response after receiving request
	// specified in "request" part above).
	response {
		//...
	}

	// Contract priority, which can be used for overriding
	// contracts (1 is highest). Priority is optional.
	priority 1
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">priority: 8
request:
...
response:
...</programlisting>
</para>
</formalpara>
<important>
<simpara>If you want to make your contract have a <emphasis role="strong">higher</emphasis> value of priority
you need to pass a <emphasis role="strong">lower</emphasis> number to the <literal>priority</literal> tag / method. E.g. <literal>priority</literal> with
value <literal>5</literal> has <emphasis role="strong">higher</emphasis> priority than <literal>priority</literal> with value <literal>10</literal>.</simpara>
</important>
</section>
</section>
<section xml:id="_request">
<title>Request</title>
<simpara>The HTTP protocol requires only <emphasis role="strong">method and url</emphasis> to be specified in a request. The
same information is mandatory in request definition of the Contract.</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		// HTTP request method (GET/POST/PUT/DELETE).
		method 'GET'

		// Path component of request URL is specified as follows.
		urlPath('/users')
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">method: PUT
url: /foo</programlisting>
</para>
</formalpara>
<simpara>It is possible to specify an absolute rather than relative <literal>url</literal>, but using <literal>urlPath</literal> is
the recommended way, as doing so makes the tests <emphasis role="strong">host-independent</emphasis>.</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'GET'

		// Specifying `url` and `urlPath` in one contract is illegal.
		url('http://localhost:8888/users')
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
  method: PUT
  urlPath: /foo</programlisting>
</para>
</formalpara>
<simpara><literal>request</literal> may contain <emphasis role="strong">query parameters</emphasis>.</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		//...

		urlPath('/users') {

			// Each parameter is specified in form
			// `'paramName' : paramValue` where parameter value
			// may be a simple literal or one of matcher functions,
			// all of which are used in this example.
			queryParameters {

				// If a simple literal is used as value
				// default matcher function is used (equalTo)
				parameter 'limit': 100

				// `equalTo` function simply compares passed value
				// using identity operator (==).
				parameter 'filter': equalTo("email")

				// `containing` function matches strings
				// that contains passed substring.
				parameter 'gender': value(consumer(containing("[mf]")), producer('mf'))

				// `matching` function tests parameter
				// against passed regular expression.
				parameter 'offset': value(consumer(matching("[0-9]+")), producer(123))

				// `notMatching` functions tests if parameter
				// does not match passed regular expression.
				parameter 'loginStartsWith': value(consumer(notMatching(".{0,2}")), producer(3))
			}
		}

		//...
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
...
  queryParameters:
    a: b
    b: c
  headers:
    foo: bar
    fooReq: baz
  cookies:
    foo: bar
    fooReq: baz
  body:
    foo: bar
  matchers:
    body:
      - path: $.foo
        type: by_regex
        value: bar
    headers:
      - key: foo
        regex: bar
response:
  status: 200
  headers:
    foo2: bar
    foo3: foo33
    fooRes: baz
  body:
    foo2: bar
    foo3: baz
    nullValue: null
  matchers:
    body:
      - path: $.foo2
        type: by_regex
        value: bar
      - path: $.foo3
        type: by_command
        value: executeMe($it)
      - path: $.nullValue
        type: by_null
        value: null
    headers:
      - key: foo2
        regex: bar
      - key: foo3
        command: andMeToo($it)
    cookies:
      - key: foo2
        regex: bar
      - key: foo3
        predefined:</programlisting>
</para>
</formalpara>
<simpara><literal>request</literal> may contain additional <emphasis role="strong">request headers</emphasis>, as shown in the following example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		//...

		// Each header is added in form `'Header-Name' : 'Header-Value'`.
		// there are also some helper methods
		headers {
			header 'key': 'value'
			contentType(applicationJson())
		}

		//...
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
...
headers:
  foo: bar
  fooReq: baz</programlisting>
</para>
</formalpara>
<simpara><literal>request</literal> may contain additional <emphasis role="strong">request cookies</emphasis>, as shown in the following example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		//...

		// Each Cookies is added in form `'Cookie-Key' : 'Cookie-Value'`.
		// there are also some helper methods
		cookies {
			cookie 'key': 'value'
			cookie('another_key', 'another_value')
		}

		//...
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
...
cookies:
  foo: bar
  fooReq: baz</programlisting>
</para>
</formalpara>
<simpara><literal>request</literal> may contain a <emphasis role="strong">request body</emphasis>:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		//...

		// Currently only JSON format of request body is supported.
		// Format will be determined from a header or body's content.
		body '''{ "login" : "john", "name": "John The Contract" }'''
	}

	response {
		//...
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
...
body:
  foo: bar</programlisting>
</para>
</formalpara>
<simpara><literal>request</literal> may contain <emphasis role="strong">multipart</emphasis> elements. To include multipart elements, use the
<literal>multipart</literal> method/section, as shown in the following examples</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract contractDsl = org.springframework.cloud.contract.spec.Contract.make {
	request {
		method "PUT"
		url "/multipart"
		headers {
			contentType('multipart/form-data;boundary=AaB03x')
		}
		multipart(
				// key (parameter name), value (parameter value) pair
				formParameter: $(c(regex('".+"')), p('"formParameterValue"')),
				someBooleanParameter: $(c(regex(anyBoolean())), p('true')),
				// a named parameter (e.g. with `file` name) that represents file with
				// `name` and `content`. You can also call `named("fileName", "fileContent")`
				file: named(
						// name of the file
						name: $(c(regex(nonEmpty())), p('filename.csv')),
						// content of the file
						content: $(c(regex(nonEmpty())), p('file content')),
						// content type for the part
						contentType: $(c(regex(nonEmpty())), p('application/json')))
		)
	}
	response {
		status OK()
	}
}
org.springframework.cloud.contract.spec.Contract contractDsl = org.springframework.cloud.contract.spec.Contract.make {
	request {
		method "PUT"
		url "/multipart"
		headers {
			contentType('multipart/form-data;boundary=AaB03x')
		}
		multipart(
				file: named(
						name: value(stub(regex('.+')), test('file')),
						content: value(stub(regex('.+')), test([100, 117, 100, 97] as byte[]))
				)
		)
	}
	response {
		status 200
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
  method: PUT
  url: /multipart
  headers:
    Content-Type: multipart/form-data;boundary=AaB03x
  multipart:
    params:
    # key (parameter name), value (parameter value) pair
      formParameter: '"formParameterValue"'
      someBooleanParameter: true
    named:
      - paramName: file
        fileName: filename.csv
        fileContent: file content
  matchers:
    multipart:
      params:
        - key: formParameter
          regex: ".+"
        - key: someBooleanParameter
          predefined: any_boolean
      named:
        - paramName: file
          fileName:
            predefined: non_empty
          fileContent:
            predefined: non_empty
response:
  status: 200</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, we define parameters in either of two ways:</simpara>
<itemizedlist>
<title>Groovy DSL</title>
<listitem>
<simpara>Directly, by using the map notation, where the value can be a dynamic property (such as
<literal>formParameter: $(consumer(&#8230;&#8203;), producer(&#8230;&#8203;))</literal>).</simpara>
</listitem>
<listitem>
<simpara>By using the <literal>named(&#8230;&#8203;)</literal> method that lets you set a named parameter. A named parameter
can set a <literal>name</literal> and <literal>content</literal>. You can call it either via a method with two  arguments,
such as <literal>named("fileName", "fileContent")</literal>, or via a map notation, such as
<literal>named(name: "fileName", content: "fileContent")</literal>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>YAML</title>
<listitem>
<simpara>The multipart parameters are set via <literal>multipart.params</literal> section</simpara>
</listitem>
<listitem>
<simpara>The named parameters (the <literal>fileName</literal> and <literal>fileContent</literal> for a given parameter name)
can be set via the <literal>multipart.named</literal> section. That section contains
the <literal>paramName</literal> (name of the parameter), <literal>fileName</literal> (name of the file),
<literal>fileContent</literal> (content of the file) fields</simpara>
</listitem>
<listitem>
<simpara>The dynamic bits can be set via the <literal>matchers.multipart</literal> section</simpara>
<itemizedlist>
<listitem>
<simpara>for parameters use the <literal>params</literal> section that can accept
<literal>regex</literal> or a <literal>predefined</literal> regular expression</simpara>
</listitem>
<listitem>
<simpara>for named params use the <literal>named</literal> section where first you
define the parameter name via <literal>paramName</literal> and then you can pass the
parametrization of either <literal>fileName</literal> or <literal>fileContent</literal> via
<literal>regex</literal> or a <literal>predefined</literal> regular expression</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>From this contract, the generated test is as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">// given:
 MockMvcRequestSpecification request = given()
   .header("Content-Type", "multipart/form-data;boundary=AaB03x")
   .param("formParameter", "\"formParameterValue\"")
   .param("someBooleanParameter", "true")
   .multiPart("file", "filename.csv", "file content".getBytes());

// when:
 ResponseOptions response = given().spec(request)
   .put("/multipart");

// then:
 assertThat(response.statusCode()).isEqualTo(200);</programlisting>
<simpara>The WireMock stub is as follows:</simpara>
<programlisting language="json" linenumbering="unnumbered">			'''
{
  "request" : {
	"url" : "/multipart",
	"method" : "PUT",
	"headers" : {
	  "Content-Type" : {
		"matches" : "multipart/form-data;boundary=AaB03x.*"
	  }
	},
	"bodyPatterns" : [ {
		"matches" : ".*--(.*)\\r\\nContent-Disposition: form-data; name=\\"formParameter\\"\\r\\n(Content-Type: .*\\r\\n)?(Content-Transfer-Encoding: .*\\r\\n)?(Content-Length: \\\\d+\\r\\n)?\\r\\n\\".+\\"\\r\\n--\\\\1.*"
  		}, {
    			"matches" : ".*--(.*)\\r\\nContent-Disposition: form-data; name=\\"someBooleanParameter\\"\\r\\n(Content-Type: .*\\r\\n)?(Content-Transfer-Encoding: .*\\r\\n)?(Content-Length: \\\\d+\\r\\n)?\\r\\n(true|false)\\r\\n--\\\\1.*"
  		}, {
	  "matches" : ".*--(.*)\\r\\nContent-Disposition: form-data; name=\\"file\\"; filename=\\"[\\\\S\\\\s]+\\"\\r\\n(Content-Type: .*\\r\\n)?(Content-Transfer-Encoding: .*\\r\\n)?(Content-Length: \\\\d+\\r\\n)?\\r\\n[\\\\S\\\\s]+\\r\\n--\\\\1.*"
	} ]
  },
  "response" : {
	"status" : 200,
	"transformers" : [ "response-template", "foo-transformer" ]
  }
}
	'''</programlisting>
</section>
<section xml:id="_response">
<title>Response</title>
<simpara>The response must contain an <emphasis role="strong">HTTP status code</emphasis> and may contain other information. The
following code shows an example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		//...
	}
	response {
		// Status code sent by the server
		// in response to request specified above.
		status OK()
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">response:
...
status: 200</programlisting>
</para>
</formalpara>
<simpara>Besides status, the response may contain <emphasis role="strong">headers</emphasis>, <emphasis role="strong">cookies</emphasis> and a <emphasis role="strong">body</emphasis>, both of which are
specified the same way as in the request (see the previous paragraph).</simpara>
<tip>
<simpara>Via the Groovy DSL you can reference the <literal>org.springframework.cloud.contract.spec.internal.HttpStatus</literal>
methods to provide a meaningful status instead of a digit. E.g. you can call
<literal>OK()</literal> for a status <literal>200</literal> or <literal>BAD_REQUEST()</literal> for <literal>400</literal>.</simpara>
</tip>
</section>
<section xml:id="_dynamic_properties">
<title>Dynamic properties</title>
<simpara>The contract can contain some dynamic properties: timestamps, IDs, and so on. You do not
want to force the consumers to stub their clocks to always return the same value of time
so that it gets matched by the stub.</simpara>
<simpara>For Groovy DSL you can provide the dynamic parts in your contracts
in two ways: pass them directly in the body or set them in a separate section called
<literal>bodyMatchers</literal>.</simpara>
<note>
<simpara>Before 2.0.0 these were set using <literal>testMatchers</literal> and <literal>stubMatchers</literal>,
check out the <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/wiki/Spring-Cloud-Contract-2.0-Migration-Guide">migration guide</link> for more information.</simpara>
</note>
<simpara>For YAML you can only use the <literal>matchers</literal> section.</simpara>
<section xml:id="_dynamic_properties_inside_the_body">
<title>Dynamic properties inside the body</title>
<important>
<simpara>This section is valid only for Groovy DSL. Check out the
<xref linkend="contract-matchers"/> section for YAML examples of a similar feature.</simpara>
</important>
<simpara>You can set the properties inside the body either with the <literal>value</literal> method or, if you use
the Groovy map notation, with <literal>$()</literal>. The following example shows how to set dynamic
properties with the value method:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">value(consumer(...), producer(...))
value(c(...), p(...))
value(stub(...), test(...))
value(client(...), server(...))</programlisting>
<simpara>The following example shows how to set dynamic properties with <literal>$()</literal>:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">$(consumer(...), producer(...))
$(c(...), p(...))
$(stub(...), test(...))
$(client(...), server(...))</programlisting>
<simpara>Both approaches work equally well. <literal>stub</literal> and <literal>client</literal> methods are aliases over the <literal>consumer</literal>
method. Subsequent sections take a closer look at what you can do with those values.</simpara>
</section>
<section xml:id="_regular_expressions">
<title>Regular expressions</title>
<important>
<simpara>This section is valid only for Groovy DSL. Check out the
<xref linkend="contract-matchers"/> section for YAML examples of a similar feature.</simpara>
</important>
<simpara>You can use regular expressions to write your requests in Contract DSL. Doing so is
particularly useful when you want to indicate that a given response should be provided
for requests that follow a given pattern. Also, you can use regular expressions when you
need to use patterns and not exact values both for your test and your server side tests.</simpara>
<simpara>The following example shows how to use regular expressions to write a request:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method('GET')
		url $(consumer(~/\/[0-9]{2}/), producer('/12'))
	}
	response {
		status OK()
		body(
				id: $(anyNumber()),
				surname: $(
						consumer('Kowalsky'),
						producer(regex('[a-zA-Z]+'))
				),
				name: 'Jan',
				created: $(consumer('2014-02-02 12:23:43'), producer(execute('currentDate(it)'))),
				correlationId: value(consumer('5d1f9fef-e0dc-4f3d-a7e4-72d2220dd827'),
						producer(regex('[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'))
				)
		)
		headers {
			header 'Content-Type': 'text/plain'
		}
	}
}</programlisting>
<simpara>You can also provide only one side of the communication with a regular expression. If you
do so, then the contract engine automatically provides the generated string that matches
the provided regular expression. The following code shows an example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'PUT'
		url value(consumer(regex('/foo/[0-9]{5}')))
		body([
			requestElement: $(consumer(regex('[0-9]{5}')))
		])
		headers {
			header('header', $(consumer(regex('application\\/vnd\\.fraud\\.v1\\+json;.*'))))
		}
	}
	response {
		status OK()
		body([
			responseElement: $(producer(regex('[0-9]{7}')))
		])
		headers {
			contentType("application/vnd.fraud.v1+json")
		}
	}
}</programlisting>
<simpara>In the preceding example, the opposite side of the communication has the respective data
generated for request and response.</simpara>
<simpara>Spring Cloud Contract comes with a series of predefined regular expressions that you can
use in your contracts, as shown in the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">protected static final Pattern TRUE_OR_FALSE = Pattern.compile(/(true|false)/)
protected static final Pattern ALPHA_NUMERIC = Pattern.compile('[a-zA-Z0-9]+')
protected static final Pattern ONLY_ALPHA_UNICODE = Pattern.compile(/[\p{L}]*/)
protected static final Pattern NUMBER = Pattern.compile('-?(\\d*\\.\\d+|\\d+)')
protected static final Pattern INTEGER = Pattern.compile('-?(\\d+)')
protected static final Pattern POSITIVE_INT = Pattern.compile('([1-9]\\d*)')
protected static final Pattern DOUBLE = Pattern.compile('-?(\\d*\\.\\d+)')
protected static final Pattern HEX = Pattern.compile('[a-fA-F0-9]+')
protected static final Pattern IP_ADDRESS = Pattern.compile('([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])')
protected static final Pattern HOSTNAME_PATTERN = Pattern.compile('((http[s]?|ftp):/)/?([^:/\\s]+)(:[0-9]{1,5})?')
protected static final Pattern EMAIL = Pattern.compile('[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}')
protected static final Pattern URL = UrlHelper.URL
protected static final Pattern HTTPS_URL = UrlHelper.HTTPS_URL
protected static final Pattern UUID = Pattern.compile('[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
protected static final Pattern ANY_DATE = Pattern.compile('(\\d\\d\\d\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])')
protected static final Pattern ANY_DATE_TIME = Pattern.compile('([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])')
protected static final Pattern ANY_TIME = Pattern.compile('(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])')
protected static final Pattern NON_EMPTY = Pattern.compile(/[\S\s]+/)
protected static final Pattern NON_BLANK = Pattern.compile(/^\s*\S[\S\s]*/)
protected static final Pattern ISO8601_WITH_OFFSET = Pattern.compile(/([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.\d{3})?(Z|[+-][01]\d:[0-5]\d)/)

protected static Pattern anyOf(String... values){
	return Pattern.compile(values.collect({"^$it\$"}).join("|"))
}

Pattern onlyAlphaUnicode() {
	return ONLY_ALPHA_UNICODE
}

Pattern alphaNumeric() {
	return ALPHA_NUMERIC
}

Pattern number() {
	return NUMBER
}

Pattern positiveInt() {
	return POSITIVE_INT
}

Pattern anyBoolean() {
	return TRUE_OR_FALSE
}

Pattern anInteger() {
	return INTEGER
}

Pattern aDouble() {
	return DOUBLE
}

Pattern ipAddress() {
	return IP_ADDRESS
}

Pattern hostname() {
	return HOSTNAME_PATTERN
}

Pattern email() {
	return EMAIL
}

Pattern url() {
	return URL
}

Pattern httpsUrl() {
	return HTTPS_URL
}

Pattern uuid(){
	return UUID
}

Pattern isoDate() {
	return ANY_DATE
}

Pattern isoDateTime() {
	return ANY_DATE_TIME
}

Pattern isoTime() {
	return ANY_TIME
}

Pattern iso8601WithOffset() {
	return ISO8601_WITH_OFFSET
}

Pattern nonEmpty() {
	return NON_EMPTY
}

Pattern nonBlank() {
	return NON_BLANK
}</programlisting>
<simpara>In your contract, you can use it as shown in the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract dslWithOptionalsInString = Contract.make {
	priority 1
	request {
		method POST()
		url '/users/password'
		headers {
			contentType(applicationJson())
		}
		body(
				email: $(consumer(optional(regex(email()))), producer('abc@abc.com')),
				callback_url: $(consumer(regex(hostname())), producer('http://partners.com'))
		)
	}
	response {
		status 404
		headers {
			contentType(applicationJson())
		}
		body(
				code: value(consumer("123123"), producer(optional("123123"))),
				message: "User not found by email = [${value(producer(regex(email())), consumer('not.existing@user.com'))}]"
		)
	}
}</programlisting>
</section>
<section xml:id="_passing_optional_parameters">
<title>Passing Optional Parameters</title>
<important>
<simpara>This section is valid only for Groovy DSL. Check out the
<xref linkend="contract-matchers"/> section for YAML examples of a similar feature.</simpara>
</important>
<simpara>It is possible to provide optional parameters in your contract. However, you can provide
optional parameters only for the following:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>STUB</emphasis> side of the Request</simpara>
</listitem>
<listitem>
<simpara><emphasis>TEST</emphasis> side of the Response</simpara>
</listitem>
</itemizedlist>
<simpara>The following example shows how to provide optional parameters:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	priority 1
	request {
		method 'POST'
		url '/users/password'
		headers {
			contentType(applicationJson())
		}
		body(
				email: $(consumer(optional(regex(email()))), producer('abc@abc.com')),
				callback_url: $(consumer(regex(hostname())), producer('http://partners.com'))
		)
	}
	response {
		status 404
		headers {
			header 'Content-Type': 'application/json'
		}
		body(
				code: value(consumer("123123"), producer(optional("123123")))
		)
	}
}</programlisting>
<simpara>By wrapping a part of the body with the <literal>optional()</literal> method, you create a regular
expression that must be present 0 or more times.</simpara>
<simpara>If you use Spock for, the following test would be generated from the previous example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">"""
 given:
  def request = given()
    .header("Content-Type", "application/json")
    .body('''{"email":"abc@abc.com","callback_url":"http://partners.com"}''')

 when:
  def response = given().spec(request)
    .post("/users/password")

 then:
  response.statusCode == 404
  response.header('Content-Type')  == 'application/json'
 and:
  DocumentContext parsedJson = JsonPath.parse(response.body.asString())
  assertThatJson(parsedJson).field("['code']").matches("(123123)?")
"""</programlisting>
<simpara>The following stub would also be generated:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
{
  "request" : {
	"url" : "/users/password",
	"method" : "POST",
	"bodyPatterns" : [ {
	  "matchesJsonPath" : "$[?(@.['email'] =~ /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,6})?/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.['callback_url'] =~ /((http[s]?|ftp):\\\\/)\\\\/?([^:\\\\/\\\\s]+)(:[0-9]{1,5})?/)]"
	} ],
	"headers" : {
	  "Content-Type" : {
		"equalTo" : "application/json"
	  }
	}
  },
  "response" : {
	"status" : 404,
	"body" : "{\\"code\\":\\"123123\\",\\"message\\":\\"User not found by email == [not.existing@user.com]\\"}",
	"headers" : {
	  "Content-Type" : "application/json"
	}
  },
  "priority" : 1
}
'''</programlisting>
</section>
<section xml:id="_executing_custom_methods_on_the_server_side">
<title>Executing Custom Methods on the Server Side</title>
<important>
<simpara>This section is valid only for Groovy DSL. Check out the
<xref linkend="contract-matchers"/> section for YAML examples of a similar feature.</simpara>
</important>
<simpara>You can define a method call that executes on the server side during the test. Such a
method can be added to the class defined as "baseClassForTests" in the configuration. The
following code shows an example of the contract portion of the test case:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'PUT'
		url $(consumer(regex('^/api/[0-9]{2}$')), producer('/api/12'))
		headers {
			header 'Content-Type': 'application/json'
		}
		body '''\
				[{
					"text": "Gonna see you at Warsaw"
				}]
			'''
	}
	response {
		body (
				path: $(consumer('/api/12'), producer(regex('^/api/[0-9]{2}$'))),
				correlationId: $(consumer('1223456'), producer(execute('isProperCorrelationId($it)')))
		)
		status OK()
	}
}</programlisting>
<simpara>The following code shows the base class portion of the test case:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">abstract class BaseMockMvcSpec extends Specification {

	def setup() {
		RestAssuredMockMvc.standaloneSetup(new PairIdController())
	}

	void isProperCorrelationId(Integer correlationId) {
		assert correlationId == 123456
	}

	void isEmpty(String value) {
		assert value == null
	}

}</programlisting>
<important>
<simpara>You cannot use both a String and <literal>execute</literal> to perform concatenation. For
example, calling <literal>header('Authorization', 'Bearer ' + execute('authToken()'))</literal> leads to
improper results. Instead, call <literal>header('Authorization', execute('authToken()'))</literal> and
ensure that the <literal>authToken()</literal> method returns everything you need.</simpara>
</important>
<simpara>The type of the object read from the JSON can be one of the following, depending on the
JSON path:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>String</literal>: If you point to a <literal>String</literal> value in the JSON.</simpara>
</listitem>
<listitem>
<simpara><literal>JSONArray</literal>: If you point to a <literal>List</literal> in the JSON.</simpara>
</listitem>
<listitem>
<simpara><literal>Map</literal>: If you point to a <literal>Map</literal> in the JSON.</simpara>
</listitem>
<listitem>
<simpara><literal>Number</literal>: If you point to <literal>Integer</literal>, <literal>Double</literal> etc. in the JSON.</simpara>
</listitem>
<listitem>
<simpara><literal>Boolean</literal>: If you point to a <literal>Boolean</literal> in the JSON.</simpara>
</listitem>
</itemizedlist>
<simpara>In the request part of the contract, you can specify that the <literal>body</literal> should be taken from
a method.</simpara>
<important>
<simpara>You must provide both the consumer and the producer side. The <literal>execute</literal> part
is applied for the whole body - not for parts of it.</simpara>
</important>
<simpara>The following example shows how to read an object from JSON:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract contractDsl = Contract.make {
	request {
		method 'GET'
		url '/something'
		body(
				$(c("foo"), p(execute("hashCode()")))
		)
	}
	response {
		status OK()
	}
}</programlisting>
<simpara>The preceding example results in calling the <literal>hashCode()</literal> method in the request body.
It should resemble the following code:</simpara>
<programlisting language="java" linenumbering="unnumbered">// given:
 MockMvcRequestSpecification request = given()
   .body(hashCode());

// when:
 ResponseOptions response = given().spec(request)
   .get("/something");

// then:
 assertThat(response.statusCode()).isEqualTo(200);</programlisting>
</section>
<section xml:id="_referencing_the_request_from_the_response">
<title>Referencing the Request from the Response</title>
<simpara>The best situation is to provide fixed values, but sometimes you need to reference a
request in your response.</simpara>
<simpara>If you&#8217;re writing contracts using Groovy DSL, you can use the <literal>fromRequest()</literal> method, which lets
you reference a bunch of elements from the HTTP request. You can use the following
options:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>fromRequest().url()</literal>: Returns the request URL and query parameters.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().query(String key)</literal>: Returns the first query parameter with a given name.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().query(String key, int index)</literal>: Returns the nth query parameter with a
given name.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().path()</literal>: Returns the full path.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().path(int index)</literal>: Returns the nth path element.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().header(String key)</literal>: Returns the first header with a given name.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().header(String key, int index)</literal>: Returns the nth header with a given name.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().body()</literal>: Returns the full request body.</simpara>
</listitem>
<listitem>
<simpara><literal>fromRequest().body(String jsonPath)</literal>: Returns the element from the request that
matches the JSON Path.</simpara>
</listitem>
</itemizedlist>
<simpara>If you&#8217;re using the YAML contract definition you have to use the
<link xl:href="https://handlebarsjs.com/">Handlebars</link> <literal>{{{ }}}</literal> notation with custom, Spring Cloud Contract
 functions to achieve this.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>{{{ request.url }}}</literal>: Returns the request URL and query parameters.</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.query.key.[index] }}}</literal>: Returns the nth query parameter with a given name.
E.g. for key <literal>foo</literal>, first entry <literal>{{{ request.query.foo.[0] }}}</literal></simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.path }}}</literal>: Returns the full path.</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.path.[index] }}}</literal>: Returns the nth path element. E.g.
for first entry <literal>`</literal>{{{ request.path.[0] }}}</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.headers.key }}}</literal>: Returns the first header with a given name.</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.headers.key.[index] }}}</literal>: Returns the nth header with a given name.</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ request.body }}}</literal>: Returns the full request body.</simpara>
</listitem>
<listitem>
<simpara><literal>{{{ jsonpath this 'your.json.path' }}}</literal>: Returns the element from the request that
matches the JSON Path. E.g. for json path <literal>$.foo</literal> - <literal>{{{ jsonpath this '$.foo' }}}</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Consider the following contract:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">Contract contractDsl = Contract.make {
	request {
		method 'GET'
		url('/api/v1/xxxx') {
			queryParameters {
				parameter("foo", "bar")
				parameter("foo", "bar2")
			}
		}
		headers {
			header(authorization(), "secret")
			header(authorization(), "secret2")
		}
		body(foo: "bar", baz: 5)
	}
	response {
		status OK()
		headers {
			header(authorization(), "foo ${fromRequest().header(authorization())} bar")
		}
		body(
				url: fromRequest().url(),
				path: fromRequest().path(),
				pathIndex: fromRequest().path(1),
				param: fromRequest().query("foo"),
				paramIndex: fromRequest().query("foo", 1),
				authorization: fromRequest().header("Authorization"),
				authorization2: fromRequest().header("Authorization", 1),
				fullBody: fromRequest().body(),
				responseFoo: fromRequest().body('$.foo'),
				responseBaz: fromRequest().body('$.baz'),
				responseBaz2: "Bla bla ${fromRequest().body('$.foo')} bla bla"
		)
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
  method: GET
  url: /api/v1/xxxx
  queryParameters:
    foo:
      - bar
      - bar2
  headers:
    Authorization:
      - secret
      - secret2
  body:
    foo: bar
    baz: 5
response:
  status: 200
  headers:
    Authorization: "foo {{{ request.headers.Authorization.0 }}} bar"
  body:
    url: "{{{ request.url }}}"
    path: "{{{ request.path }}}"
    pathIndex: "{{{ request.path.1 }}}"
    param: "{{{ request.query.foo }}}"
    paramIndex: "{{{ request.query.foo.1 }}}"
    authorization: "{{{ request.headers.Authorization.0 }}}"
    authorization2: "{{{ request.headers.Authorization.1 }}"
    fullBody: "{{{ request.body }}}"
    responseFoo: "{{{ jsonpath this '$.foo' }}}"
    responseBaz: "{{{ jsonpath this '$.baz' }}}"
    responseBaz2: "Bla bla {{{ jsonpath this '$.foo' }}} bla bla"</programlisting>
</para>
</formalpara>
<simpara>Running a JUnit test generation leads to a test that resembles the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">// given:
 MockMvcRequestSpecification request = given()
   .header("Authorization", "secret")
   .header("Authorization", "secret2")
   .body("{\"foo\":\"bar\",\"baz\":5}");

// when:
 ResponseOptions response = given().spec(request)
   .queryParam("foo","bar")
   .queryParam("foo","bar2")
   .get("/api/v1/xxxx");

// then:
 assertThat(response.statusCode()).isEqualTo(200);
 assertThat(response.header("Authorization")).isEqualTo("foo secret bar");
// and:
 DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
 assertThatJson(parsedJson).field("['fullBody']").isEqualTo("{\"foo\":\"bar\",\"baz\":5}");
 assertThatJson(parsedJson).field("['authorization']").isEqualTo("secret");
 assertThatJson(parsedJson).field("['authorization2']").isEqualTo("secret2");
 assertThatJson(parsedJson).field("['path']").isEqualTo("/api/v1/xxxx");
 assertThatJson(parsedJson).field("['param']").isEqualTo("bar");
 assertThatJson(parsedJson).field("['paramIndex']").isEqualTo("bar2");
 assertThatJson(parsedJson).field("['pathIndex']").isEqualTo("v1");
 assertThatJson(parsedJson).field("['responseBaz']").isEqualTo(5);
 assertThatJson(parsedJson).field("['responseFoo']").isEqualTo("bar");
 assertThatJson(parsedJson).field("['url']").isEqualTo("/api/v1/xxxx?foo=bar&amp;foo=bar2");
 assertThatJson(parsedJson).field("['responseBaz2']").isEqualTo("Bla bla bar bla bla");</programlisting>
<simpara>As you can see, elements from the request have been properly referenced in the response.</simpara>
<simpara>The generated WireMock stub should resemble the following example:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "request" : {
    "urlPath" : "/api/v1/xxxx",
    "method" : "POST",
    "headers" : {
      "Authorization" : {
        "equalTo" : "secret2"
      }
    },
    "queryParameters" : {
      "foo" : {
        "equalTo" : "bar2"
      }
    },
    "bodyPatterns" : [ {
      "matchesJsonPath" : "$[?(@.['baz'] == 5)]"
    }, {
      "matchesJsonPath" : "$[?(@.['foo'] == 'bar')]"
    } ]
  },
  "response" : {
    "status" : 200,
    "body" : "{\"authorization\":\"{{{request.headers.Authorization.[0]}}}\",\"path\":\"{{{request.path}}}\",\"responseBaz\":{{{jsonpath this '$.baz'}}} ,\"param\":\"{{{request.query.foo.[0]}}}\",\"pathIndex\":\"{{{request.path.[1]}}}\",\"responseBaz2\":\"Bla bla {{{jsonpath this '$.foo'}}} bla bla\",\"responseFoo\":\"{{{jsonpath this '$.foo'}}}\",\"authorization2\":\"{{{request.headers.Authorization.[1]}}}\",\"fullBody\":\"{{{escapejsonbody}}}\",\"url\":\"{{{request.url}}}\",\"paramIndex\":\"{{{request.query.foo.[1]}}}\"}",
    "headers" : {
      "Authorization" : "{{{request.headers.Authorization.[0]}}};foo"
    },
    "transformers" : [ "response-template" ]
  }
}</programlisting>
<simpara>Sending a request such as the one presented in the <literal>request</literal> part of the contract results
in sending the following response body:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "url" : "/api/v1/xxxx?foo=bar&amp;foo=bar2",
  "path" : "/api/v1/xxxx",
  "pathIndex" : "v1",
  "param" : "bar",
  "paramIndex" : "bar2",
  "authorization" : "secret",
  "authorization2" : "secret2",
  "fullBody" : "{\"foo\":\"bar\",\"baz\":5}",
  "responseFoo" : "bar",
  "responseBaz" : 5,
  "responseBaz2" : "Bla bla bar bla bla"
}</programlisting>
<important>
<simpara>This feature works only with WireMock having a version greater than or equal
to 2.5.1. The Spring Cloud Contract Verifier uses WireMock&#8217;s
<literal>response-template</literal> response transformer. It uses Handlebars to convert the Mustache <literal>{{{ }}}</literal> templates into
proper values. Additionally, it registers two helper functions:</simpara>
</important>
<itemizedlist>
<listitem>
<simpara><literal>escapejsonbody</literal>: Escapes the request body in a format that can be embedded in a JSON.</simpara>
</listitem>
<listitem>
<simpara><literal>jsonpath</literal>: For a given parameter, find an object in the request body.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_registering_your_own_wiremock_extension">
<title>Registering Your Own WireMock Extension</title>
<simpara>WireMock lets you register custom extensions. By default, Spring Cloud Contract registers
the transformer, which lets you reference a request from a response. If you want to
provide your own extensions, you can register an implementation of the
<literal>org.springframework.cloud.contract.verifier.dsl.wiremock.WireMockExtensions</literal> interface.
Since we use the spring.factories extension approach, you can create an entry in
<literal>META-INF/spring.factories</literal> file similar to the following:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.verifier.dsl.wiremock.WireMockExtensions=\
org.springframework.cloud.contract.stubrunner.provider.wiremock.TestWireMockExtensions</programlisting>
<simpara>The following is an example of a custom extension:</simpara>
<formalpara>
<title>TestWireMockExtensions.groovy</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.verifier.dsl.wiremock

import com.github.tomakehurst.wiremock.extension.Extension

/**
 * Extension that registers the default transformer and the custom one
 */
class TestWireMockExtensions implements WireMockExtensions {
	@Override
	List&lt;Extension&gt; extensions() {
		return [
				new DefaultResponseTransformer(),
				new CustomExtension()
		]
	}
}

class CustomExtension implements Extension {

	@Override
	String getName() {
		return "foo-transformer"
	}
}</programlisting>
</para>
</formalpara>
<important>
<simpara>Remember to override the <literal>applyGlobally()</literal> method and set it to <literal>false</literal> if you
want the transformation to be applied only for a mapping that explicitly requires it.</simpara>
</important>
</section>
<section xml:id="contract-matchers">
<title>Dynamic Properties in the Matchers Sections</title>
<simpara>If you work with <link xl:href="https://docs.pact.io/">Pact</link>, the following discussion may seem familiar.
Quite a few users are used to having a separation between the body and setting the
dynamic parts of a contract.</simpara>
<simpara>You can use the <literal>bodyMatchers</literal> section for two reasons:</simpara>
<itemizedlist>
<listitem>
<simpara>Define the dynamic values that should end up in a stub.
You can set it in the <literal>request</literal> or <literal>inputMessage</literal> part of your contract.</simpara>
</listitem>
<listitem>
<simpara>Verify the result of your test.
This section is present in the <literal>response</literal> or <literal>outputMessage</literal> side of the
contract.</simpara>
</listitem>
</itemizedlist>
<simpara>Currently, Spring Cloud Contract Verifier supports only JSON Path-based matchers with the
following matching possibilities:</simpara>
<itemizedlist>
<title>Groovy DSL</title>
<listitem>
<simpara>For the stubs(in tests on the Consumer&#8217;s side):</simpara>
<itemizedlist>
<listitem>
<simpara><literal>byEquality()</literal>: The value taken from the consumer&#8217;s request via the provided JSON Path must be
equal to the value provided in the contract.</simpara>
</listitem>
<listitem>
<simpara><literal>byRegex(&#8230;&#8203;)</literal>: The value taken from the consumer&#8217;s request via the provided JSON Path must
match the regex.</simpara>
</listitem>
<listitem>
<simpara><literal>byDate()</literal>: The value taken from the consumer&#8217;s request via the provided JSON Path must
match the regex for an ISO Date value.</simpara>
</listitem>
<listitem>
<simpara><literal>byTimestamp()</literal>: The value taken from the consumer&#8217;s request via the provided JSON Path must
match the regex for an ISO DateTime value.</simpara>
</listitem>
<listitem>
<simpara><literal>byTime()</literal>: The value taken from the consumer&#8217;s request via the provided JSON Path must
match the regex for an ISO Time value.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>For the verification(in generated tests on the Producer&#8217;s side):</simpara>
<itemizedlist>
<listitem>
<simpara><literal>byEquality()</literal>: The value taken from the producer&#8217;s response via the provided JSON Path must be
equal to the provided value in the contract.</simpara>
</listitem>
<listitem>
<simpara><literal>byRegex(&#8230;&#8203;)</literal>: The value taken from the producer&#8217;s response via the provided JSON Path must
match the regex.</simpara>
</listitem>
<listitem>
<simpara><literal>byDate()</literal>: The value taken from the producer&#8217;s response via the provided JSON Path must match
the regex for an ISO Date value.</simpara>
</listitem>
<listitem>
<simpara><literal>byTimestamp()</literal>: The value taken from the producer&#8217;s response via the provided JSON Path must
match the regex for an ISO DateTime value.</simpara>
</listitem>
<listitem>
<simpara><literal>byTime()</literal>: The value taken from the producer&#8217;s response via the provided JSON Path must match
the regex for an ISO Time value.</simpara>
</listitem>
<listitem>
<simpara><literal>byType()</literal>: The value taken from the producer&#8217;s response via the provided JSON Path needs to be
of the same type as the type defined in the body of the response in the contract.
<literal>byType</literal> can take a closure, in which you can set <literal>minOccurrence</literal> and <literal>maxOccurrence</literal>.
That way, you can assert the size of the flattened collection. To check the size of an
unflattened collection, use a custom method with the <literal>byCommand(&#8230;&#8203;)</literal> testMatcher.</simpara>
</listitem>
<listitem>
<simpara><literal>byCommand(&#8230;&#8203;)</literal>: The value taken from the producer&#8217;s response via the provided JSON Path is
passed as an input to the custom method that you provide. For example,
<literal>byCommand('foo($it)')</literal> results in calling a <literal>foo</literal> method to which the value matching the
JSON Path gets passed. The type of the object read from the JSON can be one of the
following, depending on the JSON path:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>String</literal>: If you point to a <literal>String</literal> value.</simpara>
</listitem>
<listitem>
<simpara><literal>JSONArray</literal>: If you point to a <literal>List</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Map</literal>: If you point to a <literal>Map</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Number</literal>: If you point to <literal>Integer</literal>, <literal>Double</literal>, or other kind of number.</simpara>
</listitem>
<listitem>
<simpara><literal>Boolean</literal>: If you point to a <literal>Boolean</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>byNull()</literal>: The value taken from the response via the provided JSON Path must be null</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<formalpara>
<title>YAML</title>
<para><emphasis>Please read the Groovy section for detailed explanation of
what the types mean</emphasis></para>
</formalpara>
<simpara>For YAML the structure of a matcher looks like this</simpara>
<programlisting language="yml" linenumbering="unnumbered">- path: $.foo
  type: by_regex
  value: bar</programlisting>
<simpara>Or if you want to use one of the predefined regular expressions
<literal>[only_alpha_unicode, number, any_boolean, ip_address, hostname,
email, url, uuid, iso_date, iso_date_time, iso_time, iso_8601_with_offset, non_empty, non_blank]</literal>:</simpara>
<programlisting language="yml" linenumbering="unnumbered">- path: $.foo
  type: by_regex
  predefined: only_alpha_unicode</programlisting>
<simpara>Below you can find the allowed list of `type`s.</simpara>
<itemizedlist>
<listitem>
<simpara>For <literal>stubMatchers</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>by_equality</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_regex</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_date</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_timestamp</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_time</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>For <literal>testMatchers</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>by_equality</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_regex</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_date</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_timestamp</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_time</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_type</literal></simpara>
<itemizedlist>
<listitem>
<simpara>there are 2 additional fields accepted: <literal>minOccurrence</literal> and <literal>maxOccurrence</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>by_command</literal></simpara>
</listitem>
<listitem>
<simpara><literal>by_null</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<simpara>Consider the following example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">Contract contractDsl = Contract.make {
	request {
		method 'GET'
		urlPath '/get'
		body([
				duck: 123,
				alpha: "abc",
				number: 123,
				aBoolean: true,
				date: "2017-01-01",
				dateTime: "2017-01-01T01:23:45",
				time: "01:02:34",
				valueWithoutAMatcher: "foo",
				valueWithTypeMatch: "string",
				key: [
						'complex.key' : 'foo'
				]
		])
		bodyMatchers {
			jsonPath('$.duck', byRegex("[0-9]{3}"))
			jsonPath('$.duck', byEquality())
			jsonPath('$.alpha', byRegex(onlyAlphaUnicode()))
			jsonPath('$.alpha', byEquality())
			jsonPath('$.number', byRegex(number()))
			jsonPath('$.aBoolean', byRegex(anyBoolean()))
			jsonPath('$.date', byDate())
			jsonPath('$.dateTime', byTimestamp())
			jsonPath('$.time', byTime())
			jsonPath("\$.['key'].['complex.key']", byEquality())
		}
		headers {
			contentType(applicationJson())
		}
	}
	response {
		status OK()
		body([
				duck: 123,
				alpha: "abc",
				number: 123,
				positiveInteger: 1234567890,
				negativeInteger: -1234567890,
				positiveDecimalNumber: 123.4567890,
				negativeDecimalNumber: -123.4567890,
				aBoolean: true,
				date: "2017-01-01",
				dateTime: "2017-01-01T01:23:45",
				time: "01:02:34",
				valueWithoutAMatcher: "foo",
				valueWithTypeMatch: "string",
				valueWithMin: [
					1,2,3
				],
				valueWithMax: [
					1,2,3
				],
				valueWithMinMax: [
					1,2,3
				],
				valueWithMinEmpty: [],
				valueWithMaxEmpty: [],
				key: [
				        'complex.key' : 'foo'
				],
				nullValue: null
		])
		bodyMatchers {
			// asserts the jsonpath value against manual regex
			jsonPath('$.duck', byRegex("[0-9]{3}"))
			// asserts the jsonpath value against the provided value
			jsonPath('$.duck', byEquality())
			// asserts the jsonpath value against some default regex
			jsonPath('$.alpha', byRegex(onlyAlphaUnicode()))
			jsonPath('$.alpha', byEquality())
			jsonPath('$.number', byRegex(number()))
			jsonPath('$.positiveInteger', byRegex(anInteger()))
			jsonPath('$.negativeInteger', byRegex(anInteger()))
			jsonPath('$.positiveDecimalNumber', byRegex(aDouble()))
			jsonPath('$.negativeDecimalNumber', byRegex(aDouble()))
			jsonPath('$.aBoolean', byRegex(anyBoolean()))
			// asserts vs inbuilt time related regex
			jsonPath('$.date', byDate())
			jsonPath('$.dateTime', byTimestamp())
			jsonPath('$.time', byTime())
			// asserts that the resulting type is the same as in response body
			jsonPath('$.valueWithTypeMatch', byType())
			jsonPath('$.valueWithMin', byType {
				// results in verification of size of array (min 1)
				minOccurrence(1)
			})
			jsonPath('$.valueWithMax', byType {
				// results in verification of size of array (max 3)
				maxOccurrence(3)
			})
			jsonPath('$.valueWithMinMax', byType {
				// results in verification of size of array (min 1 &amp; max 3)
				minOccurrence(1)
				maxOccurrence(3)
			})
			jsonPath('$.valueWithMinEmpty', byType {
				// results in verification of size of array (min 0)
				minOccurrence(0)
			})
			jsonPath('$.valueWithMaxEmpty', byType {
				// results in verification of size of array (max 0)
				maxOccurrence(0)
			})
			// will execute a method `assertThatValueIsANumber`
			jsonPath('$.duck', byCommand('assertThatValueIsANumber($it)'))
			jsonPath("\$.['key'].['complex.key']", byEquality())
			jsonPath('$.nullValue', byNull())
		}
		headers {
			contentType(applicationJson())
			header('Some-Header', $(c('someValue'), p(regex('[a-zA-Z]{9}'))))
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">request:
  method: GET
  urlPath: /get
  body:
    duck: 123
    alpha: "abc"
    number: 123
    aBoolean: true
    date: "2017-01-01"
    dateTime: "2017-01-01T01:23:45"
    time: "01:02:34"
    valueWithoutAMatcher: "foo"
    valueWithTypeMatch: "string"
    key:
      "complex.key": 'foo'
    nullValue: null
  matchers:
    headers:
      - key: Content-Type
        regex: "application/json.*"
    body:
      - path: $.duck
        type: by_regex
        value: "[0-9]{3}"
      - path: $.duck
        type: by_equality
      - path: $.alpha
        type: by_regex
        predefined: only_alpha_unicode
      - path: $.alpha
        type: by_equality
      - path: $.number
        type: by_regex
        predefined: number
      - path: $.aBoolean
        type: by_regex
        predefined: any_boolean
      - path: $.date
        type: by_date
      - path: $.dateTime
        type: by_timestamp
      - path: $.time
        type: by_time
      - path: "$.['key'].['complex.key']"
        type: by_equality
      - path: $.nullvalue
        type: by_null
  headers:
    Content-Type: application/json
response:
  status: 200
  body:
    duck: 123
    alpha: "abc"
    number: 123
    aBoolean: true
    date: "2017-01-01"
    dateTime: "2017-01-01T01:23:45"
    time: "01:02:34"
    valueWithoutAMatcher: "foo"
    valueWithTypeMatch: "string"
    valueWithMin:
      - 1
      - 2
      - 3
    valueWithMax:
      - 1
      - 2
      - 3
    valueWithMinMax:
      - 1
      - 2
      - 3
    valueWithMinEmpty: []
    valueWithMaxEmpty: []
    key:
      'complex.key' : 'foo'
    nulValue: null
  matchers:
    headers:
      - key: Content-Type
        regex: "application/json.*"
    body:
      - path: $.duck
        type: by_regex
        value: "[0-9]{3}"
      - path: $.duck
        type: by_equality
      - path: $.alpha
        type: by_regex
        predefined: only_alpha_unicode
      - path: $.alpha
        type: by_equality
      - path: $.number
        type: by_regex
        predefined: number
      - path: $.aBoolean
        type: by_regex
        predefined: any_boolean
      - path: $.date
        type: by_date
      - path: $.dateTime
        type: by_timestamp
      - path: $.time
        type: by_time
      - path: $.valueWithTypeMatch
        type: by_type
      - path: $.valueWithMin
        type: by_type
        minOccurrence: 1
      - path: $.valueWithMax
        type: by_type
        maxOccurrence: 3
      - path: $.valueWithMinMax
        type: by_type
        minOccurrence: 1
        maxOccurrence: 3
      - path: $.valueWithMinEmpty
        type: by_type
        minOccurrence: 0
      - path: $.valueWithMaxEmpty
        type: by_type
        maxOccurrence: 0
      - path: $.duck
        type: by_command
        value: assertThatValueIsANumber($it)
      - path: $.nullValue
        type: by_null
        value: null
  headers:
    Content-Type: application/json</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, you can see the dynamic portions of the contract in the
<literal>matchers</literal> sections. For the request part, you can see that, for all fields but
<literal>valueWithoutAMatcher</literal>, the values of the regular expressions that the stub should
contain are explicitly set. For the <literal>valueWithoutAMatcher</literal>, the verification takes place
in the same way as without the use of matchers. In that case, the test performs an
equality check.</simpara>
<simpara>For the response side in the <literal>bodyMatchers</literal> section, we define the dynamic parts in a
similar manner. The only difference is that the <literal>byType</literal> matchers are also present. The
verifier engine checks four fields to verify whether the response from the test
has a value for which the JSON path matches the given field, is of the same type as the one
defined in the response body, and passes the following check (based on the method being called):</simpara>
<itemizedlist>
<listitem>
<simpara>For <literal>$.valueWithTypeMatch</literal>, the engine checks whether the type is the same.</simpara>
</listitem>
<listitem>
<simpara>For <literal>$.valueWithMin</literal>, the engine check the type and asserts whether the size is greater
than or equal to the minimum occurrence.</simpara>
</listitem>
<listitem>
<simpara>For <literal>$.valueWithMax</literal>, the engine checks the type and asserts whether the size is
smaller than or equal to the maximum occurrence.</simpara>
</listitem>
<listitem>
<simpara>For <literal>$.valueWithMinMax</literal>, the engine checks the type and asserts whether the size is
between the min and maximum occurrence.</simpara>
</listitem>
</itemizedlist>
<simpara>The resulting test would resemble the following example (note that an <literal>and</literal> section
separates the autogenerated assertions and the assertion from matchers):</simpara>
<programlisting language="java" linenumbering="unnumbered">// given:
 MockMvcRequestSpecification request = given()
   .header("Content-Type", "application/json")
   .body("{\"duck\":123,\"alpha\":\"abc\",\"number\":123,\"aBoolean\":true,\"date\":\"2017-01-01\",\"dateTime\":\"2017-01-01T01:23:45\",\"time\":\"01:02:34\",\"valueWithoutAMatcher\":\"foo\",\"valueWithTypeMatch\":\"string\",\"key\":{\"complex.key\":\"foo\"}}");

// when:
 ResponseOptions response = given().spec(request)
   .get("/get");

// then:
 assertThat(response.statusCode()).isEqualTo(200);
 assertThat(response.header("Content-Type")).matches("application/json.*");
// and:
 DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
 assertThatJson(parsedJson).field("['valueWithoutAMatcher']").isEqualTo("foo");
// and:
 assertThat(parsedJson.read("$.duck", String.class)).matches("[0-9]{3}");
 assertThat(parsedJson.read("$.duck", Integer.class)).isEqualTo(123);
 assertThat(parsedJson.read("$.alpha", String.class)).matches("[\\p{L}]*");
 assertThat(parsedJson.read("$.alpha", String.class)).isEqualTo("abc");
 assertThat(parsedJson.read("$.number", String.class)).matches("-?(\\d*\\.\\d+|\\d+)");
 assertThat(parsedJson.read("$.aBoolean", String.class)).matches("(true|false)");
 assertThat(parsedJson.read("$.date", String.class)).matches("(\\d\\d\\d\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])");
 assertThat(parsedJson.read("$.dateTime", String.class)).matches("([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])");
 assertThat(parsedJson.read("$.time", String.class)).matches("(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])");
 assertThat((Object) parsedJson.read("$.valueWithTypeMatch")).isInstanceOf(java.lang.String.class);
 assertThat((Object) parsedJson.read("$.valueWithMin")).isInstanceOf(java.util.List.class);
 assertThat((java.lang.Iterable) parsedJson.read("$.valueWithMin", java.util.Collection.class)).as("$.valueWithMin").hasSizeGreaterThanOrEqualTo(1);
 assertThat((Object) parsedJson.read("$.valueWithMax")).isInstanceOf(java.util.List.class);
 assertThat((java.lang.Iterable) parsedJson.read("$.valueWithMax", java.util.Collection.class)).as("$.valueWithMax").hasSizeLessThanOrEqualTo(3);
 assertThat((Object) parsedJson.read("$.valueWithMinMax")).isInstanceOf(java.util.List.class);
 assertThat((java.lang.Iterable) parsedJson.read("$.valueWithMinMax", java.util.Collection.class)).as("$.valueWithMinMax").hasSizeBetween(1, 3);
 assertThat((Object) parsedJson.read("$.valueWithMinEmpty")).isInstanceOf(java.util.List.class);
 assertThat((java.lang.Iterable) parsedJson.read("$.valueWithMinEmpty", java.util.Collection.class)).as("$.valueWithMinEmpty").hasSizeGreaterThanOrEqualTo(0);
 assertThat((Object) parsedJson.read("$.valueWithMaxEmpty")).isInstanceOf(java.util.List.class);
 assertThat((java.lang.Iterable) parsedJson.read("$.valueWithMaxEmpty", java.util.Collection.class)).as("$.valueWithMaxEmpty").hasSizeLessThanOrEqualTo(0);
 assertThatValueIsANumber(parsedJson.read("$.duck"));
 assertThat(parsedJson.read("$.['key'].['complex.key']", String.class)).isEqualTo("foo");</programlisting>
<important>
<simpara>Notice that, for the <literal>byCommand</literal> method, the example calls the
<literal>assertThatValueIsANumber</literal>. This method must be defined in the test base class or be
statically imported to your tests. Notice that the <literal>byCommand</literal> call was converted to
<literal>assertThatValueIsANumber(parsedJson.read("$.duck"));</literal>. That means that the engine took
the method name and passed the proper JSON path as a parameter to it.</simpara>
</important>
<simpara>The resulting WireMock stub is in the following example:</simpara>
<programlisting language="json" linenumbering="unnumbered">				'''
{
  "request" : {
	"urlPath" : "/get",
	"method" : "POST",
	"headers" : {
	  "Content-Type" : {
		"matches" : "application/json.*"
	  }
	},
	"bodyPatterns" : [ {
	  "matchesJsonPath" : "$[?(@.['valueWithoutAMatcher'] == 'foo')]"
	}, {
	  "matchesJsonPath" : "$[?(@.['valueWithTypeMatch'] == 'string')]"
	}, {
	  "matchesJsonPath" : "$.['list'].['some'].['nested'][?(@.['anothervalue'] == 4)]"
	}, {
	  "matchesJsonPath" : "$.['list'].['someother'].['nested'][?(@.['anothervalue'] == 4)]"
	}, {
	  "matchesJsonPath" : "$.['list'].['someother'].['nested'][?(@.['json'] == 'with value')]"
	}, {
	  "matchesJsonPath" : "$[?(@.duck =~ /([0-9]{3})/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.duck == 123)]"
	}, {
	  "matchesJsonPath" : "$[?(@.alpha =~ /([\\\\p{L}]*)/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.alpha == 'abc')]"
	}, {
	  "matchesJsonPath" : "$[?(@.number =~ /(-?(\\\\d*\\\\.\\\\d+|\\\\d+))/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.aBoolean =~ /((true|false))/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.date =~ /((\\\\d\\\\d\\\\d\\\\d)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.dateTime =~ /(([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9]))/)]"
	}, {
	  "matchesJsonPath" : "$[?(@.time =~ /((2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9]))/)]"
	}, {
	  "matchesJsonPath" : "$.list.some.nested[?(@.json =~ /(.*)/)]"
	} ]
  },
  "response" : {
	"status" : 200,
	"body" : "{\\"date\\":\\"2017-01-01\\",\\"dateTime\\":\\"2017-01-01T01:23:45\\",\\"number\\":123,\\"aBoolean\\":true,\\"duck\\":123,\\"alpha\\":\\"abc\\",\\"valueWithMin\\":[1,2,3],\\"time\\":\\"01:02:34\\",\\"valueWithTypeMatch\\":\\"string\\",\\"valueWithMax\\":[1,2,3],\\"valueWithMinMax\\":[1,2,3],\\"valueWithoutAMatcher\\":\\"foo\\"}",
	"headers" : {
	  "Content-Type" : "application/json"
	}
  }
}
'''</programlisting>
<important>
<simpara>If you use a <literal>matcher</literal>, then the part of the request and response that the
<literal>matcher</literal> addresses with the JSON Path gets removed from the assertion. In the case of
verifying a collection, you must create matchers for <emphasis role="strong">all</emphasis> the elements of the
collection.</simpara>
</important>
<simpara>Consider the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
    request {
        method 'GET'
        url("/foo")
    }
    response {
        status OK()
        body(events: [[
                                 operation          : 'EXPORT',
                                 eventId            : '16f1ed75-0bcc-4f0d-a04d-3121798faf99',
                                 status             : 'OK'
                         ], [
                                 operation          : 'INPUT_PROCESSING',
                                 eventId            : '3bb4ac82-6652-462f-b6d1-75e424a0024a',
                                 status             : 'OK'
                         ]
                ]
        )
        bodyMatchers {
            jsonPath('$.events[0].operation', byRegex('.+'))
            jsonPath('$.events[0].eventId', byRegex('^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})$'))
            jsonPath('$.events[0].status', byRegex('.+'))
        }
    }
}</programlisting>
<simpara>The preceding code leads to creating the following test (the code block shows only the assertion section):</simpara>
<programlisting language="java" linenumbering="unnumbered">and:
	DocumentContext parsedJson = JsonPath.parse(response.body.asString())
	assertThatJson(parsedJson).array("['events']").contains("['eventId']").isEqualTo("16f1ed75-0bcc-4f0d-a04d-3121798faf99")
	assertThatJson(parsedJson).array("['events']").contains("['operation']").isEqualTo("EXPORT")
	assertThatJson(parsedJson).array("['events']").contains("['operation']").isEqualTo("INPUT_PROCESSING")
	assertThatJson(parsedJson).array("['events']").contains("['eventId']").isEqualTo("3bb4ac82-6652-462f-b6d1-75e424a0024a")
	assertThatJson(parsedJson).array("['events']").contains("['status']").isEqualTo("OK")
and:
	assertThat(parsedJson.read("\$.events[0].operation", String.class)).matches(".+")
	assertThat(parsedJson.read("\$.events[0].eventId", String.class)).matches("^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\$")
	assertThat(parsedJson.read("\$.events[0].status", String.class)).matches(".+")</programlisting>
<simpara>As you can see, the assertion is malformed. Only the first element of the array got
asserted. In order to fix this, you should apply the assertion to the whole <literal>$.events</literal>
collection and assert it with the <literal>byCommand(&#8230;&#8203;)</literal> method.</simpara>
</section>
</section>
<section xml:id="_jax_rs_support">
<title>JAX-RS Support</title>
<simpara>The Spring Cloud Contract Verifier supports the JAX-RS 2 Client API. The base class needs
to define <literal>protected WebTarget webTarget</literal> and server initialization. The only option for
testing JAX-RS API is to start a web server. Also, a request with a body needs to have a
content type set. Otherwise, the default of <literal>application/octet-stream</literal> gets used.</simpara>
<simpara>In order to use JAX-RS mode, use the following settings:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">testMode == 'JAXRSCLIENT'</programlisting>
<simpara>The following example shows a generated test API:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">'''
 // when:
  Response response = webTarget
    .path("/users")
    .queryParam("limit", "10")
    .queryParam("offset", "20")
    .queryParam("filter", "email")
    .queryParam("sort", "name")
    .queryParam("search", "55")
    .queryParam("age", "99")
    .queryParam("name", "Denis.Stepanov")
    .queryParam("email", "bob@email.com")
    .request()
    .method("GET");

  String responseAsString = response.readEntity(String.class);

 // then:
  assertThat(response.getStatus()).isEqualTo(200);
 // and:
  DocumentContext parsedJson = JsonPath.parse(responseAsString);
  assertThatJson(parsedJson).field("['property1']").isEqualTo("a");
'''</programlisting>
</section>
<section xml:id="_async_support">
<title>Async Support</title>
<simpara>If you&#8217;re using asynchronous communication on the server side (your controllers are
returning <literal>Callable</literal>, <literal>DeferredResult</literal>, and so on), then, inside your contract, you must
provide an <literal>async()</literal> method in the <literal>response</literal> section. The following code shows an example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
    request {
        method GET()
        url '/get'
    }
    response {
        status OK()
        body 'Passed'
        async()
    }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">response:
    async: true</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_working_with_context_paths">
<title>Working with Context Paths</title>
<simpara>Spring Cloud Contract supports context paths.</simpara>
<important>
<simpara>The only change needed to fully support context paths is the switch on the
<emphasis role="strong">PRODUCER</emphasis> side. Also, the autogenerated tests must use <emphasis role="strong">EXPLICIT</emphasis> mode. The  consumer
side remains untouched. In order for the generated test to pass, you must use <emphasis role="strong">EXPLICIT</emphasis>
mode.</simpara>
</important>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;configuration&gt;
        &lt;testMode&gt;EXPLICIT&lt;/testMode&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">contracts {
		testMode = 'EXPLICIT'
}</programlisting>
</para>
</formalpara>
<simpara>That way, you generate a test that <emphasis role="strong">DOES NOT</emphasis> use MockMvc. It means that you generate
real requests and you need to setup your generated test&#8217;s base class to work on a real
socket.</simpara>
<simpara>Consider the following contract:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">org.springframework.cloud.contract.spec.Contract.make {
	request {
		method 'GET'
		url '/my-context-path/url'
	}
	response {
		status OK()
	}
}</programlisting>
<simpara>The following example shows how to set up a base class and Rest Assured:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">import io.restassured.RestAssured;
import org.junit.Before;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(classes = ContextPathTestingBaseClass.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ContextPathTestingBaseClass {

	@LocalServerPort int port;

	@Before
	public void setup() {
		RestAssured.baseURI = "http://localhost";
		RestAssured.port = this.port;
	}
}</programlisting>
<simpara>If you do it this way:</simpara>
<itemizedlist>
<listitem>
<simpara>All of your requests in the autogenerated tests are sent to the real endpoint with your
context path included (for example, <literal>/my-context-path/url</literal>).</simpara>
</listitem>
<listitem>
<simpara>Your contracts reflect that you have a context path. Your generated stubs also have
that information (for example, in the stubs, you have to call <literal>/my-context-path/url</literal>).</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_messaging_top_level_elements">
<title>Messaging Top-Level Elements</title>
<simpara>The DSL for messaging looks a little bit different than the one that focuses on HTTP. The
following sections explain the differences:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="contract-dsl-output-triggered-method"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-output-triggered-message"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-consumer-producer"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="contract-dsl-common"/></simpara>
</listitem>
</itemizedlist>
<section xml:id="contract-dsl-output-triggered-method">
<title>Output Triggered by a Method</title>
<simpara>The output message can be triggered by calling a method (such as a <literal>Scheduler</literal> when a was
started and a message was sent), as shown in the following example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">def dsl = Contract.make {
	// Human readable description
	description 'Some description'
	// Label by means of which the output message can be triggered
	label 'some_label'
	// input to the contract
	input {
		// the contract will be triggered by a method
		triggeredBy('bookReturnedTriggered()')
	}
	// output message of the contract
	outputMessage {
		// destination to which the output message will be sent
		sentTo('output')
		// the body of the output message
		body('''{ "bookName" : "foo" }''')
		// the headers of the output message
		headers {
			header('BOOK-NAME', 'foo')
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered"># Human readable description
description: Some description
# Label by means of which the output message can be triggered
label: some_label
input:
  # the contract will be triggered by a method
  triggeredBy: bookReturnedTriggered()
# output message of the contract
outputMessage:
  # destination to which the output message will be sent
  sentTo: output
  # the body of the output message
  body:
    bookName: foo
  # the headers of the output message
  headers:
    BOOK-NAME: foo</programlisting>
</para>
</formalpara>
<simpara>In the previous example case, the output message is sent to <literal>output</literal> if a method called
<literal>bookReturnedTriggered</literal> is executed. On the message <emphasis role="strong">publisher&#8217;s</emphasis> side, we generate a
test that calls that method to trigger the message. On the <emphasis role="strong">consumer</emphasis> side, you can use
the <literal>some_label</literal> to trigger the message.</simpara>
</section>
<section xml:id="contract-dsl-output-triggered-message">
<title>Output Triggered by a Message</title>
<simpara>The output message can be triggered by receiving a message, as shown in the following
example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">def dsl = Contract.make {
	description 'Some Description'
	label 'some_label'
	// input is a message
	input {
		// the message was received from this destination
		messageFrom('input')
		// has the following body
		messageBody([
		        bookName: 'foo'
		])
		// and the following headers
		messageHeaders {
			header('sample', 'header')
		}
	}
	outputMessage {
		sentTo('output')
		body([
		        bookName: 'foo'
		])
		headers {
			header('BOOK-NAME', 'foo')
		}
	}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered"># Human readable description
description: Some description
# Label by means of which the output message can be triggered
label: some_label
# input is a message
input:
  messageFrom: input
  # has the following body
  messageBody:
    bookName: 'foo'
  # and the following headers
  messageHeaders:
    sample: 'header'
# output message of the contract
outputMessage:
  # destination to which the output message will be sent
  sentTo: output
  # the body of the output message
  body:
    bookName: foo
  # the headers of the output message
  headers:
    BOOK-NAME: foo</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, the output message is sent to <literal>output</literal> if a proper message is
received on the <literal>input</literal> destination. On the message <emphasis role="strong">publisher&#8217;s</emphasis> side, the engine
generates a test that sends the input message to the defined destination. On the
<emphasis role="strong">consumer</emphasis> side, you can either send a message to the input destination or use a label
(<literal>some_label</literal> in the example) to trigger the message.</simpara>
</section>
<section xml:id="contract-dsl-consumer-producer">
<title>Consumer/Producer</title>
<important>
<simpara>This section is valid only for Groovy DSL.</simpara>
</important>
<simpara>In HTTP, you have a notion of <literal>client</literal>/<literal>stub and `server</literal>/<literal>test</literal> notation. You can also
use those paradigms in messaging. In addition, Spring Cloud Contract Verifier also
provides the <literal>consumer</literal> and <literal>producer</literal> methods, as presented in the following example
(note that you can use either <literal>$</literal> or <literal>value</literal> methods to provide <literal>consumer</literal> and <literal>producer</literal>
parts):</simpara>
<programlisting language="groovy" linenumbering="unnumbered">Contract.make {
	label 'some_label'
	input {
		messageFrom value(consumer('jms:output'), producer('jms:input'))
		messageBody([
				bookName: 'foo'
		])
		messageHeaders {
			header('sample', 'header')
		}
	}
	outputMessage {
		sentTo $(consumer('jms:input'), producer('jms:output'))
		body([
				bookName: 'foo'
		])
	}
}</programlisting>
</section>
<section xml:id="contract-dsl-common">
<title>Common</title>
<simpara>In the <literal>input</literal> or <literal>outputMessage</literal> section you can call <literal>assertThat</literal> with the name
of a <literal>method</literal> (e.g. <literal>assertThatMessageIsOnTheQueue()</literal>) that you have defined in the
base class or in a static import. Spring Cloud Contract will execute that method
in the generated test.</simpara>
</section>
</section>
<section xml:id="_multiple_contracts_in_one_file">
<title>Multiple Contracts in One File</title>
<simpara>You can define multiple contracts in one file. Such a contract might resemble the
following example:</simpara>
<formalpara>
<title>Groovy DSL</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">import org.springframework.cloud.contract.spec.Contract

[
        Contract.make {
            name("should post a user")
            request {
                method 'POST'
                url('/users/1')
            }
            response {
                status OK()
            }
        },
        Contract.make {
            request {
                method 'POST'
                url('/users/2')
            }
            response {
                status OK()
            }
        }
]</programlisting>
</para>
</formalpara>
<formalpara>
<title>YAML</title>
<para>
<programlisting language="yml" linenumbering="unnumbered">---
name: should post a user
request:
  method: POST
  url: /users/1
response:
  status: 200

---
request:
  method: POST
  url: /users/2
response:
  status: 200</programlisting>
</para>
</formalpara>
<simpara>In the preceding example, one contract has the <literal>name</literal> field and the other does not. This
leads to generation of two tests that look more or less like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">package org.springframework.cloud.contract.verifier.tests.com.hello;

import com.example.TestBase;
import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;
import com.jayway.restassured.module.mockmvc.specification.MockMvcRequestSpecification;
import com.jayway.restassured.response.ResponseOptions;
import org.junit.Test;

import static com.jayway.restassured.module.mockmvc.RestAssuredMockMvc.*;
import static com.toomuchcoding.jsonassert.JsonAssertion.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;

public class V1Test extends TestBase {

	@Test
	public void validate_should_post_a_user() throws Exception {
		// given:
			MockMvcRequestSpecification request = given();

		// when:
			ResponseOptions response = given().spec(request)
					.post("/users/1");

		// then:
			assertThat(response.statusCode()).isEqualTo(200);
	}

	@Test
	public void validate_withList_1() throws Exception {
		// given:
			MockMvcRequestSpecification request = given();

		// when:
			ResponseOptions response = given().spec(request)
					.post("/users/2");

		// then:
			assertThat(response.statusCode()).isEqualTo(200);
	}

}</programlisting>
<simpara>Notice that, for the contract that has the <literal>name</literal> field, the generated test method is named
<literal>validate_should_post_a_user</literal>. For the one that does not have the name, it is called
<literal>validate_withList_1</literal>. It corresponds to the name of the file <literal>WithList.groovy</literal> and the
index of the contract in the list.</simpara>
<simpara>The generated stubs is shown in the following example:</simpara>
<screen>should post a user.json
1_WithList.json</screen>
<simpara>As you can see, the first file got the <literal>name</literal> parameter from the contract. The second
got the name of the contract file (<literal>WithList.groovy</literal>) prefixed with the index (in this
case, the contract had an index of <literal>1</literal> in the list of contracts in the file).</simpara>
<tip>
<simpara>As you can see, it is much better if you name your contracts because doing so makes
your tests far more meaningful.</simpara>
</tip>
</section>
<section xml:id="_generating_spring_rest_docs_snippets_from_the_contracts">
<title>Generating Spring REST Docs snippets from the contracts</title>
<simpara>When you want to include the requests and responses of your API using Spring REST Docs,
you only need to make some minor changes to your setup if you are using MockMvc and RestAssuredMockMvc.
Simply include the following dependencies if you haven&#8217;t already.</simpara>
<formalpara>
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-starter-contract-verifier&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.restdocs&lt;/groupId&gt;
	&lt;artifactId&gt;spring-restdocs-mockmvc&lt;/artifactId&gt;
	&lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'</programlisting>
</para>
</formalpara>
<simpara>Next you need to make some changes to your base class like the following example.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.fraud;

import io.restassured.module.mockmvc.RestAssuredMockMvc;

import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.TestName;
import org.junit.runner.RunWith;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.restdocs.JUnitRestDocumentation;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = Application.class)
public abstract class FraudBaseWithWebAppSetup {

	private static final String OUTPUT = "target/generated-snippets";

	@Rule
	public JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation(OUTPUT);

	@Rule public TestName testName = new TestName();

	@Autowired
	private WebApplicationContext context;

	@Before
	public void setup() {
	RestAssuredMockMvc.mockMvc(MockMvcBuilders.webAppContextSetup(this.context)
			.apply(documentationConfiguration(this.restDocumentation))
			.alwaysDo(document(getClass().getSimpleName() + "_" + testName.getMethodName()))
			.build());
	}

	protected void assertThatRejectionReasonIsNull(Object rejectionReason) {
		assert rejectionReason == null;
	}
}</programlisting>
<simpara>In case you are using the standalone setup, you can set up RestAssuredMockMvc like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example.fraud;

import io.restassured.module.mockmvc.RestAssuredMockMvc;
import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.TestName;
import org.springframework.restdocs.JUnitRestDocumentation;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;

public abstract class FraudBaseWithStandaloneSetup {

	private static final String OUTPUT = "target/generated-snippets";

	@Rule
	public JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation(OUTPUT);

	@Rule public TestName testName = new TestName();

	@Before
	public void setup() {
		RestAssuredMockMvc.standaloneSetup(MockMvcBuilders.standaloneSetup(new FraudDetectionController())
				.apply(documentationConfiguration(this.restDocumentation))
				.alwaysDo(document(getClass().getSimpleName() + "_" + testName.getMethodName())));
	}

}</programlisting>
<tip>
<simpara>You don&#8217;t need to specify the output directory for the generated snippets since version 1.2.0.RELEASE of Spring REST Docs.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_customization">
<title>Customization</title>
<important>
<simpara>This section is valid only for Groovy DSL</simpara>
</important>
<simpara>You can customize the Spring Cloud Contract Verifier by extending the DSL, as shown in
the remainder of this section.</simpara>
<section xml:id="_extending_the_dsl">
<title>Extending the DSL</title>
<simpara>You can provide your own functions to the DSL. The key requirement for this feature is to
maintain the static compatibility. Later in this document, you can see examples of:</simpara>
<itemizedlist>
<listitem>
<simpara>Creating a JAR with reusable classes.</simpara>
</listitem>
<listitem>
<simpara>Referencing of these classes in the DSLs.</simpara>
</listitem>
</itemizedlist>
<simpara>You can find the full example
<link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples">here</link>.</simpara>
<section xml:id="_common_jar">
<title>Common JAR</title>
<simpara>The following examples show three classes that can be reused in the DSLs.</simpara>
<simpara><emphasis role="strong">PatternUtils</emphasis> contains functions used by both the <emphasis role="strong">consumer</emphasis> and the <emphasis role="strong">producer</emphasis>.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example;

import java.util.regex.Pattern;

/**
 * If you want to use {@link Pattern} directly in your tests
 * then you can create a class resembling this one. It can
 * contain all the {@link Pattern} you want to use in the DSL.
 *
 * &lt;pre&gt;
 * {@code
 * request {
 *     body(
 *         [ age: $(c(PatternUtils.oldEnough()))]
 *     )
 * }
 * &lt;/pre&gt;
 *
 * Notice that we're using both {@code $()} for dynamic values
 * and {@code c()} for the consumer side.
 *
 * @author Marcin Grzejszczak
 */
//tag::impl[]
public class PatternUtils {

	public static String tooYoung() {
		//remove::start[]
		return "[0-1][0-9]";
		//remove::end[return]
	}

	public static Pattern oldEnough() {
		//remove::start[]
		return Pattern.compile("[2-9][0-9]");
		//remove::end[return]
	}

	/**
	 * Makes little sense but it's just an example ;)
	 */
	public static Pattern ok() {
		//remove::start[]
		return Pattern.compile("OK");
		//remove::end[return]
	}
}
//end::impl[]</programlisting>
<simpara><emphasis role="strong">ConsumerUtils</emphasis> contains functions used by the <emphasis role="strong">consumer</emphasis>.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example;

import org.springframework.cloud.contract.spec.internal.ClientDslProperty;

/**
 * DSL Properties passed to the DSL from the consumer's perspective.
 * That means that on the input side {@code Request} for HTTP
 * or {@code Input} for messaging you can have a regular expression.
 * On the {@code Response} for HTTP or {@code Output} for messaging
 * you have to have a concrete value.
 *
 * @author Marcin Grzejszczak
 */
//tag::impl[]
public class ConsumerUtils {
	/**
	 * Consumer side property. By using the {@link ClientDslProperty}
	 * you can omit most of boilerplate code from the perspective
	 * of dynamic values. Example
	 *
	 * &lt;pre&gt;
	 * {@code
	 * request {
	 *     body(
	 *         [ age: $(ConsumerUtils.oldEnough())]
	 *     )
	 * }
	 * &lt;/pre&gt;
	 *
	 * That way it's in the implementation that we decide what value we will pass to the consumer
	 * and which one to the producer.
	 *
	 * @author Marcin Grzejszczak
	 */
	public static ClientDslProperty oldEnough() {
		//remove::start[]
		// this example is not the best one and
		// theoretically you could just pass the regex instead of `ServerDslProperty` but
		// it's just to show some new tricks :)
		return new ClientDslProperty(PatternUtils.oldEnough(), 40);
		//remove::end[return]
	}

}
//end::impl[]</programlisting>
<simpara><emphasis role="strong">ProducerUtils</emphasis> contains functions used by the <emphasis role="strong">producer</emphasis>.</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example;

import org.springframework.cloud.contract.spec.internal.ServerDslProperty;

/**
 * DSL Properties passed to the DSL from the producer's perspective.
 * That means that on the input side {@code Request} for HTTP
 * or {@code Input} for messaging you have to have a concrete value.
 * On the {@code Response} for HTTP or {@code Output} for messaging
 * you can have a regular expression.
 *
 * @author Marcin Grzejszczak
 */
//tag::impl[]
public class ProducerUtils {

	/**
	 * Producer side property. By using the {@link ProducerUtils}
	 * you can omit most of boilerplate code from the perspective
	 * of dynamic values. Example
	 *
	 * &lt;pre&gt;
	 * {@code
	 * response {
	 *     body(
	 *         [ status: $(ProducerUtils.ok())]
	 *     )
	 * }
	 * &lt;/pre&gt;
	 *
	 * That way it's in the implementation that we decide what value we will pass to the consumer
	 * and which one to the producer.
	 */
	public static ServerDslProperty ok() {
		// this example is not the best one and
		// theoretically you could just pass the regex instead of `ServerDslProperty` but
		// it's just to show some new tricks :)
		return new ServerDslProperty( PatternUtils.ok(), "OK");
	}
}
//end::impl[]</programlisting>
</section>
<section xml:id="_adding_the_dependency_to_the_project">
<title>Adding the Dependency to the Project</title>
<simpara>In order for the plugins and IDE to be able to reference the common JAR classes, you need
to pass the dependency to your project.</simpara>
</section>
<section xml:id="_test_the_dependency_in_the_project_s_dependencies">
<title>Test the Dependency in the Project&#8217;s Dependencies</title>
<simpara>First, add the common jar dependency as a test dependency. Because your contracts files
are available on the test resources path,  the common jar classes automatically become
visible in your Groovy files. The following examples show how to test the dependency:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;com.example&lt;/groupId&gt;
	&lt;artifactId&gt;beer-common&lt;/artifactId&gt;
	&lt;version&gt;${project.version}&lt;/version&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile("com.example:beer-common:0.0.1-SNAPSHOT")</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_test_a_dependency_in_the_plugin_s_dependencies">
<title>Test a Dependency in the Plugin&#8217;s Dependencies</title>
<simpara>Now, you must add the dependency for the plugin to reuse at runtime, as shown in the
following example:</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example&lt;/packageWithBaseClasses&gt;
		&lt;baseClassMappings&gt;
			&lt;baseClassMapping&gt;
				&lt;contractPackageRegex&gt;.*intoxication.*&lt;/contractPackageRegex&gt;
				&lt;baseClassFQN&gt;com.example.intoxication.BeerIntoxicationBase&lt;/baseClassFQN&gt;
			&lt;/baseClassMapping&gt;
		&lt;/baseClassMappings&gt;
	&lt;/configuration&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.example&lt;/groupId&gt;
			&lt;artifactId&gt;beer-common&lt;/artifactId&gt;
			&lt;version&gt;${project.version}&lt;/version&gt;
			&lt;scope&gt;compile&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/plugin&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">classpath "com.example:beer-common:0.0.1-SNAPSHOT"</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_referencing_classes_in_dsls">
<title>Referencing classes in DSLs</title>
<simpara>You can now reference your classes in your DSL, as shown in the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package contracts.beer.rest

import com.example.ConsumerUtils
import com.example.ProducerUtils
import org.springframework.cloud.contract.spec.Contract

Contract.make {
	description("""
Represents a successful scenario of getting a beer

```
given:
	client is old enough
when:
	he applies for a beer
then:
	we'll grant him the beer
```

""")
	request {
		method 'POST'
		url '/check'
		body(
				age: $(ConsumerUtils.oldEnough())
		)
		headers {
			contentType(applicationJson())
		}
	}
	response {
		status 200
		body("""
			{
				"status": "${value(ProducerUtils.ok())}"
			}
			""")
		headers {
			contentType(applicationJson())
		}
	}
}</programlisting>
</section>
</section>
</chapter>
<chapter xml:id="_using_the_pluggable_architecture">
<title>Using the Pluggable Architecture</title>
<simpara>You may encounter cases where you have your contracts have been defined in other formats,
such as YAML, RAML or PACT. In those cases, you still want to benefit from the automatic
generation of tests and stubs. You can add your own implementation for generating both
tests and stubs. Also, you can customize the way tests are generated (for example, you
can generate tests for other languages) and the way stubs are generated (for example, you
can generate stubs for other HTTP server implementations).</simpara>
<section xml:id="_custom_contract_converter">
<title>Custom Contract Converter</title>
<simpara>The <literal>ContractConverter</literal> interface lets you register your own implementation of a contract
structure converter. The following code listing shows the <literal>ContractConverter</literal> interface:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.spec

/**
 * Converter to be used to convert FROM {@link File} TO {@link Contract}
 * and from {@link Contract} to {@code T}
 *
 * @param &lt;T&gt; - type to which we want to convert the contract
 *
 * @author Marcin Grzejszczak
 * @since 1.1.0
 */
interface ContractConverter&lt;T&gt; {

	/**
	 * Should this file be accepted by the converter. Can use the file extension
	 * to check if the conversion is possible.
	 *
	 * @param file - file to be considered for conversion
	 * @return - {@code true} if the given implementation can convert the file
	 */
	boolean isAccepted(File file)

	/**
	 * Converts the given {@link File} to its {@link Contract} representation
	 *
	 * @param file - file to convert
	 * @return - {@link Contract} representation of the file
	 */
	Collection&lt;Contract&gt; convertFrom(File file)

	/**
	 * Converts the given {@link Contract} to a {@link T} representation
	 *
	 * @param contract - the parsed contract
	 * @return - {@link T} the type to which we do the conversion
	 */
	T convertTo(Collection&lt;Contract&gt; contract)
}</programlisting>
<simpara>Your implementation must define the condition on which it should start the
conversion. Also, you must define how to perform that conversion in both directions.</simpara>
<important>
<simpara>Once you create your implementation, you must create a
<literal>/META-INF/spring.factories</literal> file in which you provide the fully qualified name of your
implementation.</simpara>
</important>
<simpara>The following example shows a typical <literal>spring.factories</literal> file:</simpara>
<screen>org.springframework.cloud.contract.spec.ContractConverter=\
org.springframework.cloud.contract.verifier.converter.YamlContractConverter</screen>
<section xml:id="pact-converter">
<title>Pact Converter</title>
<simpara>Spring Cloud Contract includes support for <link xl:href="https://docs.pact.io/">Pact</link> representation of
contracts up until v4. Instead of using the Groovy DSL, you can use Pact files. In this section, we
present how to add Pact support for your project. Note however that not all functionality is supported.
Starting with v3 you can combine multiple matcher for the same element;
you can use matchers for the body, headers, request and path; and you can use value generators.
Spring Cloud Contract currently only supports multiple matchers that are combined using the AND rule logic.
Next to that the request and path matchers are skipped during the conversion.
When using a date, time or datetime value generator with a given format,
the given format will be skipped and the ISO format will be used.</simpara>
</section>
<section xml:id="_pact_contract">
<title>Pact Contract</title>
<simpara>Consider following example of a Pact contract, which is a file under the
<literal>src/test/resources/contracts</literal> folder.</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
  "provider": {
    "name": "Provider"
  },
  "consumer": {
    "name": "Consumer"
  },
  "interactions": [
    {
      "description": "",
      "request": {
        "method": "PUT",
        "path": "/fraudcheck",
        "headers": {
          "Content-Type": "application/vnd.fraud.v1+json"
        },
        "body": {
          "clientId": "1234567890",
          "loanAmount": 99999
        },
        "generators": {
          "body": {
            "$.clientId": {
              "type": "Regex",
              "regex": "[0-9]{10}"
            }
          }
        },
        "matchingRules": {
          "header": {
            "Content-Type": {
              "matchers": [
                {
                  "match": "regex",
                  "regex": "application/vnd\\.fraud\\.v1\\+json.*"
                }
              ],
              "combine": "AND"
            }
          },
          "body" : {
            "$.clientId": {
              "matchers": [
                {
                  "match": "regex",
                  "regex": "[0-9]{10}"
                }
              ],
              "combine": "AND"
            }
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/vnd.fraud.v1+json;charset=UTF-8"
        },
        "body": {
          "fraudCheckStatus": "FRAUD",
          "rejectionReason": "Amount too high"
        },
        "matchingRules": {
          "header": {
            "Content-Type": {
              "matchers": [
                {
                  "match": "regex",
                  "regex": "application/vnd\\.fraud\\.v1\\+json.*"
                }
              ],
              "combine": "AND"
            }
          },
          "body": {
            "$.fraudCheckStatus": {
              "matchers": [
                {
                  "match": "regex",
                  "regex": "FRAUD"
                }
              ],
              "combine": "AND"
            }
          }
        }
      }
    }
  ],
  "metadata": {
    "pact-specification": {
      "version": "3.0.0"
    },
    "pact-jvm": {
      "version": "3.5.13"
    }
  }
}</programlisting>
<simpara>The remainder of this section about using Pact refers to the preceding file.</simpara>
</section>
<section xml:id="_pact_for_producers">
<title>Pact for Producers</title>
<simpara>On the producer side, you must add two additional dependencies to your plugin
configuration. One is the Spring Cloud Contract Pact support, and the other represents
the current Pact version that you use.</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;plugin&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
	&lt;extensions&gt;true&lt;/extensions&gt;
	&lt;configuration&gt;
		&lt;packageWithBaseClasses&gt;com.example.fraud&lt;/packageWithBaseClasses&gt;
	&lt;/configuration&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
			&lt;artifactId&gt;spring-cloud-contract-pact&lt;/artifactId&gt;
			&lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/plugin&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">classpath "org.springframework.cloud:spring-cloud-contract-pact:${findProperty('verifierVersion') ?: verifierVersion}"</programlisting>
</para>
</formalpara>
<simpara>When you execute the build of your application, a test will be generated. The generated
test might be as follows:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void validate_shouldMarkClientAsFraud() throws Exception {
	// given:
		MockMvcRequestSpecification request = given()
				.header("Content-Type", "application/vnd.fraud.v1+json")
				.body("{\"clientId\":\"1234567890\",\"loanAmount\":99999}");

	// when:
		ResponseOptions response = given().spec(request)
				.put("/fraudcheck");

	// then:
		assertThat(response.statusCode()).isEqualTo(200);
		assertThat(response.header("Content-Type")).matches("application/vnd\\.fraud\\.v1\\+json.*");
	// and:
		DocumentContext parsedJson = JsonPath.parse(response.getBody().asString());
		assertThatJson(parsedJson).field("['rejectionReason']").isEqualTo("Amount too high");
	// and:
		assertThat(parsedJson.read("$.fraudCheckStatus", String.class)).matches("FRAUD");
}</programlisting>
<simpara>The corresponding generated stub might be as follows:</simpara>
<programlisting language="javascript" linenumbering="unnumbered">{
  "id" : "996ae5ae-6834-4db6-8fac-358ca187ab62",
  "uuid" : "996ae5ae-6834-4db6-8fac-358ca187ab62",
  "request" : {
    "url" : "/fraudcheck",
    "method" : "PUT",
    "headers" : {
      "Content-Type" : {
        "matches" : "application/vnd\\.fraud\\.v1\\+json.*"
      }
    },
    "bodyPatterns" : [ {
      "matchesJsonPath" : "$[?(@.['loanAmount'] == 99999)]"
    }, {
      "matchesJsonPath" : "$[?(@.clientId =~ /([0-9]{10})/)]"
    } ]
  },
  "response" : {
    "status" : 200,
    "body" : "{\"fraudCheckStatus\":\"FRAUD\",\"rejectionReason\":\"Amount too high\"}",
    "headers" : {
      "Content-Type" : "application/vnd.fraud.v1+json;charset=UTF-8"
    },
    "transformers" : [ "response-template" ]
  },
}</programlisting>
</section>
<section xml:id="_pact_for_consumers">
<title>Pact for Consumers</title>
<simpara>On the producer side, you must add two additional dependencies to your project
dependencies. One is the Spring Cloud Contract Pact support, and the other represents the
current Pact version that you use.</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
	&lt;artifactId&gt;spring-cloud-contract-pact&lt;/artifactId&gt;
	&lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">testCompile "org.springframework.cloud:spring-cloud-contract-pact"</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_using_the_custom_test_generator">
<title>Using the Custom Test Generator</title>
<simpara>If you want to generate tests for languages other than Java or you are not happy with the
way the verifier builds Java tests, you can register your own implementation.</simpara>
<simpara>The <literal>SingleTestGenerator</literal> interface lets you register your own implementation.  The
following code listing shows the <literal>SingleTestGenerator</literal> interface:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.verifier.builder

import org.springframework.cloud.contract.verifier.config.ContractVerifierConfigProperties
import org.springframework.cloud.contract.verifier.file.ContractMetadata
/**
 * Builds a single test.
 *
 * @since 1.1.0
 */
interface SingleTestGenerator {

	/**
	 * Creates contents of a single test class in which all test scenarios from
	 * the contract metadata should be placed.
	 *
	 * @param properties - properties passed to the plugin
	 * @param listOfFiles - list of parsed contracts with additional metadata
	 * @param className - the name of the generated test class
	 * @param classPackage - the name of the package in which the test class should be stored
	 * @param includedDirectoryRelativePath - relative path to the included directory
	 * @return contents of a single test class
	 */
	String buildClass(ContractVerifierConfigProperties properties, Collection&lt;ContractMetadata&gt; listOfFiles,
					  String className, String classPackage, String includedDirectoryRelativePath)

	/**
	 * Extension that should be appended to the generated test class. E.g. {@code .java} or {@code .php}
	 *
	 * @param properties - properties passed to the plugin
	 */
	String fileExtension(ContractVerifierConfigProperties properties)
}</programlisting>
<simpara>Again, you must provide a <literal>spring.factories</literal> file, such as the one shown in the following
example:</simpara>
<screen>org.springframework.cloud.contract.verifier.builder.SingleTestGenerator=/
com.example.MyGenerator</screen>
</section>
<section xml:id="_using_the_custom_stub_generator">
<title>Using the Custom Stub Generator</title>
<simpara>If you want to generate stubs for stub servers other than WireMock, you can plug in your
own implementation of the <literal>StubGenerator</literal> interface. The following code listing shows the
<literal>StubGenerator</literal> interface:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.verifier.converter

import groovy.transform.CompileStatic
import org.springframework.cloud.contract.spec.Contract
import org.springframework.cloud.contract.verifier.file.ContractMetadata

/**
 * Converts contracts into their stub representation.
 *
 * @since 1.1.0
 */
@CompileStatic
interface StubGenerator {

	/**
	 * Returns {@code true} if the converter can handle the file to convert it into a stub.
	 */
	boolean canHandleFileName(String fileName)

	/**
	 * Returns the collection of converted contracts into stubs. One contract can
	 * result in multiple stubs.
	 */
	Map&lt;Contract, String&gt; convertContents(String rootName, ContractMetadata content)

	/**
	 * Returns the name of the converted stub file. If you have multiple contracts
	 * in a single file then a prefix will be added to the generated file. If you
	 * provide the {@link Contract#name} field then that field will override the
	 * generated file name.
	 *
	 * Example: name of file with 2 contracts is {@code foo.groovy}, it will be
	 * converted by the implementation to {@code foo.json}. The recursive file
	 * converter will create two files {@code 0_foo.json} and {@code 1_foo.json}
	 */
	String generateOutputFileNameForInput(String inputFileName)
}</programlisting>
<simpara>Again, you must provide a <literal>spring.factories</literal> file, such as the one shown in the following
example:</simpara>
<screen># Stub converters
org.springframework.cloud.contract.verifier.converter.StubGenerator=\
org.springframework.cloud.contract.verifier.wiremock.DslToWireMockClientConverter</screen>
<simpara>The default implementation is the WireMock stub generation.</simpara>
<tip>
<simpara>You can provide multiple stub generator implementations. For example, from a single
DSL, you can produce both WireMock stubs and Pact files.</simpara>
</tip>
</section>
<section xml:id="_using_the_custom_stub_runner">
<title>Using the Custom Stub Runner</title>
<simpara>If you decide to use a custom stub generation, you also need a custom way of running
stubs with your different stub provider.</simpara>
<simpara>Assume that you use <link xl:href="https://github.com/dreamhead/moco">Moco</link> to build your stubs and that
you have written a stub generator and placed your stubs in a JAR file.</simpara>
<simpara>In order for Stub Runner to know how to run your stubs, you have to define a custom
HTTP Stub server implementation, which might resemble the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">package org.springframework.cloud.contract.stubrunner.provider.moco

import com.github.dreamhead.moco.bootstrap.arg.HttpArgs
import com.github.dreamhead.moco.runner.JsonRunner
import com.github.dreamhead.moco.runner.RunnerSetting
import groovy.util.logging.Slf4j
import org.springframework.cloud.contract.stubrunner.HttpServerStub
import org.springframework.util.SocketUtils

@Slf4j
class MocoHttpServerStub implements HttpServerStub {

	private boolean started
	private JsonRunner runner
	private int port

	@Override
	int port() {
		if (!isRunning()) {
			return -1
		}
		return port
	}

	@Override
	boolean isRunning() {
		return started
	}

	@Override
	HttpServerStub start() {
		return start(SocketUtils.findAvailableTcpPort())
	}

	@Override
	HttpServerStub start(int port) {
		this.port = port
		return this
	}

	@Override
	HttpServerStub stop() {
		if (!isRunning()) {
			return this
		}
		this.runner.stop()
		return this
	}

	@Override
	HttpServerStub registerMappings(Collection&lt;File&gt; stubFiles) {
		List&lt;RunnerSetting&gt; settings = stubFiles.findAll { it.name.endsWith("json") }
				.collect {
			log.info("Trying to parse [{}]", it.name)
			try {
				return RunnerSetting.aRunnerSetting().withStream(it.newInputStream()).build()
			} catch (Exception e) {
				log.warn("Exception occurred while trying to parse file [{}]", it.name, e)
				return null
			}
		}.findAll { it }
		this.runner = JsonRunner.newJsonRunnerWithSetting(settings,
				HttpArgs.httpArgs().withPort(this.port).build())
		this.runner.run()
		this.started = true
		return this
	}

	@Override
	String registeredMappings() {
		return ""
	}

	@Override
	boolean isAccepted(File file) {
		return file.name.endsWith(".json")
	}
}</programlisting>
<simpara>Then, you can register it in your <literal>spring.factories</literal> file, as shown in the following
example:</simpara>
<screen>org.springframework.cloud.contract.stubrunner.HttpServerStub=\
org.springframework.cloud.contract.stubrunner.provider.moco.MocoHttpServerStub</screen>
<simpara>Now you can run stubs with Moco.</simpara>
<important>
<simpara>If you do not provide any implementation, then the default (WireMock)
implementation is used. If you provide more than one, the first one on the list is used.</simpara>
</important>
</section>
<section xml:id="_using_the_custom_stub_downloader">
<title>Using the Custom Stub Downloader</title>
<simpara>You can customize the way your stubs are downloaded by creating an implementation of the
<literal>StubDownloaderBuilder</literal> interface, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">package com.example;

class CustomStubDownloaderBuilder implements StubDownloaderBuilder {

	@Override
	public StubDownloader build(final StubRunnerOptions stubRunnerOptions) {
		return new StubDownloader() {
			@Override
			public Map.Entry&lt;StubConfiguration, File&gt; downloadAndUnpackStubJar(
					StubConfiguration config) {
				File unpackedStubs = retrieveStubs();
				return new AbstractMap.SimpleEntry&lt;&gt;(
						new StubConfiguration(config.getGroupId(), config.getArtifactId(), version,
								config.getClassifier()), unpackedStubs);
			}

			File retrieveStubs() {
			    // here goes your custom logic to provide a folder where all the stubs reside
			}
}</programlisting>
<simpara>Then you can register it in your <literal>spring.factories</literal> file, as shown in the following
example:</simpara>
<screen># Example of a custom Stub Downloader Provider
org.springframework.cloud.contract.stubrunner.StubDownloaderBuilder=\
com.example.CustomStubDownloaderBuilder</screen>
<simpara>Now you can pick a folder with the source of your stubs.</simpara>
<important>
<simpara>If you do not provide any implementation, then the default is used (scan classpath).
If you provide the <literal>stubsMode = StubRunnerProperties.StubsMode.LOCAL</literal> or
<literal>, stubsMode = StubRunnerProperties.StubsMode.REMOTE</literal> then the Aether implementation will be used
If you provide more than one, then the first one on the list is used.</simpara>
</important>
</section>
<section xml:id="scm-stub-downloader">
<title>Using the SCM Stub Downloader</title>
<simpara>Whenever the <literal>repositoryRoot</literal> starts with a SCM protocol
(currently we support only <literal>git://</literal>), the stub downloader will try
to clone the repository and use it as a source of contracts
to generate tests or stubs.</simpara>
<simpara>Either via environment variables, system properties, properties set
inside the plugin or contracts repository configuration you can
tweak the downloader&#8217;s behaviour. Below you can find the list of
properties</simpara>
<table frame="topbot" rowsep="1" colsep="1">
<title>SCM Stub Downloader properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Type of a property</simpara></entry>
<entry align="left" valign="top"><simpara>Name of the property</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>git.branch</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.git.branch</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_GIT_BRANCH</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>master</simpara></entry>
<entry align="left" valign="top"><simpara>Which branch to checkout</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>git.username</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.git.username</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_GIT_USERNAME</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Git clone username</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>git.password</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.git.password</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_GIT_PASSWORD</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Git clone password</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>git.no-of-attempts</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.git.no-of-attempts</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_GIT_NO_OF_ATTEMPTS</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>Number of attempts to push the commits to <literal>origin</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>git.wait-between-attempts</literal> (Plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.git.wait-between-attempts</literal>  (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_GIT_WAIT_BETWEEN_ATTEMPTS</literal>  (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>Number of millis to wait between attempts to push the commits to <literal>origin</literal></simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
<section xml:id="pact-stub-downloader">
<title>Using the Pact Stub Downloader</title>
<simpara>Whenever the <literal>repositoryRoot</literal> starts with a Pact protocol
(starts with <literal>pact://</literal>), the stub downloader will try
to fetch the Pact contract definitions from the Pact Broker.
Whatever is set after <literal>pact://</literal> will be parsed as the Pact Broker URL.</simpara>
<simpara>Either via environment variables, system properties, properties set
inside the plugin or contracts repository configuration you can
tweak the downloader&#8217;s behaviour. Below you can find the list of
properties</simpara>
<table frame="topbot" rowsep="1" colsep="1">
<title>SCM Stub Downloader properties</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Name of a property</simpara></entry>
<entry align="left" valign="top"><simpara>Default</simpara></entry>
<entry align="left" valign="top"><simpara>Description</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.host</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.host</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_HOST</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>Host from URL passed to <literal>repositoryRoot</literal></simpara></entry>
<entry align="left" valign="top"><simpara>What is the URL of Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.port</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.port</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_PORT</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>Port from URL passed to <literal>repositoryRoot</literal></simpara></entry>
<entry align="left" valign="top"><simpara>What is the port of Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.protocol</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.protocol</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_PROTOCOL</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>Protocol from URL passed to <literal>repositoryRoot</literal></simpara></entry>
<entry align="left" valign="top"><simpara>What is the protocol of Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.tags</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.tags</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_TAGS</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>Version of the stub, or <literal>latest</literal> if version is <literal>+</literal></simpara></entry>
<entry align="left" valign="top"><simpara>What tags should be used to fetch the stub</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.auth.scheme</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.auth.scheme</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_AUTH_SCHEME</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara><literal>Basic</literal></simpara></entry>
<entry align="left" valign="top"><simpara>What kind of authentication should be used to connect to the Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.auth.username</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.auth.username</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_AUTH_USERNAME</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>The username passed to <literal>contractsRepositoryUsername</literal> (maven) or <literal>contractRepository.username</literal> (gradle)</simpara></entry>
<entry align="left" valign="top"><simpara>Username used to connect to the Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.auth.password</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.auth.password</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_AUTH_PASSWORD</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>The password passed to <literal>contractsRepositoryPassword</literal> (maven) or <literal>contractRepository.password</literal> (gradle)</simpara></entry>
<entry align="left" valign="top"><simpara>Password used to connect to the Pact Broker</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>* <literal>pactbroker.provider-name-with-group-id</literal> (plugin prop)
</simpara><simpara>* <literal>stubrunner.properties.pactbroker.provider-name-with-group-id</literal> (system prop)
</simpara><simpara>* <literal>STUBRUNNER_PROPERTIES_PACTBROKER_PROVIDER_NAME_WITH_GROUP_ID</literal> (env prop)</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>When <literal>true</literal>, the provider name will be a combination of <literal>groupId:artifactId</literal>. If <literal>false</literal>, just <literal>artifactId</literal> is used</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
</section>
</chapter>
<chapter xml:id="_spring_cloud_contract_wiremock">
<title>Spring Cloud Contract WireMock</title>
<simpara>The Spring Cloud Contract WireMock modules let you use <link xl:href="http://wiremock.org">WireMock</link> in a
Spring Boot application. Check out the
<link xl:href="https://github.com/spring-cloud/spring-cloud-contract/tree/master/samples">samples</link>
for more details.</simpara>
<simpara>If you have a Spring Boot application that uses Tomcat as an embedded server (which is
the default with <literal>spring-boot-starter-web</literal>),  you can add
<literal>spring-cloud-starter-contract-stub-runner</literal> to your classpath and add <literal>@AutoConfigureWireMock</literal> in
order to be able to use Wiremock in your tests. Wiremock runs as a stub server and you
can register stub behavior using a Java API or via static JSON declarations as part of
your test. The following code shows an example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@AutoConfigureWireMock(port = 0)
public class WiremockForDocsTests {
	// A service that calls out over HTTP
	@Autowired private Service service;

	// Using the WireMock APIs in the normal way:
	@Test
	public void contextLoads() throws Exception {
		// Stubbing WireMock
		stubFor(get(urlEqualTo("/resource"))
				.willReturn(aResponse().withHeader("Content-Type", "text/plain").withBody("Hello World!")));
		// We're asserting if WireMock responded properly
		assertThat(this.service.go()).isEqualTo("Hello World!");
	}

}</programlisting>
<simpara>To start the stub server on a different port use (for example),
<literal>@AutoConfigureWireMock(port=9999)</literal>. For a random port, use a value of <literal>0</literal>. The stub
server port can be bound in the test application context with the "wiremock.server.port"
property. Using <literal>@AutoConfigureWireMock</literal> adds a bean of type <literal>WiremockConfiguration</literal> to
your test application context, where it will be cached in between methods and classes
having the same context, the same as for Spring integration tests.</simpara>
<section xml:id="_registering_stubs_automatically">
<title>Registering Stubs Automatically</title>
<simpara>If you use <literal>@AutoConfigureWireMock</literal>, it registers WireMock JSON stubs from the file
system or classpath (by default, from <literal>file:src/test/resources/mappings</literal>). You can
customize the locations using the <literal>stubs</literal> attribute in the annotation, which can be an
Ant-style resource pattern or a directory. In the case of a directory, <literal><emphasis role="strong">*/</emphasis>.json</literal> is
appended. The following code shows an example:</simpara>
<screen>@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureWireMock(stubs="classpath:/stubs")
public class WiremockImportApplicationTests {

	@Autowired
	private Service service;

	@Test
	public void contextLoads() throws Exception {
		assertThat(this.service.go()).isEqualTo("Hello World!");
	}

}</screen>
<note>
<simpara>Actually, WireMock always loads mappings from <literal>src/test/resources/mappings</literal> <emphasis role="strong">as
well as</emphasis> the custom locations in the stubs attribute. To change this behavior, you can
also specify a files root as described in the next section of this document.</simpara>
</note>
</section>
<section xml:id="_using_files_to_specify_the_stub_bodies">
<title>Using Files to Specify the Stub Bodies</title>
<simpara>WireMock can read response bodies from files on the classpath or the file system. In that
case, you can see in the JSON DSL that the response has a <literal>bodyFileName</literal> instead of a
(literal) <literal>body</literal>. The files are resolved relative to a root directory (by default,
<literal>src/test/resources/__files</literal>). To customize this location you can set the <literal>files</literal>
attribute in the <literal>@AutoConfigureWireMock</literal> annotation to the location of the parent
directory (in other words, <literal>__files</literal> is a subdirectory). You can use Spring resource
notation to refer to <literal>file:&#8230;&#8203;</literal> or <literal>classpath:&#8230;&#8203;</literal> locations. Generic URLs are not
supported. A list of values can be given, in which case WireMock resolves the first file
that exists when it needs to find a response body.</simpara>
<note>
<simpara>When you configure the <literal>files</literal> root, it also affects the
automatic loading of stubs, because they come from the root location
in a subdirectory called "mappings". The value of <literal>files</literal> has no
effect on the stubs loaded explicitly from the <literal>stubs</literal> attribute.</simpara>
</note>
</section>
<section xml:id="_alternative_using_junit_rules">
<title>Alternative: Using JUnit Rules</title>
<simpara>For a more conventional WireMock experience, you can use JUnit <literal>@Rules</literal> to start and stop
the server. To do so, use the <literal>WireMockSpring</literal> convenience class to obtain an <literal>Options</literal>
instance, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class WiremockForDocsClassRuleTests {

	// Start WireMock on some dynamic port
	// for some reason `dynamicPort()` is not working properly
	@ClassRule
	public static WireMockClassRule wiremock = new WireMockClassRule(
			WireMockSpring.options().dynamicPort());
	// A service that calls out over HTTP to localhost:${wiremock.port}
	@Autowired
	private Service service;

	// Using the WireMock APIs in the normal way:
	@Test
	public void contextLoads() throws Exception {
		// Stubbing WireMock
		wiremock.stubFor(get(urlEqualTo("/resource"))
				.willReturn(aResponse().withHeader("Content-Type", "text/plain").withBody("Hello World!")));
		// We're asserting if WireMock responded properly
		assertThat(this.service.go()).isEqualTo("Hello World!");
	}

}</programlisting>
<simpara>The <literal>@ClassRule</literal> means that the server shuts down after all the methods in this class
have been run.</simpara>
</section>
<section xml:id="_relaxed_ssl_validation_for_rest_template">
<title>Relaxed SSL Validation for Rest Template</title>
<simpara>WireMock lets you stub a "secure" server with an "https" URL protocol. If your
application wants to contact that stub server in an integration test, it will find that
the SSL certificates are not valid (the usual problem with self-installed certificates).
The best option is often to re-configure the client to use "http". If that&#8217;s not an
option, you can ask Spring to configure an HTTP client that ignores SSL validation errors
(do so only for tests, of course).</simpara>
<simpara>To make this work with minimum fuss, you need to be using the Spring Boot
<literal>RestTemplateBuilder</literal> in your app, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder) {
	return builder.build();
}</programlisting>
<simpara>You need <literal>RestTemplateBuilder</literal> because the builder is passed through callbacks to
initialize it, so the SSL validation can be set up in the client at that point. This
happens automatically in your test if you are using the <literal>@AutoConfigureWireMock</literal>
annotation or the stub runner. If you use the JUnit <literal>@Rule</literal> approach, you need to add the
<literal>@AutoConfigureHttpClient</literal> annotation as well, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest("app.baseUrl=https://localhost:6443")
@AutoConfigureHttpClient
public class WiremockHttpsServerApplicationTests {

	@ClassRule
	public static WireMockClassRule wiremock = new WireMockClassRule(
			WireMockSpring.options().httpsPort(6443));
...
}</programlisting>
<simpara>If you are using <literal>spring-boot-starter-test</literal>, you have the Apache HTTP client on the
classpath and it is selected by the <literal>RestTemplateBuilder</literal> and configured to ignore SSL
errors. If you use the default <literal>java.net</literal> client, you do not need the annotation (but it
won&#8217;t do any harm). There is no support currently for other clients, but it may be added
in future releases.</simpara>
<simpara>To disable the custom <literal>RestTemplateBuilder</literal>, set the <literal>wiremock.rest-template-ssl-enabled</literal>
property to <literal>false</literal>.</simpara>
</section>
<section xml:id="_wiremock_and_spring_mvc_mocks">
<title>WireMock and Spring MVC Mocks</title>
<simpara>Spring Cloud Contract provides a convenience class that can load JSON WireMock stubs into
a Spring <literal>MockRestServiceServer</literal>. The following code shows an example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.NONE)
public class WiremockForDocsMockServerApplicationTests {

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private Service service;

	@Test
	public void contextLoads() throws Exception {
		// will read stubs classpath
		MockRestServiceServer server = WireMockRestServiceServer.with(this.restTemplate)
				.baseUrl("https://example.org").stubs("classpath:/stubs/resource.json")
				.build();
		// We're asserting if WireMock responded properly
		assertThat(this.service.go()).isEqualTo("Hello World");
		server.verify();
	}
}</programlisting>
<simpara>The <literal>baseUrl</literal> value is prepended to all mock calls, and the <literal>stubs()</literal> method takes a stub
path resource pattern as an argument. In the preceding example, the stub defined at
<literal>/stubs/resource.json</literal> is loaded into the mock server. If the <literal>RestTemplate</literal> is asked to
visit <literal><link xl:href="https://example.org/">https://example.org/</link></literal>, it gets the responses as being declared at that URL. More
than one stub pattern can be specified, and each one can be a directory (for a recursive
list of all ".json"), a fixed filename (as in the example above), or an Ant-style
pattern. The JSON format is the normal WireMock format, which you can read about in the
<link xl:href="http://wiremock.org/docs/stubbing/">WireMock website</link>.</simpara>
<simpara>Currently, the Spring Cloud Contract Verifier supports Tomcat, Jetty, and Undertow as
Spring Boot embedded servers, and Wiremock itself has "native" support for a particular
version of Jetty (currently 9.2). To use the native Jetty, you need to add the native
Wiremock dependencies and exclude the Spring Boot container (if there is one).</simpara>
</section>
<section xml:id="_customization_of_wiremock_configuration">
<title>Customization of WireMock configuration</title>
<simpara>You can register a bean of <literal>org.springframework.cloud.contract.wiremock.WireMockConfigurationCustomizer</literal> type
in order to customize the WireMock configuration (e.g. add custom transformers).
Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">		@Bean WireMockConfigurationCustomizer optionsCustomizer() {
			return new WireMockConfigurationCustomizer() {
				@Override public void customize(WireMockConfiguration options) {
// perform your customization here
				}
			};
		}</programlisting>
</section>
<section xml:id="_generating_stubs_using_rest_docs">
<title>Generating Stubs using REST Docs</title>
<simpara><link xl:href="https://projects.spring.io/spring-restdocs">Spring REST Docs</link> can be used to generate
documentation (for example in Asciidoctor format) for an HTTP API with Spring MockMvc
or <literal>WebTestClient</literal> or
Rest Assured. At the same time that you generate documentation for your API, you can also
generate WireMock stubs by using Spring Cloud Contract WireMock. To do so, write your
normal REST Docs test cases and use <literal>@AutoConfigureRestDocs</literal> to have stubs be
automatically generated in the REST Docs output directory. The following code shows an
example using <literal>MockMvc</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureRestDocs(outputDir = "target/snippets")
@AutoConfigureMockMvc
public class ApplicationTests {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void contextLoads() throws Exception {
		mockMvc.perform(get("/resource"))
				.andExpect(content().string("Hello World"))
				.andDo(document("resource"));
	}
}</programlisting>
<simpara>This test generates a WireMock stub at "target/snippets/stubs/resource.json". It matches
all GET requests to the "/resource" path. The same example with <literal>WebTestClient</literal> (used
for testing Spring WebFlux applications) would look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureRestDocs(outputDir = "target/snippets")
@AutoConfigureWebTestClient
public class ApplicationTests {

	@Autowired
	private WebTestClient client;

	@Test
	public void contextLoads() throws Exception {
		client.get().uri("/resource").exchange()
				.expectBody(String.class).isEqualTo("Hello World")
 				.consumeWith(document("resource"));
	}
}</programlisting>
<simpara>Without any additional configuration, these tests create a stub with a request matcher
for the HTTP method and all headers except "host" and "content-length". To match the
request more precisely (for example, to match the body of a POST or PUT), we need to
explicitly create a request matcher. Doing so has two effects:</simpara>
<itemizedlist>
<listitem>
<simpara>Creating a stub that matches only in the way you specify.</simpara>
</listitem>
<listitem>
<simpara>Asserting that the request in the test case also matches the same conditions.</simpara>
</listitem>
</itemizedlist>
<simpara>The main entry point for this feature is <literal>WireMockRestDocs.verify()</literal>, which can be used
as a substitute for the <literal>document()</literal> convenience method, as shown in the following
example:</simpara>
<programlisting language="java" linenumbering="unnumbered">import static org.springframework.cloud.contract.wiremock.restdocs.WireMockRestDocs.verify;</programlisting>
<screen>@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureRestDocs(outputDir = "target/snippets")
@AutoConfigureMockMvc
public class ApplicationTests {

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void contextLoads() throws Exception {
		mockMvc.perform(post("/resource")
                .content("{\"id\":\"123456\",\"message\":\"Hello World\"}"))
				.andExpect(status().isOk())
				.andDo(verify().jsonPath("$.id")
                        .stub("resource"));
	}
}</screen>
<simpara>This contract specifies that any valid POST with an "id" field receives the response
defined in this test. You can chain together calls to <literal>.jsonPath()</literal> to add additional
matchers. If JSON Path is unfamiliar, The <link xl:href="https://github.com/jayway/JsonPath">JayWay
documentation</link> can help you get up to speed. The <literal>WebTestClient</literal> version of this test
has a similar <literal>verify()</literal> static helper that you insert in the same place.</simpara>
<simpara>Instead of the <literal>jsonPath</literal> and <literal>contentType</literal> convenience methods, you can also use the
WireMock APIs to verify that the request matches the created stub, as shown in the
following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@Test
public void contextLoads() throws Exception {
	mockMvc.perform(post("/resource")
               .content("{\"id\":\"123456\",\"message\":\"Hello World\"}"))
			.andExpect(status().isOk())
			.andDo(verify()
					.wiremock(WireMock.post(
						urlPathEquals("/resource"))
						.withRequestBody(matchingJsonPath("$.id"))
                       .stub("post-resource"));
}</programlisting>
<simpara>The WireMock API is rich. You can match headers, query parameters, and request body by
regex as well as by JSON path. These features can be used to create stubs with a wider
range of parameters. The above example generates a stub resembling the following example:</simpara>
<formalpara>
<title>post-resource.json</title>
<para>
<programlisting language="json" linenumbering="unnumbered">{
  "request" : {
    "url" : "/resource",
    "method" : "POST",
    "bodyPatterns" : [ {
      "matchesJsonPath" : "$.id"
    }]
  },
  "response" : {
    "status" : 200,
    "body" : "Hello World",
    "headers" : {
      "X-Application-Context" : "application:-1",
      "Content-Type" : "text/plain"
    }
  }
}</programlisting>
</para>
</formalpara>
<note>
<simpara>You can use either the <literal>wiremock()</literal> method or the <literal>jsonPath()</literal> and <literal>contentType()</literal>
methods to create request matchers, but you can&#8217;t use both approaches.</simpara>
</note>
<simpara>On the consumer side, you can make the <literal>resource.json</literal> generated earlier in this section
available on the classpath (by
<link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_publishing_stubs_as_jars">publishing
stubs as JARs</link>, for example). After that, you can create a stub using WireMock in a
number of different ways, including by using
<literal>@AutoConfigureWireMock(stubs="classpath:resource.json")</literal>, as described earlier in this
document.</simpara>
</section>
<section xml:id="_generating_contracts_by_using_rest_docs">
<title>Generating Contracts by Using REST Docs</title>
<simpara>You can also generate Spring Cloud Contract DSL files and documentation with Spring REST
Docs. If you do so in combination with Spring Cloud WireMock, you get both the contracts
and the stubs.</simpara>
<simpara>Why would you want to use this feature? Some people in the community asked questions
about a situation in which they would like to move to DSL-based contract definition,
but they already have a lot of Spring MVC tests. Using this feature lets you generate
the contract files that you can later modify and move to folders (defined in your
configuration) so that the plugin finds them.</simpara>
<tip>
<simpara>You might wonder why this functionality is in the WireMock module. The functionality
is there because it makes sense to generate both the contracts and the stubs.</simpara>
</tip>
<simpara>Consider the following test:</simpara>
<programlisting language="java" linenumbering="unnumbered">		this.mockMvc.perform(post("/foo")
					.accept(MediaType.APPLICATION_PDF)
					.accept(MediaType.APPLICATION_JSON)
					.contentType(MediaType.APPLICATION_JSON)
					.content("{\"foo\": 23, \"bar\" : \"baz\" }"))
				.andExpect(status().isOk())
				.andExpect(content().string("bar"))
				// first WireMock
				.andDo(WireMockRestDocs.verify()
						.jsonPath("$[?(@.foo &gt;= 20)]")
						.jsonPath("$[?(@.bar in ['baz','bazz','bazzz'])]")
						.contentType(MediaType.valueOf("application/json"))
						.stub("shouldGrantABeerIfOldEnough"))
				// then Contract DSL documentation
				.andDo(document("index", SpringCloudContractRestDocs.dslContract()));</programlisting>
<simpara>The preceding test creates the stub presented in the previous section, generating both
the contract and a documentation file.</simpara>
<simpara>The contract is called <literal>index.groovy</literal> and might look like the following example:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">import org.springframework.cloud.contract.spec.Contract

Contract.make {
    request {
        method 'POST'
        url '/foo'
        body('''
            {"foo": 23 }
        ''')
        headers {
            header('''Accept''', '''application/json''')
            header('''Content-Type''', '''application/json''')
        }
    }
    response {
        status OK()
        body('''
        bar
        ''')
        headers {
            header('''Content-Type''', '''application/json;charset=UTF-8''')
            header('''Content-Length''', '''3''')
        }
        testMatchers {
            jsonPath('$[?(@.foo &gt;= 20)]', byType())
        }
    }
}</programlisting>
<simpara>The generated document (formatted in Asciidoc in this case) contains a formatted
contract. The location of this file would be <literal>index/dsl-contract.adoc</literal>.</simpara>
</section>
</chapter>
<chapter xml:id="_migrations">
<title>Migrations</title>
<tip>
<simpara>For up to date migration guides please visit
the project&#8217;s <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/wiki/">wiki page</link>.</simpara>
</tip>
<simpara>This section covers migrating from one version of Spring Cloud Contract Verifier to the
next version. It covers the following versions upgrade paths:</simpara>
<section xml:id="cloud-verifier-1.0-1.1">
<title>1.0.x &#8594; 1.1.x</title>
<simpara>This section covers upgrading from version 1.0 to version 1.1.</simpara>
<section xml:id="_new_structure_of_generated_stubs">
<title>New structure of generated stubs</title>
<simpara>In <literal>1.1.x</literal> we have introduced a change to the structure of generated stubs. If you have
been using the  <literal>@AutoConfigureWireMock</literal> notation to use the stubs from the classpath,
it no longer works. The following example shows how the <literal>@AutoConfigureWireMock</literal> notation
used to work:</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureWireMock(stubs = "classpath:/customer-stubs/mappings", port = 8084)</programlisting>
<simpara>You must either change the location of the stubs to:
<literal>classpath:&#8230;&#8203;/META-INF/groupId/artifactId/version/mappings</literal> or use the new
classpath-based <literal>@AutoConfigureStubRunner</literal>, as shown in the following example:</simpara>
<programlisting language="java" linenumbering="unnumbered">@AutoConfigureWireMock(stubs = "classpath:customer-stubs/META-INF/travel.components/customer-contract/1.0.2-SNAPSHOT/mappings/", port = 8084)</programlisting>
<simpara>If you do not want to use <literal>@AutoConfigureStubRunner</literal> and you want to remain with the old
structure, set your plugin tasks accordingly. The following example would work for the
structure presented in the previous snippet.</simpara>
<formalpara role="primary">
<title>Maven</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- start of pom.xml --&gt;

&lt;properties&gt;
    &lt;!-- we don't want the verifier to do a jar for us --&gt;
    &lt;spring.cloud.contract.verifier.skip&gt;true&lt;/spring.cloud.contract.verifier.skip&gt;
&lt;/properties&gt;

&lt;!-- ... --&gt;

&lt;!-- You need to set up the assembly plugin --&gt;
&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
            &lt;executions&gt;
                &lt;execution&gt;
                    &lt;id&gt;stub&lt;/id&gt;
                    &lt;phase&gt;prepare-package&lt;/phase&gt;
                    &lt;goals&gt;
                        &lt;goal&gt;single&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;inherited&gt;false&lt;/inherited&gt;
                    &lt;configuration&gt;
                        &lt;attach&gt;true&lt;/attach&gt;
                        &lt;descriptor&gt;$../../../../src/assembly/stub.xml&lt;/descriptor&gt;
                    &lt;/configuration&gt;
                &lt;/execution&gt;
            &lt;/executions&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;!-- end of pom.xml --&gt;

&lt;!-- start of stub.xml--&gt;

&lt;assembly
	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 https://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
	&lt;id&gt;stubs&lt;/id&gt;
	&lt;formats&gt;
		&lt;format&gt;jar&lt;/format&gt;
	&lt;/formats&gt;
	&lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
	&lt;fileSets&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;${project.build.directory}/snippets/stubs&lt;/directory&gt;
			&lt;outputDirectory&gt;customer-stubs/mappings&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**/*&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
		&lt;fileSet&gt;
			&lt;directory&gt;$../../../../src/test/resources/contracts&lt;/directory&gt;
			&lt;outputDirectory&gt;customer-stubs/contracts&lt;/outputDirectory&gt;
			&lt;includes&gt;
				&lt;include&gt;**/*.groovy&lt;/include&gt;
			&lt;/includes&gt;
		&lt;/fileSet&gt;
	&lt;/fileSets&gt;
&lt;/assembly&gt;

&lt;!-- end of stub.xml--&gt;</programlisting>
</para>
</formalpara>
<formalpara role="secondary">
<title>Gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">task copyStubs(type: Copy, dependsOn: 'generateWireMockClientStubs') {
//    Preserve directory structure from 1.0.X of spring-cloud-contract
    from "${project.buildDir}/resources/main/customer-stubs/META-INF/${project.group}/${project.name}/${project.version}"
    into "${project.buildDir}/resources/main/customer-stubs"
}</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="cloud-verifier-1.1-1.2">
<title>1.1.x &#8594; 1.2.x</title>
<simpara>This section covers upgrading from version 1.1 to version 1.2.</simpara>
<section xml:id="_custom_literal_httpserverstub_literal">
<title>Custom <literal>HttpServerStub</literal></title>
<simpara><literal>HttpServerStub</literal> includes a method that was not in version 1.1. The method is
<literal>String registeredMappings()</literal> If you have classes that implement <literal>HttpServerStub</literal>, you
now have to implement the <literal>registeredMappings()</literal> method. It should return a <literal>String</literal>
representing all mappings available in a single <literal>HttpServerStub</literal>.</simpara>
<simpara>See <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/issues/355">issue 355</link> for more
detail.</simpara>
</section>
<section xml:id="_new_packages_for_generated_tests">
<title>New packages for generated tests</title>
<simpara>The flow for setting the generated tests package name will look like this:</simpara>
<itemizedlist>
<listitem>
<simpara>Set <literal>basePackageForTests</literal></simpara>
</listitem>
<listitem>
<simpara>If <literal>basePackageForTests</literal> was not set, pick the package from <literal>baseClassForTests</literal></simpara>
</listitem>
<listitem>
<simpara>If <literal>baseClassForTests</literal> was not set, pick <literal>packageWithBaseClasses</literal></simpara>
</listitem>
<listitem>
<simpara>If nothing got set, pick the default value:
<literal>org.springframework.cloud.contract.verifier.tests</literal></simpara>
</listitem>
</itemizedlist>
<simpara>See <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/issues/260">issue 260</link> for more
detail.</simpara>
</section>
<section xml:id="_new_methods_in_templateprocessor">
<title>New Methods in TemplateProcessor</title>
<simpara>In order to add support for <literal>fromRequest.path</literal>, the following methods had to be added to the
<literal>TemplateProcessor</literal> interface:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>path()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>path(int index)</literal></simpara>
</listitem>
</itemizedlist>
<simpara>See <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/issues/388">issue 388</link> for more
detail.</simpara>
</section>
<section xml:id="_restassured_3_0">
<title>RestAssured 3.0</title>
<simpara>Rest Assured, used in the generated test classes, got bumped to <literal>3.0</literal>. If
you manually set versions of Spring Cloud Contract and the release train
you might see the following exception:</simpara>
<programlisting language="bash" linenumbering="unnumbered">Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile (default-testCompile) on project some-project: Compilation failure: Compilation failure:
[ERROR] /some/path/SomeClass.java:[4,39] package com.jayway.restassured.response does not exist</programlisting>
<simpara>This exception will occur due to the fact that the tests got generated with
an old version of plugin and at test execution time you have an incompatible
version of the release train (and vice versa).</simpara>
<simpara>Done via <link xl:href="https://github.com/spring-cloud/spring-cloud-contract/issues/267">issue 267</link></simpara>
</section>
</section>
<section xml:id="cloud-verifier-1.2-2.0">
<title>1.2.x &#8594; 2.0.x</title>
<section xml:id="_no_camel_support">
<title>No Camel support</title>
<simpara>We will add back Apache Camel support only after this <link xl:href="https://issues.apache.org/jira/browse/CAMEL-11430">issue</link>
gets fixed</simpara>
</section>
</section>
</chapter>
<chapter xml:id="_links">
<title>Links</title>
<simpara>The following links may be helpful when working with Spring Cloud Contract Verifier:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/spring-cloud/spring-cloud-contract/">Spring Cloud Contract Github
Repository</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/spring-cloud-samples/spring-cloud-contract-samples/">Spring Cloud
Contract Samples</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html">Spring Cloud
Contract Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html/deprecated">Accurest
Legacy Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html/#spring-cloud-contract-stub-runner">Spring
Cloud Contract Stub Runner Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html/#stub-runner-for-messaging">Spring
Cloud Contract Stub Runner Messaging Documentation</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://gitter.im/spring-cloud/spring-cloud-contract">Spring Cloud Contract Gitter</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/">Spring
Cloud Contract Maven Plugin</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=sAAklvxmPmk">Spring Cloud Contract WJUG Presentation by
Marcin Grzejszczak</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</part>
<part xml:id="_spring_cloud_vault">
<title>Spring Cloud Vault</title>
<partintro>
<simpara>&#169; 2016-2018 The original authors.</simpara>
<note>
<simpara><emphasis>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</emphasis></simpara>
</note>
<simpara>Spring Cloud Vault Config provides client-side support for externalized configuration in a distributed system. With <link xl:href="https://www.vaultproject.io">HashiCorp&#8217;s Vault</link> you have a central place to manage external secret properties for applications across all environments. Vault can manage static and dynamic secrets such as username/password for remote applications/resources and provide credentials for external services such as MySQL, PostgreSQL, Apache Cassandra, MongoDB, Consul, AWS and more.</simpara>
</partintro>
<chapter xml:id="_quick_start_4">
<title>Quick Start</title>
<simpara><emphasis role="strong">Prerequisites</emphasis></simpara>
<simpara>To get started with Vault and this guide you need a
*NIX-like operating systems that provides:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>wget</literal>, <literal>openssl</literal> and <literal>unzip</literal></simpara>
</listitem>
<listitem>
<simpara>at least Java 7 and a properly configured <literal>JAVA_HOME</literal> environment variable</simpara>
</listitem>
</itemizedlist>
<simpara><emphasis role="strong">Install Vault</emphasis></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ src/test/bash/install_vault.sh</programlisting>
<simpara><emphasis role="strong">Create SSL certificates for Vault</emphasis></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ src/test/bash/create_certificates.sh</programlisting>
<note>
<simpara><literal>create_certificates.sh</literal> creates certificates in <literal>work/ca</literal> and a JKS truststore <literal>work/keystore.jks</literal>. If you want to run Spring Cloud Vault using this quickstart guide you need to configure the truststore the <literal>spring.cloud.vault.ssl.trust-store</literal> property to <literal>file:work/keystore.jks</literal>.</simpara>
</note>
<simpara xml:id="quickstart.vault.start"><emphasis role="strong">Start Vault server</emphasis></simpara>
<programlisting language="bash" linenumbering="unnumbered">$ src/test/bash/local_run_vault.sh</programlisting>
<simpara>Vault is started listening on <literal>0.0.0.0:8200</literal> using the <literal>inmem</literal> storage and
<literal>https</literal>.
Vault is sealed and not initialized when starting up.</simpara>
<note>
<simpara>If you want to run tests, leave Vault uninitialized. The tests will
initialize Vault and create a root token <literal>00000000-0000-0000-0000-000000000000</literal>.</simpara>
</note>
<simpara>If you want to use Vault for your application or give it a try then you need to initialize it first.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ export VAULT_ADDR="https://localhost:8200"
$ export VAULT_SKIP_VERIFY=true # Don't do this for production
$ vault init</programlisting>
<simpara>You should see something like:</simpara>
<programlisting language="bash" linenumbering="unnumbered">Key 1: 7149c6a2e16b8833f6eb1e76df03e47f6113a3288b3093faf5033d44f0e70fe701
Key 2: 901c534c7988c18c20435a85213c683bdcf0efcd82e38e2893779f152978c18c02
Key 3: 03ff3948575b1165a20c20ee7c3e6edf04f4cdbe0e82dbff5be49c63f98bc03a03
Key 4: 216ae5cc3ddaf93ceb8e1d15bb9fc3176653f5b738f5f3d1ee00cd7dccbe926e04
Key 5: b2898fc8130929d569c1677ee69dc5f3be57d7c4b494a6062693ce0b1c4d93d805
Initial Root Token: 19aefa97-cccc-bbbb-aaaa-225940e63d76

Vault initialized with 5 keys and a key threshold of 3. Please
securely distribute the above keys. When the Vault is re-sealed,
restarted, or stopped, you must provide at least 3 of these keys
to unseal it again.

Vault does not store the master key. Without at least 3 keys,
your Vault will remain permanently sealed.</programlisting>
<simpara>Vault will initialize and return a set of unsealing keys and the root token.
Pick 3 keys and unseal Vault. Store the Vault token in the <literal>VAULT_TOKEN</literal>
 environment variable.</simpara>
<programlisting language="bash" linenumbering="unnumbered">$ vault unseal (Key 1)
$ vault unseal (Key 2)
$ vault unseal (Key 3)
$ export VAULT_TOKEN=(Root token)
# Required to run Spring Cloud Vault tests after manual initialization
$ vault token-create -id="00000000-0000-0000-0000-000000000000" -policy="root"</programlisting>
<simpara>Spring Cloud Vault accesses different resources. By default, the secret
backend is enabled which accesses secret config settings via JSON endpoints.</simpara>
<simpara>The HTTP service has resources in the form:</simpara>
<screen>/secret/{application}/{profile}
/secret/{application}
/secret/{defaultContext}/{profile}
/secret/{defaultContext}</screen>
<simpara>where the "application" is injected as the <literal>spring.application.name</literal> in the
<literal>SpringApplication</literal> (i.e. what is normally "application" in a regular
Spring Boot app), "profile" is an active profile (or comma-separated
list of properties). Properties retrieved from Vault will be used "as-is"
without further prefixing of the property names.</simpara>
</chapter>
<chapter xml:id="_client_side_usage_2">
<title>Client Side Usage</title>
<simpara>To use these features in an application, just build it as a Spring
Boot application that depends on <literal>spring-cloud-vault-config</literal> (e.g. see
the test cases). Example Maven configuration:</simpara>
<example>
<title>pom.xml</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;
    &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-vault-config&lt;/artifactId&gt;
        &lt;version&gt;Finchley.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;

&lt;!-- repositories also needed for snapshots and milestones --&gt;</programlisting>
</example>
<simpara>Then you can create a standard Spring Boot application, like this simple HTTP server:</simpara>
<informalexample>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
@RestController
public class Application {

    @RequestMapping("/")
    public String home() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}</programlisting>
</informalexample>
<simpara>When it runs it will pick up the external configuration from the
default local Vault server on port <literal>8200</literal> if it is running. To modify
the startup behavior you can change the location of the Vault server
using <literal>bootstrap.properties</literal> (like <literal>application.properties</literal> but for
the bootstrap phase of an application context), e.g.</simpara>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    host: localhost
    port: 8200
    scheme: https
    uri: https://localhost:8200
    connection-timeout: 5000
    read-timeout: 15000
    config:
        order: -10</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>host</literal> sets the hostname of the Vault host. The host name will be used
for SSL certificate validation</simpara>
</listitem>
<listitem>
<simpara><literal>port</literal> sets the Vault port</simpara>
</listitem>
<listitem>
<simpara><literal>scheme</literal> setting the scheme to <literal>http</literal> will use plain HTTP.
Supported schemes are <literal>http</literal> and <literal>https</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>uri</literal> configure the Vault endpoint with an URI. Takes precedence over host/port/scheme configuration</simpara>
</listitem>
<listitem>
<simpara><literal>connection-timeout</literal> sets the connection timeout in milliseconds</simpara>
</listitem>
<listitem>
<simpara><literal>read-timeout</literal> sets the read timeout in milliseconds</simpara>
</listitem>
<listitem>
<simpara><literal>config.order</literal> sets the order for the property source</simpara>
</listitem>
</itemizedlist>
<simpara>Enabling further integrations requires additional dependencies and
configuration. Depending on how you have set up Vault you might need
additional configuration like
<link xl:href="https://cloud.spring.io/spring-cloud-vault/spring-cloud-vault.html#vault.config.ssl">SSL</link> and
<link xl:href="https://cloud.spring.io/spring-cloud-vault/spring-cloud-vault.html#vault.config.authentication">authentication</link>.</simpara>
<simpara>If the application imports the <literal>spring-boot-starter-actuator</literal> project, the
status of the vault server will be available via the <literal>/health</literal> endpoint.</simpara>
<simpara>The vault health indicator can be enabled or disabled through the
property <literal>health.vault.enabled</literal> (default <literal>true</literal>).</simpara>
<section xml:id="_authentication_2">
<title>Authentication</title>
<simpara>Vault requires an <link xl:href="https://www.vaultproject.io/docs/concepts/auth.html">authentication mechanism</link> to <link xl:href="https://www.vaultproject.io/docs/concepts/tokens.html">authorize client requests</link>.</simpara>
<simpara>Spring Cloud Vault supports multiple <link xl:href="https://cloud.spring.io/spring-cloud-vault/spring-cloud-vault.html#vault.config.authentication">authentication mechanisms</link> to authenticate applications with Vault.</simpara>
<simpara>For a quickstart, use the root token printed by the <link linkend="quickstart.vault.start">Vault initialization</link>.</simpara>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    token: 19aefa97-cccc-bbbb-aaaa-225940e63d76</programlisting>
</example>
<warning>
<simpara>Consider carefully your security requirements. Static token authentication is fine if you want quickly get started with Vault, but a static token is not protected any further. Any disclosure to unintended parties allows Vault use with the associated token roles.</simpara>
</warning>
</section>
</chapter>
<chapter xml:id="vault.config.authentication">
<title>Authentication methods</title>
<simpara>Different organizations have different requirements for security
and authentication. Vault reflects that need by shipping multiple authentication
methods. Spring Cloud Vault supports token and AppId authentication.</simpara>
<section xml:id="vault.config.authentication.token">
<title>Token authentication</title>
<simpara>Tokens are the core method for authentication within Vault.
Token authentication requires a static token to be provided using the
<link xl:href="https://github.com/spring-cloud/spring-cloud-commons/blob/master/docs/src/main/asciidoc/spring-cloud-commons.adoc#the-bootstrap-application-context">Bootstrap Application Context</link>.</simpara>
<note>
<simpara>Token authentication is the default authentication method.
If a token is disclosed an unintended party gains access to Vault and
can access secrets for the intended client.</simpara>
</note>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: TOKEN
    token: 00000000-0000-0000-0000-000000000000</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>authentication</literal> setting this value to <literal>TOKEN</literal> selects the Token
authentication method</simpara>
</listitem>
<listitem>
<simpara><literal>token</literal> sets the static token to use</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/concepts/tokens.html">Vault Documentation: Tokens</link></simpara>
</section>
<section xml:id="vault.config.authentication.appid">
<title>AppId authentication</title>
<simpara>Vault supports <link xl:href="https://www.vaultproject.io/docs/auth/app-id.html">AppId</link>
authentication that consists of two hard to guess tokens. The AppId
defaults to <literal>spring.application.name</literal> that is statically configured.
The second token is the UserId which is a part determined by the application,
usually related to the runtime environment. IP address, Mac address or a
Docker container name are good examples. Spring Cloud Vault Config supports
IP address, Mac address and static UserId&#8217;s (e.g. supplied via System properties).
The IP and Mac address are represented as Hex-encoded SHA256 hash.</simpara>
<simpara>IP address-based UserId&#8217;s use the local host&#8217;s IP address.</simpara>
<example>
<title>bootstrap.yml using SHA256 IP-Address UserId&#8217;s</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: APPID
    app-id:
        user-id: IP_ADDRESS</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>authentication</literal> setting this value to <literal>APPID</literal> selects the AppId
authentication method</simpara>
</listitem>
<listitem>
<simpara><literal>app-id-path</literal> sets the path of the AppId mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>user-id</literal> sets the UserId method. Possible values are <literal>IP_ADDRESS</literal>,
<literal>MAC_ADDRESS</literal> or a class name implementing a custom <literal>AppIdUserIdMechanism</literal></simpara>
</listitem>
</itemizedlist>
<simpara>The corresponding command to generate the IP address UserId from a command line is:</simpara>
<screen>$ echo -n 192.168.99.1 | sha256sum</screen>
<note>
<simpara>Including the line break of <literal>echo</literal> leads to a different hash value
so make sure to include the <literal>-n</literal> flag.</simpara>
</note>
<simpara>Mac address-based UserId&#8217;s obtain their network device from the
localhost-bound device. The configuration also allows specifying
a <literal>network-interface</literal> hint to pick the right device. The value of
<literal>network-interface</literal> is optional and can be either an interface
name or interface index (0-based).</simpara>
<example>
<title>bootstrap.yml using SHA256 Mac-Address UserId&#8217;s</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: APPID
    app-id:
        user-id: MAC_ADDRESS
        network-interface: eth0</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>network-interface</literal> sets network interface to obtain the physical address</simpara>
</listitem>
</itemizedlist>
<simpara>The corresponding command to generate the IP address UserId from a command line is:</simpara>
<screen>$ echo -n 0AFEDE1234AC | sha256sum</screen>
<note>
<simpara>The Mac address is specified uppercase and without colons.
Including the line break of <literal>echo</literal> leads to a different hash value
so make sure to include the <literal>-n</literal> flag.</simpara>
</note>
<section xml:id="_custom_userid">
<title>Custom UserId</title>
<simpara>The UserId generation is an open mechanism. You can set
<literal>spring.cloud.vault.app-id.user-id</literal> to any string and the configured
value will be used as static UserId.</simpara>
<simpara>A more advanced approach lets you set <literal>spring.cloud.vault.app-id.user-id</literal> to a
classname. This class must be on your classpath and must implement
the <literal>org.springframework.cloud.vault.AppIdUserIdMechanism</literal> interface
and the <literal>createUserId</literal> method. Spring Cloud Vault will obtain the UserId
by calling <literal>createUserId</literal> each time it authenticates using AppId to
obtain a token.</simpara>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: APPID
    app-id:
        user-id: com.examlple.MyUserIdMechanism</programlisting>
</example>
<example>
<title>MyUserIdMechanism.java</title>
<programlisting language="yaml" linenumbering="unnumbered">public class MyUserIdMechanism implements AppIdUserIdMechanism {

  @Override
  public String createUserId() {
    String userId = ...
    return userId;
  }
}</programlisting>
</example>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/auth/app-id.html">Vault Documentation: Using the App ID auth backend</link></simpara>
</section>
</section>
<section xml:id="_approle_authentication">
<title>AppRole authentication</title>
<simpara><link xl:href="https://www.vaultproject.io/docs/auth/app-id.html">AppRole</link> is intended for machine
authentication, like the deprecated (since Vault 0.6.1) <xref linkend="vault.config.authentication.appid"/>.
AppRole authentication consists of two hard to guess (secret) tokens: RoleId and SecretId.</simpara>
<simpara>Spring Vault supports various AppRole scenarios (push/pull mode and wrapped).</simpara>
<simpara>RoleId and optionally SecretId must be provided by configuration,
Spring Vault will not look up these or create a custom SecretId.</simpara>
<example>
<title>bootstrap.yml with AppRole authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: APPROLE
    app-role:
        role-id: bde2076b-cccb-3cf0-d57e-bca7b1e83a52</programlisting>
</example>
<simpara>The following scenarios are supported along the required configuration details:</simpara>
<table frame="topbot" rowsep="1" colsep="1">
<title>Configuration</title>
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Method</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">RoleId</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">SecretId</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">RoleName</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Token</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided RoleId/SecretId</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided RoleId without SecretId</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided RoleId, Pull SecretId</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pull RoleId, provided SecretId</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Full Pull Mode</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped RoleId, provided SecretId</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided RoleId, wrapped SecretId</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<table frame="topbot" rowsep="1" colsep="1">
<title>Pull/Push/Wrapped Matrix</title>
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">RoleId</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">SecretId</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><emphasis role="strong">Supported</emphasis></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>Absent</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>❌</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>Absent</simpara></entry>
<entry align="left" valign="top"><simpara>❌</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>Provided</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>Pull</simpara></entry>
<entry align="left" valign="top"><simpara>❌</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>✅</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Wrapped</simpara></entry>
<entry align="left" valign="top"><simpara>Absent</simpara></entry>
<entry align="left" valign="top"><simpara>❌</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<note>
<simpara>You can use still all combinations of push/pull/wrapped modes by providing a configured <literal>AppRoleAuthentication</literal> bean within the boostrap context. Spring Cloud Vault cannot derive all possible AppRole combinations from the configuration properties.</simpara>
</note>
<example>
<title>bootstrap.yml with all AppRole authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: APPROLE
    app-role:
        role-id: bde2076b-cccb-3cf0-d57e-bca7b1e83a52
        secret-id: 1696536f-1976-73b1-b241-0b4213908d39
        role: my-role
        app-role-path: approle</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>role-id</literal> sets the RoleId.</simpara>
</listitem>
<listitem>
<simpara><literal>secret-id</literal> sets the SecretId. SecretId can be omitted if AppRole is configured without requiring SecretId (See <literal>bind_secret_id</literal>).</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal>: sets the AppRole name for pull mode.</simpara>
</listitem>
<listitem>
<simpara><literal>app-role-path</literal> sets the path of the approle authentication mount to use.</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/auth/approle.html">Vault Documentation: Using the AppRole auth backend</link></simpara>
</section>
<section xml:id="vault.config.authentication.awsec2">
<title>AWS-EC2 authentication</title>
<simpara>The <link xl:href="https://www.vaultproject.io/docs/auth/aws-ec2.html">aws-ec2</link>
auth backend provides a secure introduction mechanism
for AWS EC2 instances, allowing automated retrieval of a Vault
token. Unlike most Vault authentication backends, this backend
does not require first-deploying, or provisioning security-sensitive
credentials (tokens, username/password, client certificates, etc.).
Instead, it treats AWS as a Trusted Third Party and uses the
cryptographically signed dynamic metadata information that uniquely
represents each EC2 instance.</simpara>
<example>
<title>bootstrap.yml using AWS-EC2 Authentication</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: AWS_EC2</programlisting>
</example>
<simpara>AWS-EC2 authentication enables nonce by default to follow
the Trust On First Use (TOFU) principle. Any unintended party that
gains access to the PKCS#7 identity metadata can authenticate
against Vault.</simpara>
<simpara>During the first login, Spring Cloud Vault generates a nonce
that is stored in the auth backend aside the instance Id.
Re-authentication requires the same nonce to be sent. Any other
party does not have the nonce and can raise an alert in Vault for
further investigation.</simpara>
<simpara>The nonce is kept in memory and is lost during application restart.
You can configure a static nonce with <literal>spring.cloud.vault.aws-ec2.nonce</literal>.</simpara>
<simpara>AWS-EC2 authentication roles are optional and default to the AMI.
You can configure the authentication role by setting the
<literal>spring.cloud.vault.aws-ec2.role</literal> property.</simpara>
<example>
<title>bootstrap.yml with configured role</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: AWS_EC2
    aws-ec2:
        role: application-server</programlisting>
</example>
<example>
<title>bootstrap.yml with all AWS EC2 authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: AWS_EC2
    aws-ec2:
        role: application-server
        aws-ec2-path: aws-ec2
        identity-document: http://...
        nonce: my-static-nonce</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>authentication</literal> setting this value to <literal>AWS_EC2</literal> selects the AWS EC2
authentication method</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the name of the role against which the login is being attempted.</simpara>
</listitem>
<listitem>
<simpara><literal>aws-ec2-path</literal> sets the path of the AWS EC2 mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>identity-document</literal> sets URL of the PKCS#7 AWS EC2 identity document</simpara>
</listitem>
<listitem>
<simpara><literal>nonce</literal> used for AWS-EC2 authentication. An empty nonce defaults to nonce generation</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/auth/aws.html">Vault Documentation: Using the aws auth backend</link></simpara>
</section>
<section xml:id="vault.config.authentication.awsiam">
<title>AWS-IAM authentication</title>
<simpara>The <link xl:href="https://www.vaultproject.io/docs/auth/aws-ec2.html">aws</link> backend provides a secure
authentication mechanism for AWS IAM roles, allowing the automatic authentication with
vault based on the current IAM role of the running application.
 Unlike most Vault authentication backends, this backend
does not require first-deploying, or provisioning security-sensitive
credentials (tokens, username/password, client certificates, etc.).
Instead, it treats AWS as a Trusted Third Party and uses the
4 pieces of information signed by the caller with their IAM credentials
 to verify that the caller is indeed using that IAM role.</simpara>
<simpara>The current IAM role the application is running in is automatically calculated.
If you are running your application on AWS ECS then the application
will use the IAM role assigned to the ECS task of the running container.
If you are running your application naked on top of an EC2 instance then
the IAM role used will be the one assigned to the EC2 instance.</simpara>
<simpara>When using the AWS-IAM authentication you must create a role in Vault
and assign it to your IAM role. An empty <literal>role</literal> defaults to
the friendly name the current IAM role.</simpara>
<example>
<title>bootstrap.yml with required AWS-IAM Authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: AWS_IAM</programlisting>
</example>
<example>
<title>bootstrap.yml with all AWS-IAM Authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: AWS_IAM
    aws-iam:
        role: my-dev-role
        aws-path: aws
        server-id: some.server.name</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>role</literal> sets the name of the role against which the login is being attempted. This should be bound to your IAM role. If one is not supplied then the friendly name of the current IAM user will be used as the vault role.</simpara>
</listitem>
<listitem>
<simpara><literal>aws-path</literal> sets the path of the AWS mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>server-id</literal> sets the value to use for the <literal>X-Vault-AWS-IAM-Server-ID</literal> header preventing certain types of replay attacks.</simpara>
</listitem>
</itemizedlist>
<simpara>AWS-IAM requires the AWS Java SDK dependency (<literal>com.amazonaws:aws-java-sdk-core</literal>)
as the authentication implementation uses AWS SDK types for credentials and request signing.</simpara>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/auth/aws.html">Vault Documentation: Using the aws auth backend</link></simpara>
</section>
<section xml:id="vault.config.authentication.clientcert">
<title>TLS certificate authentication</title>
<simpara>The <literal>cert</literal> auth backend allows authentication using SSL/TLS client
certificates that are either signed by a CA or self-signed.</simpara>
<simpara>To enable <literal>cert</literal> authentication you need to:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Use SSL, see <xref linkend="vault.config.ssl"/></simpara>
</listitem>
<listitem>
<simpara>Configure a Java <literal>Keystore</literal> that contains the client
certificate and the private key</simpara>
</listitem>
<listitem>
<simpara>Set the <literal>spring.cloud.vault.authentication</literal> to <literal>CERT</literal></simpara>
</listitem>
</orderedlist>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: CERT
    ssl:
        key-store: classpath:keystore.jks
        key-store-password: changeit
        cert-auth-path: cert</programlisting>
</example>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/auth/cert.html">Vault Documentation: Using the Cert auth backend</link></simpara>
</section>
<section xml:id="vault.config.authentication.cubbyhole">
<title>Cubbyhole authentication</title>
<simpara>Cubbyhole authentication uses Vault primitives to provide a secured authentication
workflow. Cubbyhole authentication uses tokens as primary login method.
An ephemeral token is used to obtain a second, login VaultToken from Vault&#8217;s
Cubbyhole secret backend. The login token is usually longer-lived and used to
interact with Vault. The login token will be retrieved from a wrapped
response stored at <literal>/cubbyhole/response</literal>.</simpara>
<simpara><emphasis role="strong">Creating a wrapped token</emphasis></simpara>
<note>
<simpara>Response Wrapping for token creation requires Vault 0.6.0 or higher.</simpara>
</note>
<example>
<title>Creating and storing tokens</title>
<programlisting language="shell" linenumbering="unnumbered">$ vault token-create -wrap-ttl="10m"
Key                            Value
---                            -----
wrapping_token:                397ccb93-ff6c-b17b-9389-380b01ca2645
wrapping_token_ttl:            0h10m0s
wrapping_token_creation_time:  2016-09-18 20:29:48.652957077 +0200 CEST
wrapped_accessor:              46b6aebb-187f-932a-26d7-4f3d86a68319</programlisting>
</example>
<example>
<title>bootstrap.yml</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: CUBBYHOLE
    token: 397ccb93-ff6c-b17b-9389-380b01ca2645</programlisting>
</example>
<simpara>See also:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.vaultproject.io/docs/concepts/tokens.html">Vault Documentation: Tokens</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.vaultproject.io/docs/secrets/cubbyhole/index.html">Vault Documentation: Cubbyhole Secret Backend</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.vaultproject.io/docs/concepts/response-wrapping.html">Vault Documentation: Response Wrapping</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="vault.config.authentication.kubernetes">
<title>Kubernetes authentication</title>
<simpara>Kubernetes authentication mechanism (since Vault 0.8.3) allows to authenticate with Vault using a Kubernetes Service Account Token.
The authentication is role based and the role is bound to a service account name and a namespace.</simpara>
<simpara>A file containing a JWT token for a pod’s service account is automatically mounted at <literal>/var/run/secrets/kubernetes.io/serviceaccount/token</literal>.</simpara>
<example>
<title>bootstrap.yml with all Kubernetes authentication properties</title>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    authentication: KUBERNETES
    kubernetes:
        role: my-dev-role
        service-account-token-file: /var/run/secrets/kubernetes.io/serviceaccount/token</programlisting>
</example>
<itemizedlist>
<listitem>
<simpara><literal>role</literal> sets the Role.</simpara>
</listitem>
<listitem>
<simpara><literal>service-account-token-file</literal> sets the location of the file containing the Kubernetes Service Account Token. Defaults to <literal>/var/run/secrets/kubernetes.io/serviceaccount/token</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>See also:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.vaultproject.io/docs/auth/kubernetes.html">Vault Documentation: Kubernetes</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Kubernetes Documentation: Configure Service Accounts for Pods</link></simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="vault.config.backends">
<title>Secret Backends</title>
<section xml:id="vault.config.backends.generic">
<title>Generic Backend</title>
<simpara>Spring Cloud Vault supports at the basic level the generic secret
backend. The generic secret backend allows storage of arbitrary
values as key-value store. A single context can store one or many
key-value tuples. Contexts can be organized hierarchically.
Spring Cloud Vault allows using the Application name
and a default context name (<literal>application</literal>) in combination with active
profiles.</simpara>
<screen>/secret/{application}/{profile}
/secret/{application}
/secret/{default-context}/{profile}
/secret/{default-context}</screen>
<simpara>The application name is determined by the properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>spring.cloud.vault.generic.application-name</literal></simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.vault.application-name</literal></simpara>
</listitem>
<listitem>
<simpara><literal>spring.application.name</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Secrets can be obtained from other contexts within the generic backend by adding their
paths to the application name, separated by commas. For example, given the application
name <literal>usefulapp,mysql1,projectx/aws</literal>, each of these folders will be used:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>/secret/usefulapp</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/secret/mysql1</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/secret/projectx/aws</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Spring Cloud Vault adds all active profiles to the list of possible context paths.
No active profiles will skip accessing contexts with a profile name.</simpara>
<simpara>Properties are exposed like they are stored (i.e. without additional prefixes).</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    generic:
        enabled: true
        backend: secret
        profile-separator: '/'
        default-context: application
        application-name: my-app</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>false</literal> disables the secret backend
config usage</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the secret mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>default-context</literal> sets the context name used by all applications</simpara>
</listitem>
<listitem>
<simpara><literal>application-name</literal> overrides the application name for use in the generic backend</simpara>
</listitem>
<listitem>
<simpara><literal>profile-separator</literal> separates the profile name from the context in
property sources with profiles</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The key-value secret backend can be operated in versioned (v2) and non-versioned (v1) modes. Depending on the mode of operation, a different API is required to access secrets. Make sure to enable <literal>generic</literal> secret backend usage for non-versioned key-value backends and <literal>kv</literal> secret backend usage for versioned key-value backends.</simpara>
</note>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/kv/kv-v1.html">Vault Documentation: Using the KV Secrets Engine - Version 1 (generic secret backend)</link></simpara>
</section>
<section xml:id="vault.config.backends.kv.versioned">
<title>Versioned Key-Value Backend</title>
<simpara>Spring Cloud Vault supports the versioned Key-Value secret
backend. The key-value backend allows storage of arbitrary
values as key-value store. A single context can store one or many
key-value tuples. Contexts can be organized hierarchically.
Spring Cloud Vault allows using the Application name
and a default context name (<literal>application</literal>) in combination with active
profiles.</simpara>
<screen>/secret/{application}/{profile}
/secret/{application}
/secret/{default-context}/{profile}
/secret/{default-context}</screen>
<simpara>The application name is determined by the properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>spring.cloud.vault.kv.application-name</literal></simpara>
</listitem>
<listitem>
<simpara><literal>spring.cloud.vault.application-name</literal></simpara>
</listitem>
<listitem>
<simpara><literal>spring.application.name</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Secrets can be obtained from other contexts within the key-value backend by adding their
paths to the application name, separated by commas. For example, given the application
name <literal>usefulapp,mysql1,projectx/aws</literal>, each of these folders will be used:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>/secret/usefulapp</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/secret/mysql1</literal></simpara>
</listitem>
<listitem>
<simpara><literal>/secret/projectx/aws</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Spring Cloud Vault adds all active profiles to the list of possible context paths.
No active profiles will skip accessing contexts with a profile name.</simpara>
<simpara>Properties are exposed like they are stored (i.e. without additional prefixes).</simpara>
<note>
<simpara>Spring Cloud Vault adds the <literal>data/</literal> context between the mount path and the actual context path.</simpara>
</note>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    kv:
        enabled: true
        backend: secret
        profile-separator: '/'
        default-context: application
        application-name: my-app</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>false</literal> disables the secret backend
config usage</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the secret mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>default-context</literal> sets the context name used by all applications</simpara>
</listitem>
<listitem>
<simpara><literal>application-name</literal> overrides the application name for use in the generic backend</simpara>
</listitem>
<listitem>
<simpara><literal>profile-separator</literal> separates the profile name from the context in
property sources with profiles</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The key-value secret backend can be operated in versioned (v2) and non-versioned (v1) modes. Depending on the mode of operation, a different API is required to access secrets. Make sure to enable <literal>generic</literal> secret backend usage for non-versioned key-value backends and <literal>kv</literal> secret backend usage for versioned key-value backends.</simpara>
</note>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/kv/kv-v2.html">Vault Documentation: Using the KV Secrets Engine - Version 2 (versioned key-value backend)</link></simpara>
</section>
<section xml:id="vault.config.backends.consul">
<title>Consul</title>
<simpara>Spring Cloud Vault can obtain credentials for HashiCorp Consul.
The Consul integration requires the <literal>spring-cloud-vault-config-consul</literal>
dependency.</simpara>
<example>
<title>pom.xml</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-vault-config-consul&lt;/artifactId&gt;
        &lt;version&gt;Finchley.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</example>
<simpara>The integration can be enabled by setting
<literal>spring.cloud.vault.consul.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.consul.role=…</literal>.</simpara>
<simpara>The obtained token is stored in <literal>spring.cloud.consul.token</literal>
so using Spring Cloud Consul can pick up the generated
credentials without further configuration. You can configure
the property name by setting <literal>spring.cloud.vault.consul.token-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    consul:
        enabled: true
        role: readonly
        backend: consul
        token-property: spring.cloud.consul.token</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the Consul backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the Consul role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the Consul mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>token-property</literal> sets the property name in which the Consul ACL token is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/consul/index.html">Vault Documentation: Setting up Consul with Vault</link></simpara>
</section>
<section xml:id="vault.config.backends.rabbitmq">
<title>RabbitMQ</title>
<simpara>Spring Cloud Vault can obtain credentials for RabbitMQ.</simpara>
<simpara>The RabbitMQ integration requires the <literal>spring-cloud-vault-config-rabbitmq</literal>
dependency.</simpara>
<example>
<title>pom.xml</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-vault-config-rabbitmq&lt;/artifactId&gt;
        &lt;version&gt;Finchley.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</example>
<simpara>The integration can be enabled by setting
<literal>spring.cloud.vault.rabbitmq.enabled=true</literal> (default <literal>false</literal>)
and providing the role name with <literal>spring.cloud.vault.rabbitmq.role=…</literal>.</simpara>
<simpara>Username and password are stored in <literal>spring.rabbitmq.username</literal>
and <literal>spring.rabbitmq.password</literal> so using Spring Boot will pick up the generated
credentials without further configuration. You can configure the property names
by setting <literal>spring.cloud.vault.rabbitmq.username-property</literal> and
<literal>spring.cloud.vault.rabbitmq.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    rabbitmq:
        enabled: true
        role: readonly
        backend: rabbitmq
        username-property: spring.rabbitmq.username
        password-property: spring.rabbitmq.password</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the RabbitMQ backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the RabbitMQ role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the RabbitMQ mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the RabbitMQ username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the RabbitMQ password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/rabbitmq/index.html">Vault Documentation: Setting up RabbitMQ with Vault</link></simpara>
</section>
<section xml:id="vault.config.backends.aws">
<title>AWS</title>
<simpara>Spring Cloud Vault can obtain credentials for AWS.</simpara>
<simpara>The AWS integration requires the <literal>spring-cloud-vault-config-aws</literal>
dependency.</simpara>
<example>
<title>pom.xml</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-vault-config-aws&lt;/artifactId&gt;
        &lt;version&gt;Finchley.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</example>
<simpara>The integration can be enabled by setting
<literal>spring.cloud.vault.aws=true</literal> (default <literal>false</literal>)
and providing the role name with <literal>spring.cloud.vault.aws.role=…</literal>.</simpara>
<simpara>The access key and secret key are stored in <literal>cloud.aws.credentials.accessKey</literal>
and <literal>cloud.aws.credentials.secretKey</literal> so using Spring Cloud AWS will pick up the generated
credentials without further configuration. You can configure the property names
by setting <literal>spring.cloud.vault.aws.access-key-property</literal> and
<literal>spring.cloud.vault.aws.secret-key-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    aws:
        enabled: true
        role: readonly
        backend: aws
        access-key-property: cloud.aws.credentials.accessKey
        secret-key-property: cloud.aws.credentials.secretKey</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the AWS backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the AWS role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the AWS mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>access-key-property</literal> sets the property name in which the AWS access key is stored</simpara>
</listitem>
<listitem>
<simpara><literal>secret-key-property</literal> sets the property name in which the AWS secret key is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/aws/index.html">Vault Documentation: Setting up AWS with Vault</link></simpara>
</section>
</chapter>
<chapter xml:id="vault.config.backends.database-backends">
<title>Database backends</title>
<simpara>Vault supports several database secret backends to generate database
credentials dynamically based on configured roles. This means
services that need to access a database no longer need to configure
credentials: they can request them from Vault, and use Vault&#8217;s leasing
mechanism to more easily roll keys.</simpara>
<simpara>Spring Cloud Vault integrates with these backends:</simpara>
<itemizedlist>
<listitem>
<simpara><xref linkend="vault.config.backends.database"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="vault.config.backends.cassandra"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="vault.config.backends.mongodb"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="vault.config.backends.mysql"/></simpara>
</listitem>
<listitem>
<simpara><xref linkend="vault.config.backends.postgresql"/></simpara>
</listitem>
</itemizedlist>
<simpara>Using a database secret backend requires to enable the
backend in the configuration and the <literal>spring-cloud-vault-config-databases</literal>
dependency.</simpara>
<simpara>Vault ships since 0.7.1 with a dedicated <literal>database</literal> secret backend that allows
database integration via plugins. You can use that specific backend by using the
generic database backend. Make sure to specify the appropriate
backend path, e.g. <literal>spring.cloud.vault.mysql.role.backend=database</literal>.</simpara>
<example>
<title>pom.xml</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-vault-config-databases&lt;/artifactId&gt;
        &lt;version&gt;Finchley.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</programlisting>
</example>
<note>
<simpara>Enabling multiple JDBC-compliant databases will generate credentials
and store them by default in the same property keys hence property names for
JDBC secrets need to be configured separately.</simpara>
</note>
<section xml:id="vault.config.backends.database">
<title>Database</title>
<simpara>Spring Cloud Vault can obtain credentials for any database listed at
<link xl:href="https://www.vaultproject.io/api/secret/databases/index.html">https://www.vaultproject.io/api/secret/databases/index.html</link>.
The integration can be enabled by setting
<literal>spring.cloud.vault.database.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.database.role=…</literal>.</simpara>
<simpara>While the database backend is a generic one, <literal>spring.cloud.vault.database</literal>
specifically targets JDBC databases. Username and password are
stored in <literal>spring.datasource.username</literal> and <literal>spring.datasource.password</literal>
so using Spring Boot will pick up the generated credentials
for your <literal>DataSource</literal> without further configuration.
You can configure the property names by setting
<literal>spring.cloud.vault.database.username-property</literal> and
<literal>spring.cloud.vault.database.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    database:
        enabled: true
        role: readonly
        backend: database
        username-property: spring.datasource.username
        password-property: spring.datasource.username</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the Database backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the Database role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the Database mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the Database username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the Database password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/databases/index.html">Vault Documentation: Database Secrets backend</link></simpara>
</section>
<section xml:id="vault.config.backends.cassandra">
<title>Apache Cassandra</title>
<note>
<simpara>The <literal>cassandra</literal> backend has been deprecated in Vault 0.7.1 and
it is recommended to use the <literal>database</literal> backend and mount it as <literal>cassandra</literal>.</simpara>
</note>
<simpara>Spring Cloud Vault can obtain credentials for Apache Cassandra.
The integration can be enabled by setting
<literal>spring.cloud.vault.cassandra.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.cassandra.role=…</literal>.</simpara>
<simpara>Username and password are stored in <literal>spring.data.cassandra.username</literal>
and <literal>spring.data.cassandra.password</literal> so using Spring Boot will pick
up the generated credentials without further configuration.
You can configure the property names by setting
<literal>spring.cloud.vault.cassandra.username-property</literal> and
<literal>spring.cloud.vault.cassandra.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    cassandra:
        enabled: true
        role: readonly
        backend: cassandra
        username-property: spring.data.cassandra.username
        password-property: spring.data.cassandra.username</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the Cassandra backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the Cassandra role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the Cassandra mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the Cassandra username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the Cassandra password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/cassandra/index.html">Vault Documentation: Setting up Apache Cassandra with Vault</link></simpara>
</section>
<section xml:id="vault.config.backends.mongodb">
<title>MongoDB</title>
<note>
<simpara>The <literal>mongodb</literal> backend has been deprecated in Vault 0.7.1 and
it is recommended to use the <literal>database</literal> backend and mount it as <literal>mongodb</literal>.</simpara>
</note>
<simpara>Spring Cloud Vault can obtain credentials for MongoDB.
The integration can be enabled by setting
<literal>spring.cloud.vault.mongodb.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.mongodb.role=…</literal>.</simpara>
<simpara>Username and password are stored in <literal>spring.data.mongodb.username</literal>
and <literal>spring.data.mongodb.password</literal> so using Spring Boot will
pick up the generated credentials without further configuration.
You can configure the property names by setting
<literal>spring.cloud.vault.mongodb.username-property</literal> and
<literal>spring.cloud.vault.mongodb.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    mongodb:
        enabled: true
        role: readonly
        backend: mongodb
        username-property: spring.data.mongodb.username
        password-property: spring.data.mongodb.password</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the MongodB backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the MongoDB role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the MongoDB mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the MongoDB username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the MongoDB password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/mongodb/index.html">Vault Documentation: Setting up MongoDB with Vault</link></simpara>
</section>
<section xml:id="vault.config.backends.mysql">
<title>MySQL</title>
<note>
<simpara>The <literal>mysql</literal> backend has been deprecated in Vault 0.7.1 and
it is recommended to use the <literal>database</literal> backend and mount it as <literal>mysql</literal>.
Configuration for <literal>spring.cloud.vault.mysql</literal> will be removed in a future version.</simpara>
</note>
<simpara>Spring Cloud Vault can obtain credentials for MySQL.
The integration can be enabled by setting
<literal>spring.cloud.vault.mysql.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.mysql.role=…</literal>.</simpara>
<simpara>Username and password are stored in <literal>spring.datasource.username</literal>
and <literal>spring.datasource.password</literal> so using Spring Boot will
pick up the generated credentials without further configuration.
You can configure the property names by setting
<literal>spring.cloud.vault.mysql.username-property</literal> and
<literal>spring.cloud.vault.mysql.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    mysql:
        enabled: true
        role: readonly
        backend: mysql
        username-property: spring.datasource.username
        password-property: spring.datasource.username</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the MySQL backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the MySQL role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the MySQL mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the MySQL username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the MySQL password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/mysql/index.html">Vault Documentation: Setting up MySQL with Vault</link></simpara>
</section>
<section xml:id="vault.config.backends.postgresql">
<title>PostgreSQL</title>
<note>
<simpara>The <literal>postgresql</literal> backend has been deprecated in Vault 0.7.1 and
it is recommended to use the <literal>database</literal> backend and mount it as <literal>postgresql</literal>.
Configuration for <literal>spring.cloud.vault.postgresql</literal> will be removed in a future version.</simpara>
</note>
<simpara>Spring Cloud Vault can obtain credentials for PostgreSQL.
The integration can be enabled by setting
<literal>spring.cloud.vault.postgresql.enabled=true</literal> (default <literal>false</literal>) and
providing the role name with <literal>spring.cloud.vault.postgresql.role=…</literal>.</simpara>
<simpara>Username and password are stored in <literal>spring.datasource.username</literal>
and <literal>spring.datasource.password</literal> so using Spring Boot will
pick up the generated credentials without further configuration.
You can configure the property names by setting
<literal>spring.cloud.vault.postgresql.username-property</literal> and
<literal>spring.cloud.vault.postgresql.password-property</literal>.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    postgresql:
        enabled: true
        role: readonly
        backend: postgresql
        username-property: spring.datasource.username
        password-property: spring.datasource.username</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>enabled</literal> setting this value to <literal>true</literal> enables the PostgreSQL backend config usage</simpara>
</listitem>
<listitem>
<simpara><literal>role</literal> sets the role name of the PostgreSQL role definition</simpara>
</listitem>
<listitem>
<simpara><literal>backend</literal> sets the path of the PostgreSQL mount to use</simpara>
</listitem>
<listitem>
<simpara><literal>username-property</literal> sets the property name in which the PostgreSQL username is stored</simpara>
</listitem>
<listitem>
<simpara><literal>password-property</literal> sets the property name in which the PostgreSQL password is stored</simpara>
</listitem>
</itemizedlist>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/secrets/postgresql/index.html">Vault Documentation: Setting up PostgreSQL with Vault</link></simpara>
</section>
</chapter>
<chapter xml:id="vault.config.backends.configurer">
<title>Configure <literal>PropertySourceLocator</literal> behavior</title>
<simpara>Spring Cloud Vault uses property-based configuration to create <literal>PropertySource</literal>s
for generic and discovered secret backends.</simpara>
<simpara>Discovered backends provide <literal>VaultSecretBackendDescriptor</literal> beans to describe the configuration
state to use secret backend as <literal>PropertySource</literal>. A <literal>SecretBackendMetadataFactory</literal> is required
to create a <literal>SecretBackendMetadata</literal> object which contains path, name and property transformation
configuration.</simpara>
<simpara><literal>SecretBackendMetadata</literal> is used to back a particular <literal>PropertySource</literal>.</simpara>
<simpara>You can register an arbitrary number of beans implementing <literal>VaultConfigurer</literal> for customization.
Default generic and discovered backend registration is disabled if Spring Cloud Vault discovers
at least one <literal>VaultConfigurer</literal> bean. You can however enable default registration with
<literal>SecretBackendConfigurer.registerDefaultGenericSecretBackends()</literal> and <literal>SecretBackendConfigurer.registerDefaultDiscoveredSecretBackends()</literal>.</simpara>
<informalexample>
<programlisting language="java" linenumbering="unnumbered">public class CustomizationBean implements VaultConfigurer {

    @Override
    public void addSecretBackends(SecretBackendConfigurer configurer) {

        configurer.add("secret/my-application");

        configurer.registerDefaultGenericSecretBackends(false);
        configurer.registerDefaultDiscoveredSecretBackends(true);
    }
}</programlisting>
</informalexample>
<note>
<simpara>All customization is required to happen in the bootstrap context. Add your configuration
classes to <literal>META-INF/spring.factories</literal> at <literal>org.springframework.cloud.bootstrap.BootstrapConfiguration</literal>
in your application.</simpara>
</note>
</chapter>
<chapter xml:id="_service_registry_configuration">
<title>Service Registry Configuration</title>
<simpara>You can use a <literal>DiscoveryClient</literal> (such as from Spring Cloud Consul) to locate
a Vault server by setting spring.cloud.vault.discovery.enabled=true (default <literal>false</literal>).
The net result of that is that your apps need a bootstrap.yml (or an environment variable)
with the appropriate discovery configuration.
The benefit is that the Vault can change its co-ordinates, as long as the discovery service
is a fixed point. The default service id is <literal>vault</literal> but you can change that on the client with
<literal>spring.cloud.vault.discovery.serviceId</literal>.</simpara>
<simpara>The discovery client implementations all support some kind of metadata map
(e.g. for Eureka we have eureka.instance.metadataMap). Some additional properties of the service
may need to be configured in its service registration metadata so that clients can connect
correctly. Service registries that do not provide details about transport layer security
need to provide a <literal>scheme</literal> metadata entry to be set either to <literal>https</literal> or <literal>http</literal>.
If no scheme is configured and the service is not exposed as secure service, then
configuration defaults to <literal>spring.cloud.vault.scheme</literal> which is <literal>https</literal> when it&#8217;s not set.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault.discovery:
    enabled: true
    service-id: my-vault-service</programlisting>
</informalexample>
</chapter>
<chapter xml:id="vault.config.fail-fast">
<title>Vault Client Fail Fast</title>
<simpara>In some cases, it may be desirable to fail startup of a service if
it cannot connect to the Vault Server.  If this is the desired
behavior, set the bootstrap configuration property
<literal>spring.cloud.vault.fail-fast=true</literal> and the client will halt with
an Exception.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    fail-fast: true</programlisting>
</informalexample>
</chapter>
<chapter xml:id="vault.config.ssl">
<title>Vault Client SSL configuration</title>
<simpara>SSL can be configured declaratively by setting various properties.
You can set either <literal>javax.net.ssl.trustStore</literal> to configure
JVM-wide SSL settings or <literal>spring.cloud.vault.ssl.trust-store</literal>
to set SSL settings only for Spring Cloud Vault Config.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    ssl:
        trust-store: classpath:keystore.jks
        trust-store-password: changeit</programlisting>
</informalexample>
<itemizedlist>
<listitem>
<simpara><literal>trust-store</literal> sets the resource for the trust-store. SSL-secured Vault
communication will validate the Vault SSL certificate with the specified
trust-store.</simpara>
</listitem>
<listitem>
<simpara><literal>trust-store-password</literal> sets the trust-store password</simpara>
</listitem>
</itemizedlist>
<simpara>Please note that configuring <literal>spring.cloud.vault.ssl.*</literal> can be only
applied when either Apache Http Components or the OkHttp client
is on your class-path.</simpara>
</chapter>
<chapter xml:id="vault-lease-renewal">
<title>Lease lifecycle management (renewal and revocation)</title>
<simpara>With every secret, Vault creates a lease:
metadata containing information such as a time duration,
renewability, and more.</simpara>
<simpara>Vault promises that the data will be valid for the given duration,
or Time To Live (TTL). Once the lease is expired, Vault can
revoke the data, and the consumer of the secret can no longer
be certain that it is valid.</simpara>
<simpara>Spring Cloud Vault maintains a lease lifecycle beyond
the creation of login tokens and secrets. That said,
login tokens and secrets associated with a lease
are scheduled for renewal just before the lease expires
until terminal expiry.
Application shutdown revokes obtained login tokens and renewable
leases.</simpara>
<simpara>Secret service and database backends (such as MongoDB or MySQL)
usually generate a renewable lease so generated credentials will
be disabled on application shutdown.</simpara>
<note>
<simpara>Static tokens are not renewed or revoked.</simpara>
</note>
<simpara>Lease renewal and revocation is enabled by default and can
be disabled by setting <literal>spring.cloud.vault.config.lifecycle.enabled</literal>
to <literal>false</literal>. This is not recommended as leases can expire and
Spring Cloud Vault cannot longer access Vault or services
using generated credentials and valid credentials remain active
after application shutdown.</simpara>
<informalexample>
<programlisting language="yaml" linenumbering="unnumbered">spring.cloud.vault:
    config.lifecycle.enabled: true</programlisting>
</informalexample>
<simpara>See also: <link xl:href="https://www.vaultproject.io/docs/concepts/lease.html">Vault Documentation: Lease, Renew, and Revoke</link></simpara>
</chapter>
</part>
<part xml:id="_spring_cloud_gateway">
<title>Spring Cloud Gateway</title>
<partintro>
<simpara><emphasis role="strong">Finchley.RELEASE</emphasis></simpara>
<simpara>This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</simpara>
</partintro>
<chapter xml:id="gateway-starter">
<title>How to Include Spring Cloud Gateway</title>
<simpara>To include Spring Cloud Gateway in your project use the starter with group <literal>org.springframework.cloud</literal>
and artifact id <literal>spring-cloud-starter-gateway</literal>. See the <link xl:href="https://projects.spring.io/spring-cloud/">Spring Cloud Project page</link>
for details on setting up your build system with the current Spring Cloud Release Train.</simpara>
<simpara>If you include the starter, but, for some reason, you do not want the gateway to be enabled, set <literal>spring.cloud.gateway.enabled=false</literal>.</simpara>
<important>
<simpara>Spring Cloud Gateway requires the Netty runtime provided by Spring Boot and Spring Webflux. It does not work in a traditional Servlet Container or built as a WAR.</simpara>
</important>
</chapter>
<chapter xml:id="_glossary">
<title>Glossary</title>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Route</emphasis>: Route the basic building block of the gateway. It is defined by an ID, a destination URI, a collection of predicates and a collection of filters. A route is matched if aggregate predicate is true.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Predicate</emphasis>: This is a <link xl:href="https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Java 8 Function Predicate</link>. The input type is a <link xl:href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/ServerWebExchange.html">Spring Framework <literal>ServerWebExchange</literal></link>. This allows developers to match on anything from the HTTP request, such as headers or parameters.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Filter</emphasis>: These are instances <link xl:href="https://docs.spring.io/spring/docs/5.0.x/javadoc-api/org/springframework/web/server/GatewayFilter.html">Spring Framework <literal>GatewayFilter</literal></link> constructed in with a specific factory. Here, requests and responses can be modified before or after sending the downstream request.</simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="gateway-how-it-works">
<title>How It Works</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/images/spring_cloud_gateway_diagram.png"/>
</imageobject>
<textobject><phrase>Spring Cloud Gateway Diagram</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Clients make requests to Spring Cloud Gateway. If the Gateway Handler Mapping determines that a request matches a Route, it is sent to the Gateway Web Handler. This handler runs sends the request through a filter chain that is specific to the request. The reason the filters are divided by the dotted line, is that filters may execute logic before the proxy request is sent or after. All "pre" filter logic is executed, then the proxy request is made. After the proxy request is made, the "post" filter logic is executed.</simpara>
<note>
<simpara>URIs defined in routes without a port will get a default port set to 80 and 443 for HTTP and HTTPS URIs respectively.</simpara>
</note>
</chapter>
<chapter xml:id="gateway-request-predicates-factories">
<title>Route Predicate Factories</title>
<simpara>Spring Cloud Gateway matches routes as part of the Spring WebFlux <literal>HandlerMapping</literal> infrastructure. Spring Cloud Gateway includes many built-in Route Predicate Factories. All of these predicates match on different attributes of the HTTP request. Multiple Route Predicate Factories can be combined and are combined via logical <literal>and</literal>.</simpara>
<section xml:id="_after_route_predicate_factory">
<title>After Route Predicate Factory</title>
<simpara>The After Route Predicate Factory takes one parameter, a datetime. This predicate matches requests that happen after the current datetime.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: after_route
        uri: https://example.org
        predicates:
        - After=2017-01-20T17:42:47.789-07:00[America/Denver]</programlisting>
</para>
</formalpara>
<simpara>This route matches any request after Jan 20, 2017 17:42 Mountain Time (Denver).</simpara>
</section>
<section xml:id="_before_route_predicate_factory">
<title>Before Route Predicate Factory</title>
<simpara>The Before Route Predicate Factory takes one parameter, a datetime. This predicate matches requests that happen before the current datetime.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: before_route
        uri: https://example.org
        predicates:
        - Before=2017-01-20T17:42:47.789-07:00[America/Denver]</programlisting>
</para>
</formalpara>
<simpara>This route matches any request before Jan 20, 2017 17:42 Mountain Time (Denver).</simpara>
</section>
<section xml:id="_between_route_predicate_factory">
<title>Between Route Predicate Factory</title>
<simpara>The Between Route Predicate Factory takes two parameters, datetime1 and datetime2. This predicate matches requests that happen after datetime1 and before datetime2. The datetime2 parameter must be after datetime1.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: between_route
        uri: https://example.org
        predicates:
        - Between=2017-01-20T17:42:47.789-07:00[America/Denver], 2017-01-21T17:42:47.789-07:00[America/Denver]</programlisting>
</para>
</formalpara>
<simpara>This route matches any request after Jan 20, 2017 17:42 Mountain Time (Denver) and before Jan 21, 2017 17:42 Mountain Time (Denver). This could be useful for maintenance windows.</simpara>
</section>
<section xml:id="_cookie_route_predicate_factory">
<title>Cookie Route Predicate Factory</title>
<simpara>The Cookie Route Predicate Factory takes two parameters, the cookie name and a regular expression. This predicate matches cookies that have the given name and the value matches the regular expression.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: cookie_route
        uri: https://example.org
        predicates:
        - Cookie=chocolate, ch.p</programlisting>
</para>
</formalpara>
<simpara>This route matches the request has a cookie named <literal>chocolate</literal> who&#8217;s value matches the <literal>ch.p</literal> regular expression.</simpara>
</section>
<section xml:id="_header_route_predicate_factory">
<title>Header Route Predicate Factory</title>
<simpara>The Header Route Predicate Factory takes two parameters, the header name and a regular expression. This predicate matches with a header that has the given name and the value matches the regular expression.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: header_route
        uri: https://example.org
        predicates:
        - Header=X-Request-Id, \d+</programlisting>
</para>
</formalpara>
<simpara>This route matches if the request has a header named <literal>X-Request-Id</literal> whos value matches the <literal>\d+</literal> regular expression (has a value of one or more digits).</simpara>
</section>
<section xml:id="_host_route_predicate_factory">
<title>Host Route Predicate Factory</title>
<simpara>The Host Route Predicate Factory takes one parameter: the host name pattern. The pattern is an Ant style pattern with <literal>.</literal> as the separator. This predicates matches the <literal>Host</literal> header that matches the pattern.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: https://example.org
        predicates:
        - Host=**.somehost.org</programlisting>
</para>
</formalpara>
<simpara>This route would match if the request has a <literal>Host</literal> header has the value <literal>www.somehost.org</literal> or <literal>beta.somehost.org</literal>.</simpara>
</section>
<section xml:id="_method_route_predicate_factory">
<title>Method Route Predicate Factory</title>
<simpara>The Method Route Predicate Factory takes one parameter: the HTTP method to match.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: method_route
        uri: https://example.org
        predicates:
        - Method=GET</programlisting>
</para>
</formalpara>
<simpara>This route would match if the request method was a <literal>GET</literal>.</simpara>
</section>
<section xml:id="_path_route_predicate_factory">
<title>Path Route Predicate Factory</title>
<simpara>The Path Route Predicate Factory takes one parameter: a Spring <literal>PathMatcher</literal> pattern.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: host_route
        uri: https://example.org
        predicates:
        - Path=/foo/{segment}</programlisting>
</para>
</formalpara>
<simpara>This route would match if the request path was, for example: <literal>/foo/1</literal> or <literal>/foo/bar</literal>.</simpara>
<simpara>This predicate extracts the URI template variables (like <literal>segment</literal> defined in the example above) as a map of names and values and places it in the <literal>ServerWebExchange.getAttributes()</literal> with a key defined in <literal>PathRoutePredicate.URL_PREDICATE_VARS_ATTR</literal>. Those values are then available for use by <link linkend="gateway-route-filters">GatewayFilter Factories</link></simpara>
</section>
<section xml:id="_query_route_predicate_factory">
<title>Query Route Predicate Factory</title>
<simpara>The Query Route Predicate Factory takes two parameters: a required <literal>param</literal> and an optional <literal>regexp</literal>.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: https://example.org
        predicates:
        - Query=baz</programlisting>
</para>
</formalpara>
<simpara>This route would match if the request contained a <literal>baz</literal> query parameter.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: query_route
        uri: https://example.org
        predicates:
        - Query=foo, ba.</programlisting>
</para>
</formalpara>
<simpara>This route would match if the request contained a <literal>foo</literal> query parameter whose value matched the <literal>ba.</literal> regexp, so <literal>bar</literal> and <literal>baz</literal> would match.</simpara>
</section>
<section xml:id="_remoteaddr_route_predicate_factory">
<title>RemoteAddr Route Predicate Factory</title>
<simpara>The RemoteAddr Route Predicate Factory takes a list (min size 1) of CIDR-notation (IPv4 or IPv6) strings, e.g. <literal>192.168.0.1/16</literal> (where <literal>192.168.0.1</literal> is an IP address and <literal>16</literal> is a subnet mask).</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: remoteaddr_route
        uri: https://example.org
        predicates:
        - RemoteAddr=192.168.1.1/24</programlisting>
</para>
</formalpara>
<simpara>This route would match if the remote address of the request was, for example, <literal>192.168.1.10</literal>.</simpara>
<section xml:id="_modifying_the_way_remote_addresses_are_resolved">
<title>Modifying the way remote addresses are resolved</title>
<simpara>By default the RemoteAddr Route Predicate Factory uses the remote address from the incoming request.
This may not match the actual client IP address if Spring Cloud Gateway sits behind a proxy layer.</simpara>
<simpara>You can customize the way that the remote address is resolved by setting a custom <literal>RemoteAddressResolver</literal>.
Spring Cloud Gateway comes with one non-default remote address resolver which is based off of the <link xl:href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For header</link>, <literal>XForwardedRemoteAddressResolver</literal>.</simpara>
<simpara><literal>XForwardedRemoteAddressResolver</literal> has two static constructor methods which take different approaches to security:</simpara>
<simpara><literal>XForwardedRemoteAddressResolver::trustAll</literal> returns a <literal>RemoteAddressResolver</literal> which always takes the first IP address found in the <literal>X-Forwarded-For</literal> header.
This approach is vulnerable to spoofing, as a malicious client could set an initial value for the <literal>X-Forwarded-For</literal> which would be accepted by the resolver.</simpara>
<simpara><literal>XForwardedRemoteAddressResolver::maxTrustedIndex</literal> takes an index which correlates to the number of trusted infrastructure running in front of Spring Cloud Gateway.
If Spring Cloud Gateway is, for example only accessible via HAProxy, then a value of 1 should be used.
If two hops of trusted infrastructure are required before Spring Cloud Gateway is accessible, then a value of 2 should be used.</simpara>
<simpara>Given the following header value:</simpara>
<screen>X-Forwarded-For: 0.0.0.1, 0.0.0.2, 0.0.0.3</screen>
<simpara>The <literal>maxTrustedIndex</literal> values below will yield the following remote addresses.</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top"><literal>maxTrustedIndex</literal></entry>
<entry align="left" valign="top">result</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>[<literal>Integer.MIN_VALUE</literal>,0]</simpara></entry>
<entry align="left" valign="top"><simpara>(invalid, <literal>IllegalArgumentException</literal> during initialization)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>0.0.0.3</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>0.0.0.2</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>0.0.0.1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>[4, <literal>Integer.MAX_VALUE</literal>]</simpara></entry>
<entry align="left" valign="top"><simpara>0.0.0.1</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara xml:id="gateway-route-filters">Using Java config:</simpara>
<simpara>GatewayConfig.java</simpara>
<programlisting language="java" linenumbering="unnumbered">RemoteAddressResolver resolver = XForwardedRemoteAddressResolver
    .maxTrustedIndex(1);

...

.route("direct-route",
    r -&gt; r.remoteAddr("10.1.1.1", "10.10.1.1/24")
        .uri("https://downstream1")
.route("proxied-route",
    r -&gt; r.remoteAddr(resolver,  "10.10.1.1", "10.10.1.1/24")
        .uri("https://downstream2")
)</programlisting>
</section>
</section>
</chapter>
<chapter xml:id="_gatewayfilter_factories">
<title>GatewayFilter Factories</title>
<simpara>Route filters allow the modification of the incoming HTTP request or outgoing HTTP response in some manner. Route filters are scoped to a particular route. Spring Cloud Gateway includes many built-in GatewayFilter Factories.</simpara>
<simpara>NOTE For more detailed examples on how to use any of the following filters, take a look at the <link xl:href="https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-core/src/test/java/org/springframework/cloud/gateway/filter/factory">unit tests</link>.</simpara>
<section xml:id="_addrequestheader_gatewayfilter_factory">
<title>AddRequestHeader GatewayFilter Factory</title>
<simpara>The AddRequestHeader GatewayFilter Factory takes a name and value parameter.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: add_request_header_route
        uri: https://example.org
        filters:
        - AddRequestHeader=X-Request-Foo, Bar</programlisting>
</para>
</formalpara>
<simpara>This will add <literal>X-Request-Foo:Bar</literal> header to the downstream request&#8217;s headers for all matching requests.</simpara>
</section>
<section xml:id="_addrequestparameter_gatewayfilter_factory">
<title>AddRequestParameter GatewayFilter Factory</title>
<simpara>The AddRequestParameter GatewayFilter Factory takes a name and value parameter.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: add_request_parameter_route
        uri: https://example.org
        filters:
        - AddRequestParameter=foo, bar</programlisting>
</para>
</formalpara>
<simpara>This will add <literal>foo=bar</literal> to the downstream request&#8217;s query string for all matching requests.</simpara>
</section>
<section xml:id="_addresponseheader_gatewayfilter_factory">
<title>AddResponseHeader GatewayFilter Factory</title>
<simpara>The AddResponseHeader GatewayFilter Factory takes a name and value parameter.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: add_request_header_route
        uri: https://example.org
        filters:
        - AddResponseHeader=X-Response-Foo, Bar</programlisting>
</para>
</formalpara>
<simpara>This will add <literal>X-Response-Foo:Bar</literal> header to the downstream response&#8217;s headers for all matching requests.</simpara>
</section>
<section xml:id="_hystrix_gatewayfilter_factory">
<title>Hystrix GatewayFilter Factory</title>
<simpara><link xl:href="https://github.com/Netflix/Hystrix">Hystrix</link> is a library from Netflix that implements the <link xl:href="https://martinfowler.com/bliki/CircuitBreaker.html">circuit breaker pattern</link>.
The Hystrix GatewayFilter allows you to introduce circuit breakers to your gateway routes, protecting your services from cascading failures and allowing you to provide fallback responses in the event of downstream failures.</simpara>
<simpara>To enable Hystrix GatewayFilters in your project, add a dependency on <literal>spring-cloud-starter-netflix-hystrix</literal> from <link xl:href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix</link>.</simpara>
<simpara>The Hystrix GatewayFilter Factory requires a single <literal>name</literal> parameter, which is the name of the <literal>HystrixCommand</literal>.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: hystrix_route
        uri: https://example.org
        filters:
        - Hystrix=myCommandName</programlisting>
</para>
</formalpara>
<simpara>This wraps the remaining filters in a <literal>HystrixCommand</literal> with command name <literal>myCommandName</literal>.</simpara>
<simpara>The Hystrix filter can also accept an optional <literal>fallbackUri</literal> parameter. Currently, only <literal>forward:</literal> schemed URIs are supported. If the fallback is called, the request will be forwarded to the controller matched by the URI.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: hystrix_route
        uri: lb://backing-service:8088
        predicates:
        - Path=/consumingserviceendpoint
        filters:
        - name: Hystrix
          args:
            name: fallbackcmd
            fallbackUri: forward:/incaseoffailureusethis
        - RewritePath=/consumingserviceendpoint, /backingserviceendpoint</programlisting>
</para>
</formalpara>
<simpara>This will forward to the <literal>/incaseoffailureusethis</literal> URI when the Hystrix fallback is called. Note that this example also demonstrates (optional) Spring Cloud Netflix Ribbon load-balancing via the <literal>lb</literal> prefix on the destination URI.</simpara>
<simpara>Hystrix settings (such as timeouts) can be configured with global defaults or on a route by route basis using application properties as explained on the <link xl:href="https://github.com/Netflix/Hystrix/wiki/Configuration">Hystrix wiki</link>.</simpara>
<simpara>To set a 5 second timeout for the example route above, the following configuration would be used:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds: 5000</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_prefixpath_gatewayfilter_factory">
<title>PrefixPath GatewayFilter Factory</title>
<simpara>The PrefixPath GatewayFilter Factory takes a single <literal>prefix</literal> parameter.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: prefixpath_route
        uri: https://example.org
        filters:
        - PrefixPath=/mypath</programlisting>
</para>
</formalpara>
<simpara>This will prefix <literal>/mypath</literal> to the path of all matching requests. So a request to <literal>/hello</literal>, would be sent to <literal>/mypath/hello</literal>.</simpara>
</section>
<section xml:id="_preservehostheader_gatewayfilter_factory">
<title>PreserveHostHeader GatewayFilter Factory</title>
<simpara>The PreserveHostHeader GatewayFilter Factory has not parameters. This filter, sets a request attribute that the routing filter will inspect to determine if the original host header should be sent, rather than the host header determined by the http client.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: preserve_host_route
        uri: https://example.org
        filters:
        - PreserveHostHeader</programlisting>
</para>
</formalpara>
<simpara>This will prefix <literal>/mypath</literal> to the path of all matching requests. So a request to <literal>/hello</literal>, would be sent to <literal>/mypath/hello</literal>.</simpara>
</section>
<section xml:id="_requestratelimiter_gatewayfilter_factory">
<title>RequestRateLimiter GatewayFilter Factory</title>
<simpara>The RequestRateLimiter GatewayFilter Factory is uses a <literal>RateLimiter</literal> implementation to determine if the current request is allowed to proceed. If it is not, a status of <literal>HTTP 429 - Too Many Requests</literal> (by default) is returned.</simpara>
<simpara>This filter takes an optional <literal>keyResolver</literal> parameter and parameters specific to the rate limiter (see below).</simpara>
<simpara><literal>keyResolver</literal> is a bean that implements the <literal>KeyResolver</literal> interface. In configuration, reference the bean by name using SpEL. <literal>#{@myKeyResolver}</literal> is a SpEL expression referencing a bean with the name <literal>myKeyResolver</literal>.</simpara>
<formalpara>
<title>KeyResolver.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">public interface KeyResolver {
	Mono&lt;String&gt; resolve(ServerWebExchange exchange);
}</programlisting>
</para>
</formalpara>
<simpara>The <literal>KeyResolver</literal> interface allows pluggable strategies to derive the key for limiting requests. In future milestones, there will be some <literal>KeyResolver</literal> implementations.</simpara>
<simpara>The default implementation of <literal>KeyResolver</literal> is the <literal>PrincipalNameKeyResolver</literal> which retrieves the <literal>Principal</literal> from the <literal>ServerWebExchange</literal> and calls <literal>Principal.getName()</literal>.</simpara>
<note>
<simpara>The RequestRateLimiter is not configurable via the "shortcut" notation. The example below is <emphasis>invalid</emphasis></simpara>
</note>
<formalpara>
<title>application.properties</title>
<para>
<screen># INVALID SHORTCUT CONFIGURATION
spring.cloud.gateway.routes[0].filters[0]=RequestRateLimiter=2, 2, #{@userkeyresolver}</screen>
</para>
</formalpara>
<section xml:id="_redis_ratelimiter">
<title>Redis RateLimiter</title>
<simpara>The redis implementation is based off of work done at <link xl:href="https://stripe.com/blog/rate-limiters">Stripe</link>. It requires the use of the <literal>spring-boot-starter-data-redis-reactive</literal> Spring Boot starter.</simpara>
<simpara>The algorithm used is the <link xl:href="https://en.wikipedia.org/wiki/Token_bucket">Token Bucket Algorithm</link>.</simpara>
<simpara>The <literal>redis-rate-limiter.replenishRate</literal> is how many requests per second do you want a user to be allowed to do, without any dropped requests. This is the rate that the token bucket is filled.</simpara>
<simpara>The <literal>redis-rate-limiter.burstCapacity</literal> is the maximum number of requests a user is allowed to do in a single second. This is the number of tokens the token bucket can hold. Setting this value to zero will block all requests.</simpara>
<simpara>A steady rate is accomplished by setting the same value in <literal>replenishRate</literal> and <literal>burstCapacity</literal>. Temporary bursts can be allowed by setting <literal>burstCapacity</literal> higher than <literal>replenishRate</literal>. In this case, the rate limiter needs to be allowed some time between bursts (according to <literal>replenishRate</literal>), as 2 consecutive bursts will result in dropped requests (<literal>HTTP 429 - Too Many Requests</literal>).</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: requestratelimiter_route
        uri: https://example.org
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20</programlisting>
</para>
</formalpara>
<formalpara>
<title>Config.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Bean
KeyResolver userKeyResolver() {
    return exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst("user"));
}</programlisting>
</para>
</formalpara>
<simpara>This defines a request rate limit of 10 per user. A burst of 20 is allowed, but the next second only 10 requests will be available. The <literal>KeyResolver</literal> is a simple one that gets the <literal>user</literal> request parameter (note: this is not recommended for production).</simpara>
<simpara>A rate limiter can also be defined as a bean implementing the <literal>RateLimiter</literal> interface. In configuration, reference the bean by name using SpEL. <literal>#{@myRateLimiter}</literal> is a SpEL expression referencing a bean with the name <literal>myRateLimiter</literal>.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: requestratelimiter_route
        uri: https://example.org
        filters:
        - name: RequestRateLimiter
          args:
            rate-limiter: "#{@myRateLimiter}"
            key-resolver: "#{@userKeyResolver}"</programlisting>
</para>
</formalpara>
</section>
</section>
<section xml:id="_redirectto_gatewayfilter_factory">
<title>RedirectTo GatewayFilter Factory</title>
<simpara>The RedirectTo GatewayFilter Factory takes a <literal>status</literal> and a <literal>url</literal> parameter. The status should be a 300 series redirect http code, such as 301. The url should be a valid url. This will be the value of the <literal>Location</literal> header.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: prefixpath_route
        uri: https://example.org
        filters:
        - RedirectTo=302, https://acme.org</programlisting>
</para>
</formalpara>
<simpara>This will send a status 302 with a <literal>Location:https://acme.org</literal> header to perform a redirect.</simpara>
</section>
<section xml:id="_removenonproxyheaders_gatewayfilter_factory">
<title>RemoveNonProxyHeaders GatewayFilter Factory</title>
<simpara>The RemoveNonProxyHeaders GatewayFilter Factory removes headers from forwarded requests. The default list of headers that is removed comes from the <link xl:href="https://tools.ietf.org/html/draft-ietf-httpbis-p1-messaging-14#section-7.1.3">IETF</link>.</simpara>
<itemizedlist>
<title>The default removed headers are:</title>
<listitem>
<simpara>Connection</simpara>
</listitem>
<listitem>
<simpara>Keep-Alive</simpara>
</listitem>
<listitem>
<simpara>Proxy-Authenticate</simpara>
</listitem>
<listitem>
<simpara>Proxy-Authorization</simpara>
</listitem>
<listitem>
<simpara>TE</simpara>
</listitem>
<listitem>
<simpara>Trailer</simpara>
</listitem>
<listitem>
<simpara>Transfer-Encoding</simpara>
</listitem>
<listitem>
<simpara>Upgrade</simpara>
</listitem>
</itemizedlist>
<simpara>To change this, set the <literal>spring.cloud.gateway.filter.remove-non-proxy-headers.headers</literal> property to the list of header names to remove.</simpara>
</section>
<section xml:id="_removerequestheader_gatewayfilter_factory">
<title>RemoveRequestHeader GatewayFilter Factory</title>
<simpara>The RemoveRequestHeader GatewayFilter Factory takes a <literal>name</literal> parameter. It is the name of the header to be removed.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: removerequestheader_route
        uri: https://example.org
        filters:
        - RemoveRequestHeader=X-Request-Foo</programlisting>
</para>
</formalpara>
<simpara>This will remove the <literal>X-Request-Foo</literal> header before it is sent downstream.</simpara>
</section>
<section xml:id="_removeresponseheader_gatewayfilter_factory">
<title>RemoveResponseHeader GatewayFilter Factory</title>
<simpara>The RemoveResponseHeader GatewayFilter Factory takes a <literal>name</literal> parameter. It is the name of the header to be removed.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: removeresponseheader_route
        uri: https://example.org
        filters:
        - RemoveResponseHeader=X-Response-Foo</programlisting>
</para>
</formalpara>
<simpara>This will remove the <literal>X-Response-Foo</literal> header from the response before it is returned to the gateway client.</simpara>
</section>
<section xml:id="_rewritepath_gatewayfilter_factory">
<title>RewritePath GatewayFilter Factory</title>
<simpara>The RewritePath GatewayFilter Factory takes a path <literal>regexp</literal> parameter and a <literal>replacement</literal> parameter. This uses Java regular expressions for a flexible way to rewrite the request path.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: rewritepath_route
        uri: https://example.org
        predicates:
        - Path=/foo/**
        filters:
        - RewritePath=/foo/(?&lt;segment&gt;.*), /$\{segment}</programlisting>
</para>
</formalpara>
<simpara>For a request path of <literal>/foo/bar</literal>, this will set the path to <literal>/bar</literal> before making the downstream request. Notice the <literal>$\</literal> which is replaced with <literal>$</literal> because of the YAML spec.</simpara>
</section>
<section xml:id="_savesession_gatewayfilter_factory">
<title>SaveSession GatewayFilter Factory</title>
<simpara>The SaveSession GatewayFilter Factory forces a <literal>WebSession::save</literal> operation <emphasis>before</emphasis> forwarding the call downstream. This is of particular use when
using something like <link xl:href="https://projects.spring.io/spring-session/">Spring Session</link> with a lazy data store and need to ensure the session state has been saved before making the forwarded call.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: save_session
        uri: https://example.org
        predicates:
        - Path=/foo/**
        filters:
        - SaveSession</programlisting>
</para>
</formalpara>
<simpara>If you are integrating <link xl:href="https://projects.spring.io/spring-security/">Spring Security</link> with Spring Session, and want to ensure security details have been forwarded to the remote process, this is critical.</simpara>
</section>
<section xml:id="_secureheaders_gatewayfilter_factory">
<title>SecureHeaders GatewayFilter Factory</title>
<simpara>The SecureHeaders GatewayFilter Factory adds a number of headers to the response at the reccomendation from <link xl:href="https://blog.appcanary.com/2017/http-security-headers.html">this blog post</link>.</simpara>
<itemizedlist>
<title>The following headers are added (allong with default values):</title>
<listitem>
<simpara><literal>X-Xss-Protection:1; mode=block</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Strict-Transport-Security:max-age=631138519</literal></simpara>
</listitem>
<listitem>
<simpara><literal>X-Frame-Options:DENY</literal></simpara>
</listitem>
<listitem>
<simpara><literal>X-Content-Type-Options:nosniff</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Referrer-Policy:no-referrer</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Content-Security-Policy:default-src 'self' https:; font-src 'self' https: data:; img-src 'self' https: data:; object-src 'none'; script-src https:; style-src 'self' https: 'unsafe-inline'</literal></simpara>
</listitem>
<listitem>
<simpara><literal>X-Download-Options:noopen</literal></simpara>
</listitem>
<listitem>
<simpara><literal>X-Permitted-Cross-Domain-Policies:none</literal></simpara>
</listitem>
</itemizedlist>
<simpara>To change the default values set the appropriate property in the <literal>spring.cloud.gateway.filter.secure-headers</literal> namespace:</simpara>
<itemizedlist>
<title>Property to change:</title>
<listitem>
<simpara><literal>xss-protection-header</literal></simpara>
</listitem>
<listitem>
<simpara><literal>strict-transport-security</literal></simpara>
</listitem>
<listitem>
<simpara><literal>frame-options</literal></simpara>
</listitem>
<listitem>
<simpara><literal>content-type-options</literal></simpara>
</listitem>
<listitem>
<simpara><literal>referrer-policy</literal></simpara>
</listitem>
<listitem>
<simpara><literal>content-security-policy</literal></simpara>
</listitem>
<listitem>
<simpara><literal>download-options</literal></simpara>
</listitem>
<listitem>
<simpara><literal>permitted-cross-domain-policies</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_setpath_gatewayfilter_factory">
<title>SetPath GatewayFilter Factory</title>
<simpara>The SetPath GatewayFilter Factory takes a path <literal>template</literal> parameter. It offers a simple way to manipulate the request path by allowing templated segments of the path. This uses the uri templates from Spring Framework. Multiple matching segments are allowed.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: setpath_route
        uri: https://example.org
        predicates:
        - Path=/foo/{segment}
        filters:
        - SetPath=/{segment}</programlisting>
</para>
</formalpara>
<simpara>For a request path of <literal>/foo/bar</literal>, this will set the path to <literal>/bar</literal> before making the downstream request.</simpara>
</section>
<section xml:id="_setresponseheader_gatewayfilter_factory">
<title>SetResponseHeader GatewayFilter Factory</title>
<simpara>The SetResponseHeader GatewayFilter Factory takes <literal>name</literal> and <literal>value</literal> parameters.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: setresponseheader_route
        uri: https://example.org
        filters:
        - SetResponseHeader=X-Response-Foo, Bar</programlisting>
</para>
</formalpara>
<simpara>This GatewayFilter replaces all headers with the given name, rather than adding. So if the downstream server responded with a <literal>X-Response-Foo:1234</literal>, this would be replaced with <literal>X-Response-Foo:Bar</literal>, which is what the gateway client would receive.</simpara>
</section>
<section xml:id="_setstatus_gatewayfilter_factory">
<title>SetStatus GatewayFilter Factory</title>
<simpara>The SetStatus GatewayFilter Factory takes a single <literal>status</literal> parameter. It must be a valid Spring <literal>HttpStatus</literal>. It may be the integer value <literal>404</literal> or the string representation of the enumeration <literal>NOT_FOUND</literal>.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: setstatusstring_route
        uri: https://example.org
        filters:
        - SetStatus=BAD_REQUEST
      - id: setstatusint_route
        uri: https://example.org
        filters:
        - SetStatus=401</programlisting>
</para>
</formalpara>
<simpara>In either case, the HTTP status of the response will be set to 401.</simpara>
</section>
<section xml:id="_stripprefix_gatewayfilter_factory">
<title>StripPrefix GatewayFilter Factory</title>
<simpara>The StripPrefix GatewayFilter Factory takes one paramter, <literal>parts</literal>.  The <literal>parts</literal> parameter indicated the number of parts in the path to strip from the request before sending it downstream.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: nameRoot
        uri: http://nameservice
        predicates:
        - Path=/name/**
        filters:
        - StripPrefix=2</programlisting>
</para>
</formalpara>
<simpara>When a request is made through the gateway to <literal>/name/bar/foo</literal> the request made to <literal>nameservice</literal> will look like <literal><link xl:href="http://nameservice/foo">http://nameservice/foo</link></literal>.</simpara>
</section>
<section xml:id="_retry_gatewayfilter_factory">
<title>Retry GatewayFilter Factory</title>
<simpara>The Retry GatewayFilter Factory takes <literal>retries</literal>, <literal>statuses</literal>, <literal>methods</literal>, and <literal>series</literal> as parameters.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>retries</literal>: the number of retries that should be attempted</simpara>
</listitem>
<listitem>
<simpara><literal>statuses</literal>: the HTTP status codes that should be retried, represented using <literal>org.springframework.http.HttpStatus</literal></simpara>
</listitem>
<listitem>
<simpara><literal>methods</literal>: the HTTP methods that should be retried, represented using <literal>org.springframework.http.HttpMethod</literal></simpara>
</listitem>
<listitem>
<simpara><literal>series</literal>: the series of status codes to be retried, represented using <literal>org.springframework.http.HttpStatus.Series</literal></simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: retry_test
        uri: http://localhost:8080/flakey
        predicates:
        - Host=*.retry.com
        filters:
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY</programlisting>
</para>
</formalpara>
<note>
<simpara>At this time a URI using the <literal>forward</literal> protocol does not support using the retry filter.</simpara>
</note>
</section>
</chapter>
<chapter xml:id="_global_filters">
<title>Global Filters</title>
<simpara>The <literal>GlobalFilter</literal> interface has the same signature as <literal>GatewayFilter</literal>. These are special filters that are conditionally applied to all routes. (This interface and usage are subject to change in future milestones).</simpara>
<section xml:id="_combined_global_filter_and_gatewayfilter_ordering">
<title>Combined Global Filter and GatewayFilter Ordering</title>
<simpara>TODO: document ordering</simpara>
</section>
<section xml:id="_forward_routing_filter">
<title>Forward Routing Filter</title>
<simpara>The <literal>ForwardRoutingFilter</literal> looks for a URI in the exchange attribute <literal>ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR</literal>. If the url has a <literal>forward</literal> scheme (ie <literal>forward:///localendpoint</literal>), it will use the Spring <literal>DispatcherHandler</literal> to handler the request.  The path part of the request URL will be overridden with the path in the forward URL. The unmodified original url is appended to the list in the <literal>ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR</literal> attribute.</simpara>
</section>
<section xml:id="_loadbalancerclient_filter">
<title>LoadBalancerClient Filter</title>
<simpara>The <literal>LoadBalancerClientFilter</literal> looks for a URI in the exchange attribute <literal>ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR</literal>. If the url has a <literal>lb</literal> scheme (ie <literal>lb://myservice</literal>), it will use the Spring Cloud <literal>LoadBalancerClient</literal> to resolve the name (<literal>myservice</literal> in the previous example) to an actual host and port and replace the URI in the same attribute. The unmodified original url is appended to the list in the <literal>ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR</literal> attribute. The filter will also look in the <literal>ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR</literal> attribute to see if it equals <literal>lb</literal> and then the same rules apply.</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: myRoute
        uri: lb://service
        predicates:
        - Path=/service/**</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_netty_routing_filter">
<title>Netty Routing Filter</title>
<simpara>The Netty Routing Filter runs if the url located in the <literal>ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR</literal> exchange attribute has a <literal>http</literal> or <literal>https</literal> scheme. It uses the Netty <literal>HttpClient</literal> to make the downstream proxy request. The response is put in the <literal>ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR</literal> exchange attribute for use in a later filter. (There is an experimental <literal>WebClientHttpRoutingFilter</literal> that performs the same function, but does not require netty)</simpara>
</section>
<section xml:id="_netty_write_response_filter">
<title>Netty Write Response Filter</title>
<simpara>The <literal>NettyWriteResponseFilter</literal> runs if there is a Netty <literal>HttpClientResponse</literal> in the <literal>ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR</literal> exchange attribute. It is run after all other filters have completed and writes the proxy response back to the gateway client response. (There is an experimental <literal>WebClientWriteResponseFilter</literal> that performs the same function, but does not require netty)</simpara>
</section>
<section xml:id="_routetorequesturl_filter">
<title>RouteToRequestUrl Filter</title>
<simpara>The <literal>RouteToRequestUrlFilter</literal> runs if there is a <literal>Route</literal> object in the <literal>ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR</literal> exchange attribute. It creates a new URI, based off of the request URI, but updated with the URI attribute of the <literal>Route</literal> object. The new URI is placed in the <literal>ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR</literal> exchange attribute`.</simpara>
<simpara>If the URI has a scheme prefix, such as <literal>lb:ws://serviceid</literal>, the <literal>lb</literal> scheme is stripped from the URI and placed in the <literal>ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR</literal> for use later in the filter chain.</simpara>
</section>
<section xml:id="_websocket_routing_filter">
<title>Websocket Routing Filter</title>
<simpara>The Websocket Routing Filter runs if the url located in the <literal>ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR</literal> exchange attribute has a <literal>ws</literal> or <literal>wss</literal> scheme. It uses the Spring Web Socket infrastructure to forward the Websocket request downstream.</simpara>
<simpara>Websockets may be load-balanced by prefixing the URI with <literal>lb</literal>, such as <literal>lb:ws://serviceid</literal>.</simpara>
<note>
<simpara>If you are using <link xl:href="https://github.com/sockjs">SockJS</link> as a fallback over normal http, you should configure a normal HTTP route as well as the Websocket Route.</simpara>
</note>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      # SockJS route
      - id: websocket_sockjs_route
        uri: http://localhost:3001
        predicates:
        - Path=/websocket/info/**
      # Normwal Websocket route
      - id: websocket_route
        uri: ws://localhost:3001
        predicates:
        - Path=/websocket/**</programlisting>
</para>
</formalpara>
</section>
<section xml:id="_making_an_exchange_as_routed">
<title>Making An Exchange As Routed</title>
<simpara>After the Gateway has routed a <literal>ServerWebExchange</literal> it will mark that exchange as "routed" by adding <literal>gatewayAlreadyRouted</literal>
to the exchange attributes.  Once a request has been marked as routed, other routing filters will not route the request again,
essentially skipping the filter.  There are convenience methods that you can use to mark an exchange as routed
or check if an exchange has already been routed.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>ServerWebExchangeUtils.isAlreadyRouted</literal> takes a <literal>ServerWebExchange</literal> object and checks if it has been "routed"</simpara>
</listitem>
<listitem>
<simpara><literal>ServerWebExchangeUtils.setAlreadyRouted</literal> takes a <literal>ServerWebExchange</literal> object and marks it as "routed"</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="_configuration_2">
<title>Configuration</title>
<simpara>Configuration for Spring Cloud Gateway is driven by a collection of `RouteDefinitionLocator`s.</simpara>
<formalpara>
<title>RouteDefinitionLocator.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">public interface RouteDefinitionLocator {
	Flux&lt;RouteDefinition&gt; getRouteDefinitions();
}</programlisting>
</para>
</formalpara>
<simpara>By default, a <literal>PropertiesRouteDefinitionLocator</literal> loads properties using Spring Boot&#8217;s <literal>@ConfigurationProperties</literal> mechanism.</simpara>
<simpara>The configuration examples above all use a shortcut notation that uses positional arguments rather than named ones. The two examples below are equivalent:</simpara>
<formalpara>
<title>application.yml</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">spring:
  cloud:
    gateway:
      routes:
      - id: setstatus_route
        uri: https://example.org
        filters:
        - name: SetStatus
          args:
            status: 401
      - id: setstatusshortcut_route
        uri: https://example.org
        filters:
        - SetStatus=401</programlisting>
</para>
</formalpara>
<simpara>For some usages of the gateway, properties will be adequate, but some production use cases will benefit from loading configuration from an external source, such as a database. Future milestone versions will have <literal>RouteDefinitionLocator</literal> implementations based off of Spring Data Repositories such as: Redis, MongoDB and Cassandra.</simpara>
<section xml:id="_fluent_java_routes_api">
<title>Fluent Java Routes API</title>
<simpara>To allow for simple configuration in Java, there is a fluent API defined in the <literal>RouteLocatorBuilder</literal> bean.</simpara>
<formalpara>
<title>GatewaySampleApplication.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">// static imports from GatewayFilters and RoutePredicates
@Bean
public RouteLocator customRouteLocator(RouteLocatorBuilder builder, ThrottleGatewayFilterFactory throttle) {
    return builder.routes()
            .route(r -&gt; r.host("**.abc.org").and().path("/image/png")
                .filters(f -&gt;
                        f.addResponseHeader("X-TestHeader", "foobar"))
                .uri("http://httpbin.org:80")
            )
            .route(r -&gt; r.path("/image/webp")
                .filters(f -&gt;
                        f.addResponseHeader("X-AnotherHeader", "baz"))
                .uri("http://httpbin.org:80")
            )
            .route(r -&gt; r.order(-1)
                .host("**.throttle.org").and().path("/get")
                .filters(f -&gt; f.filter(throttle.apply(1,
                        1,
                        10,
                        TimeUnit.SECONDS)))
                .uri("http://httpbin.org:80")
            )
            .build();
}</programlisting>
</para>
</formalpara>
<simpara>This style also allows for more custom predicate assertions. The predicates defined by <literal>RouteDefinitionLocator</literal> beans are combined using logical <literal>and</literal>. By using the fluent Java API, you can use the <literal>and()</literal>, <literal>or()</literal> and <literal>negate()</literal> operators on the <literal>Predicate</literal> class.</simpara>
</section>
<section xml:id="_discoveryclient_route_definition_locator">
<title>DiscoveryClient Route Definition Locator</title>
<simpara>The Gateway can be configured to create routes based on services registered with a <literal>DiscoveryClient</literal> compatible service registry.</simpara>
<simpara>To enable this, set <literal>spring.cloud.gateway.discovery.locator.enabled=true</literal> and make sure a <literal>DiscoveryClient</literal> implementation is on the classpath and enabled (such as Netflix Eureka, Consul or Zookeeper).</simpara>
</section>
</chapter>
<chapter xml:id="_actuator_api">
<title>Actuator API</title>
<simpara>TODO: document the <literal>/gateway</literal> actuator endpoint</simpara>
</chapter>
<chapter xml:id="_developer_guide">
<title>Developer Guide</title>
<simpara>TODO: overview of writing custom integrations</simpara>
<section xml:id="_writing_custom_route_predicate_factories">
<title>Writing Custom Route Predicate Factories</title>
<simpara>TODO: document writing Custom Route Predicate Factories</simpara>
</section>
<section xml:id="_writing_custom_gatewayfilter_factories">
<title>Writing Custom GatewayFilter Factories</title>
<simpara>In order to write a GatewayFilter you will need to implement <literal>GatewayFilterFactory</literal>.  There is an abstract class called <literal>AbstractGatewayFilterFactory</literal> which you can extend.</simpara>
<formalpara>
<title>PreGatewayFilterFactory.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">---
public class PreGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;PreGatewayFilterFactory.Config&gt; {</programlisting>
</para>
</formalpara>
<literallayout class="monospaced">public PreGatewayFilterFactory() {
	super(Config.class);
}</literallayout>
<literallayout class="monospaced">@Override
public GatewayFilter apply(Config config) {
	// grab configuration from Config object
	return (exchange, chain) -&gt; {
           //If you want to build a "pre" filter you need to manipulate the
           //request before calling change.filter
           ServerHttpRequest.Builder builder = exchange.getRequest().mutate();
           //use builder to manipulate the request
           return chain.filter(exchange.mutate().request(request).build());
	};
}</literallayout>
<literallayout class="monospaced">public static class Config {
       //Put the configuration properties for your filter here
}</literallayout>
<simpara>}</simpara>
<simpara><?asciidoc-hr?></simpara>
<formalpara>
<title>PostGatewayFilterFactory.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">---
public class PostGatewayFilterFactory extends AbstractGatewayFilterFactory&lt;PostGatewayFilterFactory.Config&gt; {</programlisting>
</para>
</formalpara>
<literallayout class="monospaced">public PostGatewayFilterFactory() {
	super(Config.class);
}</literallayout>
<literallayout class="monospaced">@Override
public GatewayFilter apply(Config config) {
	// grab configuration from Config object
	return (exchange, chain) -&gt; {
		return chain.filter(exchange).then(Mono.fromRunnable(() -&gt; {
			ServerHttpReponse response = exchange.getResponse();
			//Manipulate the response in some way
		}));
	};
}</literallayout>
<literallayout class="monospaced">public static class Config {
       //Put the configuration properties for your filter here
}</literallayout>
<simpara>}</simpara>
<simpara><?asciidoc-hr?></simpara>
</section>
<section xml:id="_writing_custom_global_filters">
<title>Writing Custom Global Filters</title>
<simpara>TODO: document writing Custom Global Filters</simpara>
</section>
<section xml:id="_writing_custom_route_locators_and_writers">
<title>Writing Custom Route Locators and Writers</title>
<simpara>TODO: document writing Custom Route Locators and Writers</simpara>
</section>
</chapter>
<chapter xml:id="_building_a_simple_gateway_using_spring_mvc_or_webflux">
<title>Building a Simple Gateway Using Spring MVC or Webflux</title>
<simpara>Spring Cloud Gateway provides a utility object called <literal>ProxyExchange</literal> which you can use inside a regular Spring web handler as a method parameter. It supports basic downstream HTTP exchanges via methods that mirror the HTTP verbs. With MVC it also supports forwarding to a local handler via the <literal>forward()</literal> method. To use the <literal>ProxyExchange</literal> just include the right module in your classpath (either <literal>spring-cloud-gateway-mvc</literal> or <literal>spring-cloud-gateway-webflux</literal>).</simpara>
<simpara>MVC example (proxying a request to "/test" downstream to a remote server):</simpara>
<programlisting language="java" linenumbering="unnumbered">@RestController
@SpringBootApplication
public class GatewaySampleApplication {

	@Value("${remote.home}")
	private URI home;

	@GetMapping("/test")
	public ResponseEntity&lt;?&gt; proxy(ProxyExchange&lt;byte[]&gt; proxy) throws Exception {
		return proxy.uri(home.toString() + "/image/png").get();
	}

}</programlisting>
<simpara>The same thing with Webflux:</simpara>
<programlisting language="java" linenumbering="unnumbered">@RestController
@SpringBootApplication
public class GatewaySampleApplication {

	@Value("${remote.home}")
	private URI home;

	@GetMapping("/test")
	public Mono&lt;ResponseEntity&lt;?&gt;&gt; proxy(ProxyExchange&lt;byte[]&gt; proxy) throws Exception {
		return proxy.uri(home.toString() + "/image/png").get();
	}

}</programlisting>
<simpara>There are convenience methods on the <literal>ProxyExchange</literal> to enable the handler method to discover and enhance the URI path of the incoming request. For example you might want to extract the trailing elements of a path to pass them downstream:</simpara>
<programlisting language="java" linenumbering="unnumbered">@GetMapping("/proxy/path/**")
public ResponseEntity&lt;?&gt; proxyPath(ProxyExchange&lt;byte[]&gt; proxy) throws Exception {
  String path = proxy.path("/proxy/path/");
  return proxy.uri(home.toString() + "/foos/" + path).get();
}</programlisting>
<simpara>All the features of Spring MVC or Webflux are available to Gateway handler methods. So you can inject request headers and query parameters, for instance, and you can constrain the incoming requests with declarations in the mapping annotation. See the documentation for <literal>@RequestMapping</literal> in Spring MVC for more details of those features.</simpara>
<simpara>Headers can be added to the downstream response using the <literal>header()</literal> methods on <literal>ProxyExchange</literal>.</simpara>
<simpara>You can also manipulate response headers (and anything else you like in the response) by adding a mapper to the <literal>get()</literal> etc. method. The mapper is a <literal>Function</literal> that takes the incoming <literal>ResponseEntity</literal> and converts it to an outgoing one.</simpara>
<simpara>First class support is provided for "sensitive" headers ("cookie" and "authorization" by default) which are not passed downstream, and for "proxy" headers (<literal>x-forwarded-*</literal>).</simpara>
</chapter>
</part>
<part xml:id="_spring_cloud_function">
<title>Spring Cloud Function</title>
<partintro>
<simpara>Mark Fisher, Dave Syer</simpara>
<simpara><?asciidoc-hr?></simpara>
</partintro>
<chapter xml:id="_introduction_2">
<title>Introduction</title>
<simpara>Spring Cloud Function is a project with the following high-level goals:</simpara>
<itemizedlist>
<listitem>
<simpara>Promote the implementation of business logic via functions.</simpara>
</listitem>
<listitem>
<simpara>Decouple the development lifecycle of business logic from any specific runtime target so that the same code can run as a web endpoint, a stream processor, or a task.</simpara>
</listitem>
<listitem>
<simpara>Support a uniform programming model across serverless providers, as well as the ability to run standalone (locally or in a PaaS).</simpara>
</listitem>
<listitem>
<simpara>Enable Spring Boot features (auto-configuration, dependency injection, metrics) on serverless providers.</simpara>
</listitem>
</itemizedlist>
<simpara>It abstracts away all of the transport details and
infrastructure, allowing the developer to keep all the familiar tools
and processes, and focus firmly on business logic.</simpara>
<simpara>Here&#8217;s a complete, executable, testable Spring Boot application
(implementing a simple string manipulation):</simpara>
<programlisting language="java" linenumbering="unnumbered">@SpringBootApplication
public class Application {

  @Bean
  public Function&lt;Flux&lt;String&gt;, Flux&lt;String&gt;&gt; uppercase() {
    return flux -&gt; flux.map(value -&gt; value.toUpperCase());
  }

  public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
  }
}</programlisting>
<simpara>It&#8217;s just a Spring Boot application, so it can be built, run and
tested, locally and in a CI build, the same way as any other Spring
Boot application. The <literal>Function</literal> is from <literal>java.util</literal> and <literal>Flux</literal> is a
<link xl:href="https://www.reactive-streams.org/">Reactive Streams</link> <literal>Publisher</literal> from
<link xl:href="https://projectreactor.io/">Project Reactor</link>. The function can be
accessed over HTTP or messaging.</simpara>
<simpara>Spring Cloud Function has 4 main features:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Wrappers for <literal>@Beans</literal> of type <literal>Function</literal>, <literal>Consumer</literal> and
<literal>Supplier</literal>, exposing them to the outside world as either HTTP
endpoints and/or message stream listeners/publishers with RabbitMQ, Kafka etc.</simpara>
</listitem>
<listitem>
<simpara>Compiling strings which are Java function bodies into bytecode, and
then turning them into <literal>@Beans</literal> that can be wrapped as above.</simpara>
</listitem>
<listitem>
<simpara>Deploying a JAR file containing such an application context with an
isolated classloader, so that you can pack them together in a single
JVM.</simpara>
</listitem>
<listitem>
<simpara>Adapters for <link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-aws">AWS Lambda</link>, <link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-azure">Azure</link>, <link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-openwhisk">Apache OpenWhisk</link> and possibly other "serverless" service providers.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>Spring Cloud is released under the non-restrictive Apache 2.0 license. If you would like to contribute to this section of the documentation or if you find an error, please find the source code and issue trackers in the project at <link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/docs/src/main/asciidoc">github</link>.</simpara>
</note>
</chapter>
<chapter xml:id="_getting_started">
<title>Getting Started</title>
<simpara>Build from the command line (and "install" the samples):</simpara>
<screen>$ ./mvnw clean install</screen>
<simpara>(If you like to YOLO add <literal>-DskipTests</literal>.)</simpara>
<simpara>Run one of the samples, e.g.</simpara>
<screen>$ java -jar spring-cloud-function-samples/function-sample/target/*.jar</screen>
<simpara>This runs the app and exposes its functions over HTTP, so you can
convert a string to uppercase, like this:</simpara>
<screen>$ curl -H "Content-Type: text/plain" localhost:8080/uppercase -d Hello
HELLO</screen>
<simpara>You can convert multiple strings (a <literal>Flux&lt;String&gt;</literal>) by separating them
with new lines</simpara>
<screen>$ curl -H "Content-Type: text/plain" localhost:8080/uppercase -d 'Hello
&gt; World'
HELLOWORLD</screen>
<simpara>(You can use <literal><superscript>Q</superscript>J</literal> in a terminal to insert a new line in a literal
string like that.)</simpara>
</chapter>
<chapter xml:id="_building_and_running_a_function">
<title>Building and Running a Function</title>
<simpara>The sample <literal>@SpringBootApplication</literal> above has a function that can be
decorated at runtime by Spring Cloud Function to be an HTTP endpoint,
or a Stream processor, for instance with RabbitMQ, Apache Kafka or
JMS.</simpara>
<simpara>The <literal>@Beans</literal> can be <literal>Function</literal>, <literal>Consumer</literal> or <literal>Supplier</literal> (all from
<literal>java.util</literal>), and their parametric types can be String or POJO. A
<literal>Function</literal> is exposed as a Spring Cloud Stream <literal>Processor</literal> if
<literal>spring-cloud-function-stream</literal> is on the classpath.
A <literal>Consumer</literal> is also exposed as a Stream
<literal>Sink</literal> and a <literal>Supplier</literal> translates to a Stream <literal>Source</literal>.
HTTP endpoints are exposed if the Stream binder is <literal>spring-cloud-stream-binder-servlet</literal>.</simpara>
<simpara>Functions can be of <literal>Flux&lt;String&gt;</literal> or <literal>Flux&lt;Pojo&gt;</literal> and Spring Cloud
Function takes care of converting the data to and from the desired
types, as long as it comes in as plain text or (in the case of the
POJO) JSON. TBD: support for <literal>Flux&lt;Message&lt;Pojo&gt;&gt;</literal> and maybe plain
<literal>Pojo</literal> types (Fluxes implied and implemented by the framework).</simpara>
<simpara>Functions can be grouped together in a single application, or deployed
one-per-jar. It&#8217;s up to the developer to choose. An app with multiple
functions can be deployed multiple times in different "personalities",
exposing different functions over different physical transports.</simpara>
</chapter>
<chapter xml:id="_function_catalog_and_flexible_function_signatures">
<title>Function Catalog and Flexible Function Signatures</title>
<simpara>One of the main features of Spring Cloud Function is to adapt and
support a range of type signatures for user-defined functions. So
users can supply a bean of type <literal>Function&lt;String,String&gt;</literal>, for
instance, and the <literal>FunctionCatalog</literal> will wrap it into a
<literal>Function&lt;Flux&lt;String&gt;,Flux&lt;String&gt;&gt;</literal>. Users don&#8217;t normally have to
care about the <literal>FunctionCatalog</literal> at all, but it is useful to know what
kind of functions are supported in user code.</simpara>
<simpara>Generally speaking users can expect that if they write a function for
a plain old Java type (or primitive wrapper), then the function
catalog will wrap it to a <literal>Flux</literal> of the same type. If the user writes
a function using <literal>Message</literal> (from spring-messaging) it will receive and
transmit headers from any adapter that supports key-value metadata
(e.g. HTTP headers). Here are the details.</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">User Function</entry>
<entry align="left" valign="top">Catalog Registration</entry>
<entry align="left" valign="top"></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>Function&lt;S,T&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;S&gt;, Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Function&lt;Message&lt;S&gt;,Message&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;Message&lt;S&gt;&gt;, Flux&lt;Message&lt;T&gt;&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;S&gt;, Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;S&gt;, Flux&lt;T&gt;&gt;</literal> (pass through)</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Supplier&lt;T&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Supplier&lt;Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Supplier&lt;Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Supplier&lt;Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Consumer&lt;T&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;T&gt;, Mono&lt;Void&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Consumer&lt;Message&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Function&lt;Flux&lt;Message&lt;T&gt;&gt;, Mono&lt;Void&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>Consumer&lt;Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Consumer&lt;Flux&lt;T&gt;&gt;</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Consumer is a little bit special because it has a <literal>void</literal> return type,
which implies blocking, at least potentially. Most likely you will not
need to write <literal>Consumer&lt;Flux&lt;?&gt;&gt;</literal>, but if you do need to do that,
remember to subscribe to the input flux. If you declare a <literal>Consumer</literal>
of a non publisher type (which is normal), it will be converted to a
function that returns a publisher, so that it can be subscribed to in
a controlled way.</simpara>
<simpara>A function catalog can contain a <literal>Supplier</literal> and a <literal>Function</literal> (or
<literal>Consumer</literal>) with the same name (like a GET and a POST to the same
resource). It can even contain a <literal>Consumer&lt;Flux&lt;&gt;&gt;</literal> with the same name
as a <literal>Function</literal>, but it cannot contain a <literal>Consumer&lt;T&gt;</literal> and a
<literal>Function&lt;T,S&gt;</literal> with the same name when <literal>T</literal> is not a <literal>Publisher</literal>
because the consumer would be converted to a <literal>Function</literal> and only one
of them can be registered.</simpara>
</chapter>
<chapter xml:id="_standalone_web_applications">
<title>Standalone Web Applications</title>
<simpara>The <literal>spring-cloud-function-web</literal> module has autoconfiguration that
activates when it is included in a Spring Boot web application (with
MVC support). There is also a <literal>spring-cloud-starter-function-web</literal> to
collect all the optional dependnecies in case you just want a simple
getting started experience.</simpara>
<simpara>With the web configurations activated your app will have an MVC
endpoint (on "/" by default, but configurable with
<literal>spring.cloud.function.web.path</literal>) that can be used to access the
functions in the application context. The supported content types are
plain text and JSON.</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="20*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Method</entry>
<entry align="left" valign="top">Path</entry>
<entry align="left" valign="top">Request</entry>
<entry align="left" valign="top">Response</entry>
<entry align="left" valign="top">Status</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>GET</simpara></entry>
<entry align="left" valign="top"><simpara>/{supplier}</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>Items from the named supplier</simpara></entry>
<entry align="left" valign="top"><simpara>200 OK</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>POST</simpara></entry>
<entry align="left" valign="top"><simpara>/{consumer}</simpara></entry>
<entry align="left" valign="top"><simpara>JSON object or text</simpara></entry>
<entry align="left" valign="top"><simpara>Mirrors input and pushes request body into consumer</simpara></entry>
<entry align="left" valign="top"><simpara>202 Accepted</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>POST</simpara></entry>
<entry align="left" valign="top"><simpara>/{consumer}</simpara></entry>
<entry align="left" valign="top"><simpara>JSON array or text with new lines</simpara></entry>
<entry align="left" valign="top"><simpara>Mirrors input and pushes body into consumer one by one</simpara></entry>
<entry align="left" valign="top"><simpara>202 Accepted</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>POST</simpara></entry>
<entry align="left" valign="top"><simpara>/{function}</simpara></entry>
<entry align="left" valign="top"><simpara>JSON object or text</simpara></entry>
<entry align="left" valign="top"><simpara>The result of applying the named function</simpara></entry>
<entry align="left" valign="top"><simpara>200 OK</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>POST</simpara></entry>
<entry align="left" valign="top"><simpara>/{function}</simpara></entry>
<entry align="left" valign="top"><simpara>JSON array or text with new lines</simpara></entry>
<entry align="left" valign="top"><simpara>The result of applying the named function</simpara></entry>
<entry align="left" valign="top"><simpara>200 OK</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>GET</simpara></entry>
<entry align="left" valign="top"><simpara>/{function}/{item}</simpara></entry>
<entry align="left" valign="top"><simpara>-</simpara></entry>
<entry align="left" valign="top"><simpara>Convert the item into an object and return the result of applying the function</simpara></entry>
<entry align="left" valign="top"><simpara>200 OK</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>As the table above shows the behaviour of the endpoint depends on the method and also the type of incoming request data. When the incoming data is single valued, and the target function is declared as obviously single valued (i.e. not returning a collection or <literal>Flux</literal>), then the response will also contain a single value. For multi-valued responses the client can ask for a server-sent event stream by sending `Accept: text/event-stream". If there is only one function (consumer etc.) then the name in the path is optional. Composite functions can be addressed using pipes or commas to separate function names (pipes are legal in URL paths, but a bit awkward to type on the command line).</simpara>
<simpara>Functions and consumers that are declared with input and output in <literal>Message&lt;?&gt;</literal> will see the request headers on the input messages, and the output message headers will be converted to HTTP headers.</simpara>
<simpara>When POSTing text the response format might be different with Spring Boot 2.0 and older versions, depending on the content negotiation (provide content type and accpt headers for the best results).</simpara>
</chapter>
<chapter xml:id="_standalone_streaming_applications">
<title>Standalone Streaming Applications</title>
<simpara>To send or receive messages from a broker (such as RabbitMQ or Kafka) you can use the <literal>spring-cloud-function-stream</literal> adapter. Add the adapter to your classpath along with the appropriate binder from Spring Cloud Stream. The adapter will bind to the message broker as a <literal>Processor</literal> (input and output streams) unless the user explicitly disables one or the other using <literal>spring.cloud.function.stream.{source,sink}.enabled=false</literal>.</simpara>
<simpara>An incoming message is routed to a function (or consumer). If there is only one, then the choice is obvious. If there are multiple functions that can accept an incoming message, the message is inspected to see if there is a <literal>stream_routekey</literal> header containing the name of a function. Routing headers or function names can be composed using a comma- or pipe-separated name. The header is also added to outgoing messages from a supplier. Messages with no route key can be routed exclusively to a function or consumer by specifying <literal>spring.cloud.function.stream.{processor,sink}.name</literal>. If a single function cannot be identified to process an incoming message there will be an error, unless you set <literal>spring.cloud.function.stream.shared=true</literal>, in which case such messages will be sent to all compatible functions. A single supplier can be chosen for output messages from a supplier (if more than one is available) using the <literal>spring.cloud.function.stream.source.name</literal>.</simpara>
<note>
<simpara>some binders will fail on startup if the message broker is not available and the function catalog contains suppliers that immediately produce messages when accessed. You can switch off the automatic publishing from suppliers on startup using the <literal>spring.cloud.function.strean.supplier.enabled=false</literal> flag.</simpara>
</note>
</chapter>
<chapter xml:id="_deploying_a_packaged_function">
<title>Deploying a Packaged Function</title>
<simpara>Spring Cloud Function provides a "deployer" library that allows you to launch a jar file (or exploded archive, or set of jar files) with an isolated class loader and expose the functions defined in it. This is quite a powerful tool that would allow you to, for instance, adapt a function to a range of different input-output adapters without changing the target jar file. Serverless platforms often have this kind of feature built in, so you could see it as a building block for a function invoker in such a platform (indeed the <link xl:href="https://projectriff.io">Riff</link> Java function invoker uses this library).</simpara>
<simpara>The standard entry point of the API is the Spring configuration annotation <literal>@EnableFunctionDeployer</literal>. If that is used in a Spring Boot application the deployer kicks in and looks for some configuration to tell it where to find the function jar. At a minimum the user has to provide a <literal>function.location</literal> which is a URL or resource location for the archive containing the functions. It can optionally use a <literal>maven:</literal> prefix to locate the artifact via a dependency lookup (see <literal>FunctionProperties</literal> for complete details). A Spring Boot application is bootstrapped from the jar file, using the <literal>MANIFEST.MF</literal> to locate a start class, so that a standard Spring Boot fat jar works well, for example. If the target jar can be launched successfully then the result is a function registered in the main application&#8217;s <literal>FunctionCatalog</literal>. The registered function can be applied by code in the main application, even though it was created in an isolated class loader (by deault).</simpara>
</chapter>
<chapter xml:id="_dynamic_compilation">
<title>Dynamic Compilation</title>
<simpara>There is a sample app that uses the function compiler to create a
function from a configuration property. The vanilla "function-sample"
also has that feature. And there are some scripts that you can run to
see the compilation happening at run time. To run these examples,
change into the <literal>scripts</literal> directory:</simpara>
<screen>cd scripts</screen>
<simpara>Also, start a RabbitMQ server locally (e.g. execute <literal>rabbitmq-server</literal>).</simpara>
<simpara>Start the Function Registry Service:</simpara>
<screen>./function-registry.sh</screen>
<simpara>Register a Function:</simpara>
<screen>./registerFunction.sh -n uppercase -f "f-&gt;f.map(s-&gt;s.toString().toUpperCase())"</screen>
<simpara>Run a REST Microservice using that Function:</simpara>
<screen>./web.sh -f uppercase -p 9000
curl -H "Content-Type: text/plain" -H "Accept: text/plain" localhost:9000/uppercase -d foo</screen>
<simpara>Register a Supplier:</simpara>
<screen>./registerSupplier.sh -n words -f "()-&gt;Flux.just(\"foo\",\"bar\")"</screen>
<simpara>Run a REST Microservice using that Supplier:</simpara>
<screen>./web.sh -s words -p 9001
curl -H "Accept: application/json" localhost:9001/words</screen>
<simpara>Register a Consumer:</simpara>
<screen>./registerConsumer.sh -n print -t String -f "System.out::println"</screen>
<simpara>Run a REST Microservice using that Consumer:</simpara>
<screen>./web.sh -c print -p 9002
curl -X POST -H "Content-Type: text/plain" -d foo localhost:9002/print</screen>
<simpara>Run Stream Processing Microservices:</simpara>
<simpara>First register a streaming words supplier:</simpara>
<screen>./registerSupplier.sh -n wordstream -f "()-&gt;Flux.interval(Duration.ofMillis(1000)).map(i-&gt;\"message-\"+i)"</screen>
<simpara>Then start the source (supplier), processor (function), and sink (consumer) apps
(in reverse order):</simpara>
<screen>./stream.sh -p 9103 -i uppercaseWords -c print
./stream.sh -p 9102 -i words -f uppercase -o uppercaseWords
./stream.sh -p 9101 -s wordstream -o words</screen>
<simpara>The output will appear in the console of the sink app (one message per second, converted to uppercase):</simpara>
<screen>MESSAGE-0
MESSAGE-1
MESSAGE-2
MESSAGE-3
MESSAGE-4
MESSAGE-5
MESSAGE-6
MESSAGE-7
MESSAGE-8
MESSAGE-9
...</screen>
</chapter>
<chapter xml:id="_serverless_platform_adapters">
<title>Serverless Platform Adapters</title>
<simpara>As well as being able to run as a standalone process, a Spring Cloud
Function application can be adapted to run one of the existing
serverless platforms. In the project there are adapters for
<link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-aws">AWS
Lambda</link>,
<link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-azure">Azure</link>,
and
<link xl:href="https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-openwhisk">Apache
OpenWhisk</link>. The <link xl:href="https://github.com/fnproject/fn">Oracle Fn platform</link>
has its own Spring Cloud Function adapter. And
<link xl:href="https://projectriff.io">Riff</link> supports Java functions and its
<link xl:href="https://github.com/projectriff/java-function-invoker">Java Function
Invoker</link> acts natively is an adapter for Spring Cloud Function jars.</simpara>
<section xml:id="_aws_lambda">
<title>AWS Lambda</title>
<simpara>The <link xl:href="https://aws.amazon.com/">AWS</link> adapter takes a Spring Cloud Function app and converts it to a form that can run in AWS Lambda.</simpara>
<section xml:id="_introduction_3">
<title>Introduction</title>
<simpara>The adapter has a couple of generic request handlers that you can use. The most generic is <literal>SpringBootStreamHandler</literal>, which uses a Jackson <literal>ObjectMapper</literal> provided by Spring Boot to serialize and deserialize the objects in the function. There is also a <literal>SpringBootRequestHandler</literal> which you can extend, and provide the input and output types as type parameters (enabling AWS to inspect the class and do the JSON conversions itself).</simpara>
<simpara>If your app has more than one <literal>@Bean</literal> of type <literal>Function</literal> etc. then you can choose the one to use by configuring <literal>function.name</literal> (e.g. as <literal>FUNCTION_NAME</literal> environment variable in AWS). The functions are extracted from the Spring Cloud <literal>FunctionCatalog</literal> (searching first for <literal>Function</literal> then <literal>Consumer</literal> and finally <literal>Supplier</literal>).</simpara>
</section>
<section xml:id="_notes_on_jar_layout">
<title>Notes on JAR Layout</title>
<simpara>You don&#8217;t need the Spring Cloud Function Web or Stream adapter at runtime in Lambda, so you might need to exclude those before you create the JAR you send to AWS. A Lambda application has to be shaded, but a Spring Boot standalone application does not, so you can run the same app using 2 separate jars (as per the sample). The sample app creates 2 jar files, one with an <literal>aws</literal> classifier for deploying in Lambda, and one executable (thin) jar that includes <literal>spring-cloud-function-web</literal> at runtime. Spring Cloud Function will try and locate a "main class" for you from the JAR file manifest, using the <literal>Start-Class</literal> attribute (which will be added for you by the Spring Boot tooling if you use the starter parent). If there is no <literal>Start-Class</literal> in your manifest you can use an environment variable <literal>MAIN_CLASS</literal> when you deploy the function to AWS.</simpara>
</section>
<section xml:id="_upload">
<title>Upload</title>
<simpara>Build the sample under <literal>spring-cloud-function-samples/function-sample-aws</literal> and upload the <literal>-aws</literal> jar file to Lambda. The handler can be <literal>example.Handler</literal> or <literal>org.springframework.cloud.function.adapter.aws.SpringBootStreamHandler</literal> (FQN of the class, <emphasis>not</emphasis> a method reference, although Lambda does accept method references).</simpara>
<screen>./mvnw -U clean package</screen>
<simpara>Using the AWS command line tools it looks like this:</simpara>
<screen>aws lambda create-function --function-name Uppercase --role arn:aws:iam::[USERID]:role/service-role/[ROLE] --zip-file fileb://function-sample-aws/target/function-sample-aws-1.0.0.RELEASE-aws.jar --handler org.springframework.cloud.function.adapter.aws.SpringBootStreamHandler --description "Spring Cloud Function Adapter Example" --runtime java8 --region us-east-1 --timeout 30 --memory-size 1024 --publish</screen>
<simpara>The input type for the function in the AWS sample is a Foo with a single property called "value". So you would need this to test it:</simpara>
<screen>{
  "value": "test"
}</screen>
</section>
<section xml:id="_platfom_specific_features">
<title>Platfom Specific Features</title>
<section xml:id="_http_and_api_gateway">
<title>HTTP and API Gateway</title>
<simpara>AWS has some platform-specific data types, including batching of messages, which is much more efficient than processing each one individually. To make use of these types you can write a function that depends on those types. Or you can rely on Spring to extract the data from the AWS types and convert it to a Spring <literal>Message</literal>. To do this you tell AWS that the function is of a specific generic handler type (depending on the AWS service) and provide a bean of type <literal>Function&lt;Message&lt;S&gt;,Message&lt;T&gt;&gt;</literal>, where <literal>S</literal> and <literal>T</literal> are your business data types. If there is more than one bean of type <literal>Function</literal> you may also need to configure the Spring Boot property <literal>function.name</literal> to be the name of the target bean (e.g. use <literal>FUNCTION_NAME</literal> as an environment variable).</simpara>
<simpara>The supported AWS services and generic handler types are listed below:</simpara>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Service</entry>
<entry align="left" valign="top">AWS Types</entry>
<entry align="left" valign="top">Generic Handler</entry>
<entry align="left" valign="top"></entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>API Gateway</simpara></entry>
<entry align="left" valign="top"><simpara><literal>APIGatewayProxyRequestEvent</literal>, <literal>APIGatewayProxyResponseEvent</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler</literal></simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Kinesis</simpara></entry>
<entry align="left" valign="top"><simpara>KinesisEvent</simpara></entry>
<entry align="left" valign="top"><simpara>org.springframework.cloud.function.adapter.aws.SpringBootKinesisEventHandler</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>For example, to deploy behind an API Gateway, use <literal>--handler org.springframework.cloud.function.adapter.aws.SpringBootApiGatewayRequestHandler</literal> in your AWS command line (in via the UI) and define a <literal>@Bean</literal> of type <literal>Function&lt;Message&lt;Foo&gt;,Message&lt;Bar&gt;&gt;</literal> where <literal>Foo</literal> and <literal>Bar</literal> are POJO types (the data will be marshalled and unmarshalled by AWS using Jackson).</simpara>
</section>
</section>
</section>
<section xml:id="_azure_functions">
<title>Azure Functions</title>
<simpara>The <link xl:href="https://azure.microsoft.com">Azure</link> adapter bootstraps a Spring Cloud Function context and channels function calls from the Azure framework into the user functions, using Spring Boot configuration where necessary. Azure Functions has quite a unique, but invasive programming model, involving annotations in user code that are specific to the platform. The Spring Cloud Function Azure adapter trades the convenience of these annotations for portability of the function implementations. Instead of using the annotations you have to write some JSON by hand (at least for now) to guide the platform to call the right methods in the adapter.</simpara>
<simpara>This project provides an adapter layer for a Spring Cloud Function application onto Azure.
You can write an app with a single <literal>@Bean</literal> of type <literal>Function</literal> and it will be deployable in Azure if you get the JAR file laid out right.</simpara>
<simpara>The adapter has a generic HTTP request handler that you can use optionally.
There is a <literal>AzureSpringBootRequestHandler</literal> which you must extend, and provide the input and output types as type parameters (enabling Azure to inspect the class and do the JSON conversions itself).</simpara>
<simpara>If your app has more than one <literal>@Bean</literal> of type <literal>Function</literal> etc. then you can choose the one to use by configuring <literal>function.name</literal>.
The functions are extracted from the Spring Cloud <literal>FunctionCatalog</literal>.</simpara>
<section xml:id="_notes_on_jar_layout_2">
<title>Notes on JAR Layout</title>
<simpara>You don&#8217;t need the Spring Cloud Function Web at runtime in Azure, so you need to exclude this before you create the JAR you deploy to Azure.
A function application on Azure has to be shaded, but a Spring Boot standalone application does not, so you can run the same app using 2 separate jars (as per the sample here).
The sample app creates the shaded jar file, with an <literal>azure</literal> classifier for deploying in Azure.</simpara>
</section>
<section xml:id="_json_configuration">
<title>JSON Configuration</title>
<simpara>The Azure tooling needs to find some JSON configuration files to tell it how to deploy and integrate the function (e.g. which Java class to use as the entry point, and which triggers to use). Those files can be created with the Maven plugin for a non-Spring function, but the tooling doesn&#8217;t work yet with the adapter in its current form. There is an example <literal>function.json</literal> in the sample which hooks the function up as an HTTP endpoint:</simpara>
<screen>{
  "scriptFile" : "../function-sample-azure-1.0.0.RELEASE-azure.jar",
  "entryPoint" : "example.FooHandler.execute",
  "bindings" : [ {
    "type" : "httpTrigger",
    "name" : "foo",
    "direction" : "in",
    "authLevel" : "anonymous",
    "methods" : [ "get", "post" ]
  }, {
    "type" : "http",
    "name" : "$return",
    "direction" : "out"
  } ],
  "disabled" : false
}</screen>
</section>
<section xml:id="_build">
<title>Build</title>
<screen>./mvnw -U clean package</screen>
</section>
<section xml:id="_running_the_sample">
<title>Running the sample</title>
<simpara>You can run the sample locally, just like the other Spring Cloud Function samples:</simpara>
<simpara><?asciidoc-hr?></simpara>
<simpara><?asciidoc-hr?></simpara>
<simpara>and <literal>curl -H "Content-Type: text/plain" localhost:8080/function -d '{"value": "hello foobar"}'</literal>.</simpara>
<simpara>You will need the <literal>az</literal> CLI app and some node.js fu (see <link xl:href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-maven">https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-maven</link> for more detail). To deploy the function on Azure runtime:</simpara>
<screen>$ az login
$ mvn azure-functions:deploy</screen>
<simpara>On another terminal try this: <literal>curl <link xl:href="https://&lt;azure-function-url-from-the-log&gt;/api/uppercase">https://&lt;azure-function-url-from-the-log&gt;/api/uppercase</link> -d '{"value": "hello foobar!"}'</literal>. Please ensure that you use the right URL for the function above. Alternatively you can test the function in the Azure Dashboard UI (click on the function name, go to the right hand side and click "Test" and to the bottom right, "Run").</simpara>
<simpara>The input type for the function in the Azure sample is a Foo with a single property called "value". So you need this to test it with something like below:</simpara>
<screen>{
  "value": "foobar"
}</screen>
</section>
</section>
<section xml:id="_apache_openwhisk">
<title>Apache Openwhisk</title>
<simpara>The <link xl:href="https://openwhisk.apache.org/">OpenWhisk</link> adapter is in the form of an executable jar that can be used in a a docker image to be deployed to Openwhisk. The platform works in request-response mode, listening on port 8080 on a specific endpoint, so the adapter is a simple Spring MVC application.</simpara>
<section xml:id="_quick_start_5">
<title>Quick Start</title>
<simpara>Implement a POF (be sure to use the <literal>functions</literal> package):</simpara>
<screen>package functions;

import java.util.function.Function;

public class Uppercase implements Function&lt;String, String&gt; {

	public String apply(String input) {
		return input.toUpperCase();
	}
}</screen>
<simpara>Install it into your local Maven repository:</simpara>
<screen>./mvnw clean install</screen>
<simpara>Create a <literal>function.properties</literal> file that provides its Maven coordinates. For example:</simpara>
<screen>dependencies.function: com.example:pof:0.0.1-SNAPSHOT</screen>
<simpara>Copy the openwhisk runner JAR to the working directory (same directory as the properties file):</simpara>
<screen>cp spring-cloud-function-adapters/spring-cloud-function-adapter-openwhisk/target/spring-cloud-function-adapter-openwhisk-1.0.0.RELEASE.jar runner.jar</screen>
<simpara>Generate a m2 repo from the <literal>--thin.dryrun</literal> of the runner JAR with the above properties file:</simpara>
<screen>java -jar -Dthin.root=m2 runner.jar --thin.name=function --thin.dryrun</screen>
<simpara>Use the following Dockerfile:</simpara>
<screen>FROM openjdk:8-jdk-alpine
VOLUME /tmp
COPY m2 /m2
ADD runner.jar .
ADD function.properties .
ENV JAVA_OPTS=""
ENTRYPOINT [ "java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "runner.jar", "--thin.root=/m2", "--thin.name=function", "--function.name=uppercase"]
EXPOSE 8080</screen>
<blockquote>
<note>
<simpara>you could use a Spring Cloud Function app, instead of just a jar with a POF in it, in which case you would have to change the way the app runs in the container so that it picks up the main class as a source file. For example, you could change the <literal>ENTRYPOINT</literal> above and add <literal>--spring.main.sources=com.example.SampleApplication</literal>.</simpara>
</note>
</blockquote>
<simpara>Build the Docker image:</simpara>
<screen>docker build -t [username/appname] .</screen>
<simpara>Push the Docker image:</simpara>
<screen>docker push [username/appname]</screen>
<simpara>Use the OpenWhisk CLI (e.g. after <literal>vagrant ssh</literal>) to create the action:</simpara>
<screen>wsk action create example --docker [username/appname]</screen>
<simpara>Invoke the action:</simpara>
<screen>wsk action invoke example --result --param payload foo
{
    "result": "FOO"
}</screen>
</section>
</section>
</chapter>
</part>
<part xml:id="_appendix_compendium_of_configuration_properties">
<title>Appendix: Compendium of Configuration Properties</title>
<partintro>
<informaltable frame="topbot" rowsep="1" colsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Name</entry>
<entry align="left" valign="top">Default</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>encrypt.fail-on-error</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to say that a process should fail if there is an encryption or decryption
 error.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.key</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>A symmetric key. As a stronger alternative consider using a keystore.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.key-store.alias</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Alias for a key in the store.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.key-store.location</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Location of the key store file, e.g. classpath:/keystore.jks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.key-store.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Password that locks the keystore.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.key-store.secret</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Secret protecting the key (defaults to the same as the password).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.rsa.algorithm</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The RSA algorithm to use (DEFAULT or OEAP). Once it is set do not change it (or
 existing ciphers will not a decryptable).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.rsa.salt</simpara></entry>
<entry align="left" valign="top"><simpara>deadbeef</simpara></entry>
<entry align="left" valign="top"><simpara>Salt for the random secret used to encrypt cipher text. Once it is set do not
 change it (or existing ciphers will not a decryptable).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.rsa.strong</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that "strong" AES encryption should be used internally. If
 true then the GCM algorithm is applied to the AES encrypted bytes. Default is
 false (in which case "standard" CBC is used instead). Once it is set do not
 change it (or existing ciphers will not a decryptable).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>encrypt.salt</simpara></entry>
<entry align="left" valign="top"><simpara>deadbeef</simpara></entry>
<entry align="left" valign="top"><simpara>A salt for the symmetric key in the form of a hex-encoded byte array. As a stronger
 alternative consider using a keystore.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>endpoints.zookeeper.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the /zookeeper endpoint to inspect the state of zookeeper.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.allow-redirects</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether server can redirect a client request to a backup server/cluster.
 If set to false, the server will handle the request directly, If set to true, it
 may send HTTP redirect to the client, with a new server location.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.availability-zones</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the list of availability zones (used in AWS data centers) for the region in
 which this instance resides.
</simpara><simpara> The changes are effective at runtime at the next registry fetch cycle as specified
 by registryFetchIntervalSeconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.backup-registry-impl</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the name of the implementation which implements BackupRegistry to fetch the
 registry information as a fall back option for only the first time when the eureka
 client starts.
</simpara><simpara> This may be needed for applications which needs additional resiliency for registry
 information without which it cannot operate.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.cache-refresh-executor-exponential-back-off-bound</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>Cache refresh executor exponential back off related property. It is a maximum
 multiplier value for retry delay, in case where a sequence of timeouts occurred.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.cache-refresh-executor-thread-pool-size</simpara></entry>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>The thread pool size for the cacheRefreshExecutor to initialise with</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.client-data-accept</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>EurekaAccept name for client data accept</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.decoder-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>This is a transient config and once the latest codecs are stable, can be removed
 (as there will only be one)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.disable-delta</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the eureka client should disable fetching of delta and should
 rather resort to getting the full registry information.
</simpara><simpara> Note that the delta fetches can reduce the traffic tremendously, because the rate
 of change with the eureka server is normally much lower than the rate of fetches.
</simpara><simpara> The changes are effective at runtime at the next registry fetch cycle as specified
 by registryFetchIntervalSeconds</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.dollar-replacement</simpara></entry>
<entry align="left" valign="top"><simpara>_-</simpara></entry>
<entry align="left" valign="top"><simpara>Get a replacement string for Dollar sign &lt;code&gt;$&lt;/code&gt; during
 serializing/deserializing information in eureka server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the Eureka client is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.encoder-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>This is a transient config and once the latest codecs are stable, can be removed
 (as there will only be one)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.escape-char-replacement</simpara></entry>
<entry align="left" valign="top"><simpara>__</simpara></entry>
<entry align="left" valign="top"><simpara>Get a replacement string for underscore sign &lt;code&gt;_&lt;/code&gt; during
 serializing/deserializing information in eureka server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-connection-idle-timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how much time (in seconds) that the HTTP connections to eureka server can
 stay idle before it can be closed.
</simpara><simpara> In the AWS environment, it is recommended that the values is 30 seconds or less,
 since the firewall cleans up the connection information after a few mins leaving
 the connection hanging in limbo</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-connect-timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how long to wait (in seconds) before a connection to eureka server needs
 to timeout. Note that the connections in the client are pooled by
 org.apache.http.client.HttpClient and this setting affects the actual connection
 creation and also the wait time to get the connection from the pool.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-d-n-s-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the DNS name to be queried to get the list of eureka servers.This information
 is not required if the contract returns the service urls by implementing
 serviceUrls.
</simpara><simpara> The DNS mechanism is used when useDnsForFetchingServiceUrls is set to true and the
 eureka client expects the DNS to configured a certain way so that it can fetch
 changing eureka servers dynamically.
</simpara><simpara> The changes are effective at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the port to be used to construct the service url to contact eureka server when
 the list of eureka servers come from the DNS.This information is not required if
 the contract returns the service urls eurekaServerServiceUrls(String).
</simpara><simpara> The DNS mechanism is used when useDnsForFetchingServiceUrls is set to true and the
 eureka client expects the DNS to configured a certain way so that it can fetch
 changing eureka servers dynamically.
</simpara><simpara> The changes are effective at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-read-timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>8</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how long to wait (in seconds) before a read from eureka server needs to
 timeout.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-total-connections</simpara></entry>
<entry align="left" valign="top"><simpara>200</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the total number of connections that is allowed from eureka client to all
 eureka servers.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-total-connections-per-host</simpara></entry>
<entry align="left" valign="top"><simpara>50</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the total number of connections that is allowed from eureka client to a eureka
 server host.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-server-u-r-l-context</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the URL context to be used to construct the service url to contact eureka
 server when the list of eureka servers come from the DNS. This information is not
 required if the contract returns the service urls from eurekaServerServiceUrls.
</simpara><simpara> The DNS mechanism is used when useDnsForFetchingServiceUrls is set to true and the
 eureka client expects the DNS to configured a certain way so that it can fetch
 changing eureka servers dynamically. The changes are effective at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.eureka-service-url-poll-interval-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how often(in seconds) to poll for changes to eureka server information.
 Eureka servers could be added or removed and this setting controls how soon the
 eureka clients should know about it.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.fetch-registry</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether this client should fetch eureka registry information from eureka
 server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.fetch-remote-regions-registry</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Comma separated list of regions for which the eureka registry information will be
 fetched. It is mandatory to define the availability zones for each of these regions
 as returned by availabilityZones. Failing to do so, will result in failure of
 discovery client startup.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.filter-only-up-instances</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether to get the applications after filtering the applications for
 instances with only InstanceStatus UP states.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.g-zip-content</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the content fetched from eureka server has to be compressed
 whenever it is supported by the server. The registry information from the eureka
 server is compressed for optimum network traffic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.heartbeat-executor-exponential-back-off-bound</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>Heartbeat executor exponential back off related property. It is a maximum
 multiplier value for retry delay, in case where a sequence of timeouts occurred.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.heartbeat-executor-thread-pool-size</simpara></entry>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>The thread pool size for the heartbeatExecutor to initialise with</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.initial-instance-info-replication-interval-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>40</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how long initially (in seconds) to replicate instance info to the eureka
 server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.instance-info-replication-interval-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how often(in seconds) to replicate instance changes to be replicated to
 the eureka server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.log-delta-diff</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether to log differences between the eureka server and the eureka
 client in terms of registry information.
</simpara><simpara> Eureka client tries to retrieve only delta changes from eureka server to minimize
 network traffic. After receiving the deltas, eureka client reconciles the
 information from the server to verify it has not missed out some information.
 Reconciliation failures could happen when the client has had network issues
 communicating to server.If the reconciliation fails, eureka client gets the full
 registry information.
</simpara><simpara> While getting the full registry information, the eureka client can log the
 differences between the client and the server and this setting controls that.
</simpara><simpara> The changes are effective at runtime at the next registry fetch cycle as specified
 by registryFetchIntervalSecondsr</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.on-demand-update-status-change</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If set to true, local status updates via ApplicationInfoManager will trigger
 on-demand (but rate limited) register/updates to remote eureka servers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.prefer-same-zone-eureka</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether or not this instance should try to use the eureka server in the
 same zone for latency and/or other reason.
</simpara><simpara> Ideally eureka clients are configured to talk to servers in the same zone
</simpara><simpara> The changes are effective at runtime at the next registry fetch cycle as specified
 by registryFetchIntervalSeconds</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.property-resolver</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.proxy-host</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the proxy host to eureka server if any.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.proxy-password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the proxy password if any.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.proxy-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the proxy port to eureka server if any.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.proxy-user-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the proxy user name if any.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.region</simpara></entry>
<entry align="left" valign="top"><simpara>us-east-1</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the region (used in AWS datacenters) where this instance resides.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.register-with-eureka</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether or not this instance should register its information with eureka
 server for discovery by others.
</simpara><simpara> In some cases, you do not want your instances to be discovered whereas you just
 want do discover other instances.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.registry-fetch-interval-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how often(in seconds) to fetch the registry information from the eureka
 server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.registry-refresh-single-vip-address</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Indicates whether the client is only interested in the registry information for a
 single VIP.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.service-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Map of availability zone to list of fully qualified URLs to communicate with eureka
 server. Each value can be a single URL or a comma separated list of alternative
 locations.
</simpara><simpara> Typically the eureka server URLs carry protocol,host,port,context and version
 information if any. Example:
 <link xl:href="https://ec2-256-156-243-129.compute-1.amazonaws.com:7001/eureka/">https://ec2-256-156-243-129.compute-1.amazonaws.com:7001/eureka/</link>
</simpara><simpara> The changes are effective at runtime at the next service url refresh cycle as
 specified by eurekaServiceUrlPollIntervalSeconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.should-enforce-registration-at-init</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the client should enforce registration during initialization. Defaults to false.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.should-unregister-on-shutdown</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the client should explicitly unregister itself from the remote server
 on client shutdown.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.client.use-dns-for-fetching-service-urls</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the eureka client should use the DNS mechanism to fetch a list of
 eureka servers to talk to. When the DNS name is updated to have additional servers,
 that information is used immediately after the eureka client polls for that
 information as specified in eurekaServiceUrlPollIntervalSeconds.
</simpara><simpara> Alternatively, the service urls can be returned serviceUrls, but the users should
 implement their own mechanism to return the updated list in case of changes.
</simpara><simpara> The changes are effective at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.dashboard.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to enable the Eureka dashboard. Default true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.dashboard.path</simpara></entry>
<entry align="left" valign="top"><simpara>/</simpara></entry>
<entry align="left" valign="top"><simpara>The path to the Eureka dashboard (relative to the servlet path). Defaults to "/".</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.a-s-g-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the AWS autoscaling group name associated with this instance. This information
 is specifically used in an AWS environment to automatically put an instance out of
 service after the instance is launched and it has been disabled for traffic..</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.app-group-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Get the name of the application group to be registered with eureka.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.appname</simpara></entry>
<entry align="left" valign="top"><simpara>unknown</simpara></entry>
<entry align="left" valign="top"><simpara>Get the name of the application to be registered with eureka.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.data-center-info</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Returns the data center this instance is deployed. This information is used to get
 some AWS specific instance information if the instance is deployed in AWS.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.default-address-resolution-order</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.environment</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.health-check-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the absolute health check page URL for this instance. The users can provide
 the healthCheckUrlPath if the health check page resides in the same instance
 talking to eureka, else in the cases where the instance is a proxy for some other
 server, users can provide the full URL. If the full URL is provided it takes
 precedence.
</simpara><simpara> &lt;p&gt;
 It is normally used for making educated decisions based on the health of the
 instance - for example, it can be used to determine whether to proceed deployments
 to an entire farm or stop the deployments without causing further damage. The full
 URL should follow the format <link xl:href="http://${eureka.hostname}:7001/">http://${eureka.hostname}:7001/</link> where the value
 ${eureka.hostname} is replaced at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.health-check-url-path</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the relative health check URL path for this instance. The health check page
 URL is then constructed out of the hostname and the type of communication - secure
 or unsecure as specified in securePort and nonSecurePort.
</simpara><simpara> It is normally used for making educated decisions based on the health of the
 instance - for example, it can be used to determine whether to proceed deployments
 to an entire farm or stop the deployments without causing further damage.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.home-page-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the absolute home page URL for this instance. The users can provide the
 homePageUrlPath if the home page resides in the same instance talking to eureka,
 else in the cases where the instance is a proxy for some other server, users can
 provide the full URL. If the full URL is provided it takes precedence.
</simpara><simpara> It is normally used for informational purposes for other services to use it as a
 landing page. The full URL should follow the format <link xl:href="http://${eureka.hostname}:7001/">http://${eureka.hostname}:7001/</link>
 where the value ${eureka.hostname} is replaced at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.home-page-url-path</simpara></entry>
<entry align="left" valign="top"><simpara>/</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the relative home page URL Path for this instance. The home page URL is then
 constructed out of the hostName and the type of communication - secure or unsecure.
</simpara><simpara> It is normally used for informational purposes for other services to use it as a
 landing page.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.hostname</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The hostname if it can be determined at configuration time (otherwise it will be
 guessed from OS primitives).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.initial-status</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Initial status to register with rmeote Eureka server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.instance-enabled-onit</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the instance should be enabled for taking traffic as soon as it
 is registered with eureka. Sometimes the application might need to do some
 pre-processing before it is ready to take traffic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.instance-id</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Get the unique Id (within the scope of the appName) of this instance to be
 registered with eureka.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.ip-address</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Get the IPAdress of the instance. This information is for academic purposes only as
 the communication from other instances primarily happen using the information
 supplied in {@link #getHostName(boolean)}.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.lease-expiration-duration-in-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>90</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates the time in seconds that the eureka server waits since it received the
 last heartbeat before it can remove this instance from its view and there by
 disallowing traffic to this instance.
</simpara><simpara> Setting this value too long could mean that the traffic could be routed to the
 instance even though the instance is not alive. Setting this value too small could
 mean, the instance may be taken out of traffic because of temporary network
 glitches.This value to be set to atleast higher than the value specified in
 leaseRenewalIntervalInSeconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.lease-renewal-interval-in-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates how often (in seconds) the eureka client needs to send heartbeats to
 eureka server to indicate that it is still alive. If the heartbeats are not
 received for the period specified in leaseExpirationDurationInSeconds, eureka
 server will remove the instance from its view, there by disallowing traffic to this
 instance.
</simpara><simpara> Note that the instance could still not take traffic if it implements
 HealthCheckCallback and then decides to make itself unavailable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.metadata-map</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the metadata name/value pairs associated with this instance. This information
 is sent to eureka server and can be used by other instances.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.namespace</simpara></entry>
<entry align="left" valign="top"><simpara>eureka</simpara></entry>
<entry align="left" valign="top"><simpara>Get the namespace used to find properties. Ignored in Spring Cloud.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.non-secure-port</simpara></entry>
<entry align="left" valign="top"><simpara>80</simpara></entry>
<entry align="left" valign="top"><simpara>Get the non-secure port on which the instance should receive traffic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.non-secure-port-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the non-secure port should be enabled for traffic or not.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.prefer-ip-address</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to say that, when guessing a hostname, the IP address of the server should be
 used in prference to the hostname reported by the OS.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.registry.default-open-for-traffic-count</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Value used in determining when leases are cancelled, default to 1 for standalone.
 Should be set to 0 for peer replicated eurekas</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.registry.expected-number-of-renews-per-min</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.secure-health-check-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the absolute secure health check page URL for this instance. The users can
 provide the secureHealthCheckUrl if the health check page resides in the same
 instance talking to eureka, else in the cases where the instance is a proxy for
 some other server, users can provide the full URL. If the full URL is provided it
 takes precedence.
</simpara><simpara> &lt;p&gt;
 It is normally used for making educated decisions based on the health of the
 instance - for example, it can be used to determine whether to proceed deployments
 to an entire farm or stop the deployments without causing further damage. The full
 URL should follow the format <link xl:href="http://${eureka.hostname}:7001/">http://${eureka.hostname}:7001/</link> where the value
 ${eureka.hostname} is replaced at runtime.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.secure-port</simpara></entry>
<entry align="left" valign="top"><simpara>443</simpara></entry>
<entry align="left" valign="top"><simpara>Get the Secure port on which the instance should receive traffic.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.secure-port-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the secure port should be enabled for traffic or not.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.secure-virtual-host-name</simpara></entry>
<entry align="left" valign="top"><simpara>unknown</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the secure virtual host name defined for this instance.
</simpara><simpara> This is typically the way other instance would find this instance by using the
 secure virtual host name.Think of this as similar to the fully qualified domain
 name, that the users of your services will need to find this instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.status-page-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the absolute status page URL path for this instance. The users can provide the
 statusPageUrlPath if the status page resides in the same instance talking to
 eureka, else in the cases where the instance is a proxy for some other server,
 users can provide the full URL. If the full URL is provided it takes precedence.
</simpara><simpara> It is normally used for informational purposes for other services to find about the
 status of this instance. Users can provide a simple HTML indicating what is the
 current status of the instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.status-page-url-path</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the relative status page URL path for this instance. The status page URL is
 then constructed out of the hostName and the type of communication - secure or
 unsecure as specified in securePort and nonSecurePort.
</simpara><simpara> It is normally used for informational purposes for other services to find about the
 status of this instance. Users can provide a simple HTML indicating what is the
 current status of the instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.instance.virtual-host-name</simpara></entry>
<entry align="left" valign="top"><simpara>unknown</simpara></entry>
<entry align="left" valign="top"><simpara>Gets the virtual host name defined for this instance.
</simpara><simpara> This is typically the way other instance would find this instance by using the
 virtual host name.Think of this as similar to the fully qualified domain name, that
 the users of your services will need to find this instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.a-s-g-cache-expiry-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.a-s-g-query-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>300</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.a-s-g-update-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.a-w-s-access-id</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.a-w-s-secret-key</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.batch-replication</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.binding-strategy</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.delta-retention-timer-interval-in-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.disable-delta</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.disable-delta-for-remote-regions</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.disable-transparent-fallback-to-other-region</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.e-i-p-bind-rebind-retries</simpara></entry>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.e-i-p-binding-retry-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.e-i-p-binding-retry-interval-ms-when-unbound</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.enable-replicated-request-compression</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.enable-self-preservation</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.eviction-interval-timer-in-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.g-zip-content-from-remote-region</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.json-codec-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.list-auto-scaling-groups-role-name</simpara></entry>
<entry align="left" valign="top"><simpara>ListAutoScalingGroups</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.log-identity-headers</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-elements-in-peer-replication-pool</simpara></entry>
<entry align="left" valign="top"><simpara>10000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-elements-in-status-replication-pool</simpara></entry>
<entry align="left" valign="top"><simpara>10000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-idle-thread-age-in-minutes-for-peer-replication</simpara></entry>
<entry align="left" valign="top"><simpara>15</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-idle-thread-in-minutes-age-for-status-replication</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-threads-for-peer-replication</simpara></entry>
<entry align="left" valign="top"><simpara>20</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-threads-for-status-replication</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.max-time-for-replication</simpara></entry>
<entry align="left" valign="top"><simpara>30000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.min-available-instances-for-peer-replication</simpara></entry>
<entry align="left" valign="top"><simpara>-1</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.min-threads-for-peer-replication</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.min-threads-for-status-replication</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.number-of-replication-retries</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-eureka-nodes-update-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-eureka-status-refresh-time-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-node-connect-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>200</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-node-connection-idle-timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-node-read-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>200</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-node-total-connections</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.peer-node-total-connections-per-host</simpara></entry>
<entry align="left" valign="top"><simpara>500</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.prime-aws-replica-connections</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.property-resolver</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-burst-size</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-full-fetch-average-rate</simpara></entry>
<entry align="left" valign="top"><simpara>100</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-privileged-clients</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-registry-fetch-average-rate</simpara></entry>
<entry align="left" valign="top"><simpara>500</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.rate-limiter-throttle-standard-clients</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.registry-sync-retries</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.registry-sync-retry-wait-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-app-whitelist</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-connect-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-connection-idle-timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-fetch-thread-pool-size</simpara></entry>
<entry align="left" valign="top"><simpara>20</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-read-timeout-ms</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-registry-fetch-interval</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-total-connections</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-total-connections-per-host</simpara></entry>
<entry align="left" valign="top"><simpara>500</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-trust-store</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-trust-store-password</simpara></entry>
<entry align="left" valign="top"><simpara>changeit</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-urls</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.remote-region-urls-with-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.renewal-percent-threshold</simpara></entry>
<entry align="left" valign="top"><simpara>0.85</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.renewal-threshold-update-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.response-cache-auto-expiration-in-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>180</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.response-cache-update-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.retention-time-in-m-s-in-delta-queue</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.route53-bind-rebind-retries</simpara></entry>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.route53-binding-retry-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.route53-domain-t-t-l</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.sync-when-timestamp-differs</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.use-read-only-response-cache</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.wait-time-in-ms-when-sync-empty</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>eureka.server.xml-codec-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>health.config.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the config server health indicator should be installed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>health.config.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>Time to live for cached result, in milliseconds. Default 300000 (5 min).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>hystrix.metrics.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable Hystrix metrics polling. Defaults to true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>hystrix.metrics.polling-interval-ms</simpara></entry>
<entry align="left" valign="top"><simpara>2000</simpara></entry>
<entry align="left" valign="top"><simpara>Interval between subsequent polling of metrics. Defaults to 2000 ms.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.bindings.cache.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0ms</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum time that a response can be cached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.bindings.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the bindings endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.bus-env.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the bus-env endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.bus-refresh.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the bus-refresh endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.channels.cache.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0ms</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum time that a response can be cached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.channels.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the channels endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.consul.cache.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0ms</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum time that a response can be cached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.consul.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the consul endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.env.post.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable changing the Environment through a POST to /env.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.features.cache.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0ms</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum time that a response can be cached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.features.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the features endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.gateway.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the gateway endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.hystrix.config</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Hystrix settings. These are traditionally set using servlet parameters. Refer to
 the documentation of Hystrix for more details.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.hystrix.stream.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the hystrix.stream endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.pause.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the /pause endpoint (to send Lifecycle.stop()).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.refresh.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the /refresh endpoint to refresh configuration and re-initialize refresh scoped beans.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.restart.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the /restart endpoint to restart the application context.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.resume.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the /resume endpoint (to send Lifecycle.start()).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.service-registry.cache.time-to-live</simpara></entry>
<entry align="left" valign="top"><simpara>0ms</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum time that a response can be cached.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.endpoint.service-registry.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable the service-registry endpoint.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.health.refresh.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the health endpoint for the refresh scope.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>management.health.zookeeper.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable the health endpoint for zookeeper.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>proxy.auth.load-balanced</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>proxy.auth.routes</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Authentication strategy per route.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ribbon.eager-load.clients</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ribbon.eager-load.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>ribbon.secure-ports</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.ack.destination-service</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Service that wants to listen to acks. By default null (meaning all services).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.ack.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to switch off acks (default on).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.destination</simpara></entry>
<entry align="left" valign="top"><simpara>springCloudBus</simpara></entry>
<entry align="left" valign="top"><simpara>Name of Spring Cloud Stream destination for messages.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the bus is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.env.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to switch off environment change events (default on).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.id</simpara></entry>
<entry align="left" valign="top"><simpara>application</simpara></entry>
<entry align="left" valign="top"><simpara>The identifier for this application instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.refresh.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to switch off refresh events (default on).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.bus.trace.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to switch on tracing of acks (default off).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.discovery.default-server-port</simpara></entry>
<entry align="left" valign="top"><simpara>80</simpara></entry>
<entry align="left" valign="top"><simpara>Port to use when no port is defined by ribbon.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.discovery.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that discovery is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.discovery.heartbeat-frequency</simpara></entry>
<entry align="left" valign="top"><simpara>5000</simpara></entry>
<entry align="left" valign="top"><simpara>Frequency in milliseconds of poll for heart beat. The client will poll on this
 frequency and broadcast a list of service ids.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.org</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Organization name to initially target.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Password for user to authenticate and obtain token.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.skip-ssl-validation</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.space</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Space name to initially target.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>URL of Cloud Foundry API (Cloud Controller).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.cloudfoundry.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Username to authenticate (usually an email address).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.allow-override</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that {@link #isOverrideSystemProperties()
 systemPropertiesOverride} can be used. Set to false to prevent users from changing
 the default accidentally. Default true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.discovery.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that config server discovery is enabled (config server URL
 will be looked up via discovery).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.discovery.service-id</simpara></entry>
<entry align="left" valign="top"><simpara>configserver</simpara></entry>
<entry align="left" valign="top"><simpara>Service id to locate config server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to say that remote configuration is enabled. Default true;</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.fail-fast</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that failure to connect to the server is fatal (default false).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.headers</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Additional headers used to create the client request.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.label</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The label name to use to pull remote configuration properties. The default is set
 on the server (generally "master" for a git based server).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Name of application used to fetch remote properties.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.override-none</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that when {@link #setAllowOverride(boolean) allowOverride} is
 true, external properties should take lowest priority, and not override any
 existing property sources (including local config files). Default false.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.override-system-properties</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the external properties should override system properties.
 Default true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The password to use (HTTP Basic) when contacting the remote server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.profile</simpara></entry>
<entry align="left" valign="top"><simpara>default</simpara></entry>
<entry align="left" valign="top"><simpara>The default profile to use when fetching remote configuration (comma-separated).
 Default is "default".</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.request-read-timeout</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>timeout on waiting to read data from the Config Server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.retry.initial-interval</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>Initial retry interval in milliseconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.retry.max-attempts</simpara></entry>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of attempts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.retry.max-interval</simpara></entry>
<entry align="left" valign="top"><simpara>2000</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum interval for backoff.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.retry.multiplier</simpara></entry>
<entry align="left" valign="top"><simpara>1.1</simpara></entry>
<entry align="left" valign="top"><simpara>Multiplier for next interval.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.send-state</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate whether to send state. Default true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.accept-empty</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that If HTTP 404 needs to be sent if Application is not Found</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.bootstrap</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag indicating that the config server should initialize its own Environment with
 properties from the remote repository. Off by default because it delays startup but
 can be useful when embedding the server in another application.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.default-application-name</simpara></entry>
<entry align="left" valign="top"><simpara>application</simpara></entry>
<entry align="left" valign="top"><simpara>Default application name when incoming requests do not have a specific one.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.default-label</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Default repository label when incoming requests do not have a specific label.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.default-profile</simpara></entry>
<entry align="left" valign="top"><simpara>default</simpara></entry>
<entry align="left" valign="top"><simpara>Default application profile when incoming requests do not have a specific one.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.encrypt.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable decryption of environment properties before sending to client.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.basedir</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Base directory for local working copy of repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.clone-on-start</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the repository should be cloned on startup (not on demand). Generally leads to slower startup but faster first query.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.default-label</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The default label to be used with the remore repository</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.delete-untracked-branches</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the branch should be deleted locally if it&#8217;s origin tracked branch was removed.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.force-pull</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that the repository should force pull. If true discard any local changes and take from remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.host-key</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Valid SSH host key. Must be set if hostKeyAlgorithm is also set.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.host-key-algorithm</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>One of ssh-dss, ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, or ecdsa-sha2-nistp521. Must be set if hostKey is also set.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.ignore-local-ssh-settings</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>If true, use property-based instead of file-based SSH config.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.known-hosts-file</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Location of custom .known_hosts file.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.order</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The order of the environment repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.passphrase</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Passphrase for unlocking your ssh private key.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Password for authentication with remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.preferred-authentications</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Override server authentication method order. This should allow for evading login prompts if server has keyboard-interactive authentication before the publickey method.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.private-key</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Valid SSH private key. Must be set if ignoreLocalSshSettings is true and Git URI is SSH format.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.proxy</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>HTTP proxy configuration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.refresh-rate</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>Time (in seconds) between refresh of the git repository</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.repos</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Map of repository identifier to location and other properties.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.search-paths</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Search paths to use within local working copy. By default searches only the root.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.skip-ssl-validation</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that SSL certificate validation should be bypassed when
 communicating with a repository served over an HTTPS connection.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.strict-host-key-checking</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If false, ignore errors with host key</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.timeout</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>Timeout (in seconds) for obtaining HTTP or SSH connection (if applicable), defaults to 5 seconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.uri</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>URI of remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.git.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Username for authentication with remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.health.repositories</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.jdbc.order</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.jdbc.sql</simpara></entry>
<entry align="left" valign="top"><simpara>SELECT KEY, VALUE from PROPERTIES where APPLICATION=? and PROFILE=? and LABEL=?</simpara></entry>
<entry align="left" valign="top"><simpara>SQL used to query database for keys and values</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.add-label-locations</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to determine whether label locations should be added.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.default-label</simpara></entry>
<entry align="left" valign="top"><simpara>master</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.fail-on-error</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to determine how to handle exceptions during decryption (default false).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.order</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.search-locations</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"><simpara>Locations to search for configuration files. Defaults to the same as a Spring Boot
 app so [classpath:/,classpath:/config/,file:./,file:./config/].</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.native.version</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Version string to be reported for native repository</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.overrides</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Extra map for a property source to be sent to all clients unconditionally.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.prefix</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Prefix for configuration resource paths (default is empty). Useful when embedding
 in another application when you don&#8217;t want to change the context path or servlet
 path.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.strip-document-from-yaml</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that YAML documents that are text or collections (not a map)
 should be returned in "native" form.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.basedir</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Base directory for local working copy of repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.default-label</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The default label to be used with the remore repository</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.order</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The order of the environment repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.passphrase</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Passphrase for unlocking your ssh private key.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Password for authentication with remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.search-paths</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Search paths to use within local working copy. By default searches only the root.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.strict-host-key-checking</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Reject incoming SSH host keys from remote servers not in the known host list.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.uri</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>URI of remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.svn.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Username for authentication with remote repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.backend</simpara></entry>
<entry align="left" valign="top"><simpara>secret</simpara></entry>
<entry align="left" valign="top"><simpara>Vault backend. Defaults to secret.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.default-key</simpara></entry>
<entry align="left" valign="top"><simpara>application</simpara></entry>
<entry align="left" valign="top"><simpara>The key in vault shared by all applications. Defaults to application. Set to empty to disable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.host</simpara></entry>
<entry align="left" valign="top"><simpara>127.0.0.1</simpara></entry>
<entry align="left" valign="top"><simpara>Vault host. Defaults to 127.0.0.1.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.kv-version</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Value to indicate which version of Vault kv backend is used. Defaults to 1.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.order</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.port</simpara></entry>
<entry align="left" valign="top"><simpara>8200</simpara></entry>
<entry align="left" valign="top"><simpara>Vault port. Defaults to 8200.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.profile-separator</simpara></entry>
<entry align="left" valign="top"><simpara>,</simpara></entry>
<entry align="left" valign="top"><simpara>Vault profile separator. Defaults to comma.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.proxy</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>HTTP proxy configuration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.scheme</simpara></entry>
<entry align="left" valign="top"><simpara>http</simpara></entry>
<entry align="left" valign="top"><simpara>Vault scheme. Defaults to http.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.skip-ssl-validation</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag to indicate that SSL certificate validation should be bypassed when communicating with a repository served
 over an HTTPS connection.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.server.vault.timeout</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>Timeout (in seconds) for obtaining HTTP connection, defaults to 5 seconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.token</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Security Token passed thru to underlying environment repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.uri</simpara></entry>
<entry align="left" valign="top"><simpara>[<link xl:href="http://localhost:8888">http://localhost:8888</link>]</simpara></entry>
<entry align="left" valign="top"><simpara>The URI of the remote server (default <link xl:href="http://localhost:8888">http://localhost:8888</link>).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.config.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The username to use (HTTP Basic) when contacting the remote server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.acl-token</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.data-key</simpara></entry>
<entry align="left" valign="top"><simpara>data</simpara></entry>
<entry align="left" valign="top"><simpara>If format is Format.PROPERTIES or Format.YAML
 then the following field is used as key to look up consul for configuration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.default-context</simpara></entry>
<entry align="left" valign="top"><simpara>application</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.fail-fast</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Throw exceptions during config lookup if true, otherwise, log warnings.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.format</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Alternative to spring.application.name to use in looking up values in consul KV.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.prefix</simpara></entry>
<entry align="left" valign="top"><simpara>config</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.profile-separator</simpara></entry>
<entry align="left" valign="top"><simpara>,</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.watch.delay</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>The value of the fixed delay for the watch in millis. Defaults to 1000.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.watch.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If the watch is enabled. Defaults to true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.config.watch.wait-time</simpara></entry>
<entry align="left" valign="top"><simpara>55</simpara></entry>
<entry align="left" valign="top"><simpara>The number of seconds to wait (or block) for watch query, defaults to 55.
 Needs to be less than default ConsulClient (defaults to 60). To increase ConsulClient
 timeout create a ConsulClient bean with a custom ConsulRawClient with a custom
 HttpClient.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.acl-token</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.catalog-services-watch-delay</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>The delay between calls to watch consul catalog in millis, default is 1000.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.catalog-services-watch-timeout</simpara></entry>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>The number of seconds to block while watching consul catalog, default is 2.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.datacenters</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Map of serviceId&#8217;s &#8594; datacenter to query for in server list.
 This allows looking up services in another datacenters.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.default-query-tag</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Tag to query for in service list if one is not listed in serverListQueryTags.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.default-zone-metadata-name</simpara></entry>
<entry align="left" valign="top"><simpara>zone</simpara></entry>
<entry align="left" valign="top"><simpara>Service instance zone comes from metadata.
 This allows changing the metadata tag name.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.deregister</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Disable automatic de-registration of service in consul.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Is service discovery enabled?</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.fail-fast</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Throw exceptions during service registration if true, otherwise, log
 warnings (defaults to true).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-critical-timeout</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Timeout to deregister services critical for longer than timeout (e.g. 30m).
 Requires consul version 7.x or higher.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-interval</simpara></entry>
<entry align="left" valign="top"><simpara>10s</simpara></entry>
<entry align="left" valign="top"><simpara>How often to perform the health check (e.g. 10s), defaults to 10s.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-path</simpara></entry>
<entry align="left" valign="top"><simpara>/actuator/health</simpara></entry>
<entry align="left" valign="top"><simpara>Alternate server path to invoke for health checking</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-timeout</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Timeout for health check (e.g. 10s).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-tls-skip-verify</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Skips certificate verification during service checks if true, otherwise
 runs certificate verification.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.health-check-url</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Custom health check url to override default</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.heartbeat.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.heartbeat.interval-ratio</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.heartbeat.ttl-unit</simpara></entry>
<entry align="left" valign="top"><simpara>s</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.heartbeat.ttl-value</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.hostname</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Hostname to use when accessing server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.instance-group</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Service instance group</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.instance-id</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Unique service instance id</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.instance-zone</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Service instance zone</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.ip-address</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>IP address to use when accessing service (must also set preferIpAddress to use)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.lifecycle.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.management-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Port to register the management service under (defaults to management port)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.management-suffix</simpara></entry>
<entry align="left" valign="top"><simpara>management</simpara></entry>
<entry align="left" valign="top"><simpara>Suffix to use when registering management service</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.management-tags</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Tags to use when registering management service</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Port to register the service under (defaults to listening port)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.prefer-agent-address</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Source of how we will determine the address to use</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.prefer-ip-address</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Use ip address rather than hostname during registration</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.query-passing</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Add the 'passing` parameter to /v1/health/service/serviceName.
 This pushes health check passing to the server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.register</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Register as a service in consul.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.register-health-check</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Register health check in consul. Useful during development of a service.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.scheme</simpara></entry>
<entry align="left" valign="top"><simpara>http</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to register an http or https service</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.server-list-query-tags</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Map of serviceId&#8217;s &#8594; tag to query for in server list.
 This allows filtering services by a single tag.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.service-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Service name</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.discovery.tags</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Tags to use when registering service</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Is spring cloud consul enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.host</simpara></entry>
<entry align="left" valign="top"><simpara>localhost</simpara></entry>
<entry align="left" valign="top"><simpara>Consul agent hostname. Defaults to 'localhost'.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.port</simpara></entry>
<entry align="left" valign="top"><simpara>8500</simpara></entry>
<entry align="left" valign="top"><simpara>Consul agent port. Defaults to '8500'.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.retry.initial-interval</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>Initial retry interval in milliseconds.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.retry.max-attempts</simpara></entry>
<entry align="left" valign="top"><simpara>6</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum number of attempts.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.retry.max-interval</simpara></entry>
<entry align="left" valign="top"><simpara>2000</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum interval for backoff.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.retry.multiplier</simpara></entry>
<entry align="left" valign="top"><simpara>1.1</simpara></entry>
<entry align="left" valign="top"><simpara>Multiplier for next interval.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.consul.scheme</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Consul agent scheme (HTTP/HTTPS). If there is no scheme in address - client will use HTTP.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.health-indicator.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.health-indicator.include-description</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.simple.instances</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.simple.local.metadata</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Metadata for the service instance. Can be used by discovery clients to modify
 their behaviour per instance, e.g. when load balancing.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.simple.local.service-id</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The identifier or name for the service. Multiple instances might share the same
 service id.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.discovery.client.simple.local.uri</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The URI of the service instance. Will be parsed to extract the scheme, hos and
 port.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.default-filters</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of filter definitions that are applied to every route.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Flag that enables DiscoveryClient gateway integration</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.filters</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.include-expression</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>SpEL expression that will evaluate whether to include a service in gateway integration or not,
 defaults to: true</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.lower-case-service-id</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Option to lower case serviceId in predicates and filters, defaults to false.
 Useful with eureka when it automatically uppercases serviceId.
 so MYSERIVCE, would match /myservice/**</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.predicates</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.route-id-prefix</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The prefix for the routeId, defaults to discoveryClient.getClass().getSimpleName() + "_".
 Service Id will be appended to create the routeId.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.discovery.locator.url-expression</simpara></entry>
<entry align="left" valign="top"><simpara>'lb://'+serviceId</simpara></entry>
<entry align="left" valign="top"><simpara>SpEL expression that create the uri for each route, defaults to: 'lb://'+serviceId</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.remove-hop-by-hop.headers</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.remove-hop-by-hop.order</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.content-security-policy</simpara></entry>
<entry align="left" valign="top"><simpara>default-src 'self' https:; font-src 'self' https: data:; img-src 'self' https: data:; object-src 'none'; script-src https:; style-src 'self' https: 'unsafe-inline'</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.content-type-options</simpara></entry>
<entry align="left" valign="top"><simpara>nosniff</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.download-options</simpara></entry>
<entry align="left" valign="top"><simpara>noopen</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.frame-options</simpara></entry>
<entry align="left" valign="top"><simpara>DENY</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.permitted-cross-domain-policies</simpara></entry>
<entry align="left" valign="top"><simpara>none</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.referrer-policy</simpara></entry>
<entry align="left" valign="top"><simpara>no-referrer</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.strict-transport-security</simpara></entry>
<entry align="left" valign="top"><simpara>max-age=631138519</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.filter.secure-headers.xss-protection-header</simpara></entry>
<entry align="left" valign="top"><simpara>1 ; mode=block</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.connect-timeout</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The connect timeout in millis, the default is 45s.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.pool.acquire-timeout</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Only for type FIXED, the maximum time in millis to wait for aquiring.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.pool.max-connections</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Only for type FIXED, the maximum number of connections before starting pending acquisition on existing ones.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.pool.name</simpara></entry>
<entry align="left" valign="top"><simpara>proxy</simpara></entry>
<entry align="left" valign="top"><simpara>The channel pool map name, defaults to proxy.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.pool.type</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Type of pool for HttpClient to use, defaults to ELASTIC.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.proxy.host</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Hostname for proxy configuration of Netty HttpClient.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.proxy.non-proxy-hosts-pattern</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Regular expression (Java) for a configured list of hosts
 that should be reached directly, bypassing the proxy</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.proxy.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Password for proxy configuration of Netty HttpClient.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.proxy.port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Port for proxy configuration of Netty HttpClient.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.proxy.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Username for proxy configuration of Netty HttpClient.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.httpclient.ssl.use-insecure-trust-manager</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Installs the netty InsecureTrustManagerFactory. This is insecure and not suitable for production.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.proxy.headers</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Fixed header values that will be added to all downstream requests.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.proxy.sensitive</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>A set of sensitive header names that will not be sent downstream by default.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.redis-rate-limiter.burst-capacity-header</simpara></entry>
<entry align="left" valign="top"><simpara>X-RateLimit-Burst-Capacity</simpara></entry>
<entry align="left" valign="top"><simpara>The name of the header that returns the burst capacity configuration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.redis-rate-limiter.config</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.redis-rate-limiter.include-headers</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether or not to include headers containing rate limiter information, defaults to true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.redis-rate-limiter.remaining-header</simpara></entry>
<entry align="left" valign="top"><simpara>X-RateLimit-Remaining</simpara></entry>
<entry align="left" valign="top"><simpara>The name of the header that returns number of remaining requests during the current second.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.redis-rate-limiter.replenish-rate-header</simpara></entry>
<entry align="left" valign="top"><simpara>X-RateLimit-Replenish-Rate</simpara></entry>
<entry align="left" valign="top"><simpara>The name of the header that returns the replenish rate configuration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.routes</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of Routes</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.streaming-media-types</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If the XForwardedHeadersFilter is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.for-append</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If appending X-Forwarded-For as a list is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.for-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If X-Forwarded-For is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.host-append</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If appending X-Forwarded-Host as a list is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.host-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If X-Forwarded-Host is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.order</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>The order of the XForwardedHeadersFilter.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.port-append</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If appending X-Forwarded-Port as a list is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.port-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If X-Forwarded-Port is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.proto-append</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If appending X-Forwarded-Proto as a list is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.gateway.x-forwarded.proto-enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If X-Forwarded-Proto is enabled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.hypermedia.refresh.fixed-delay</simpara></entry>
<entry align="left" valign="top"><simpara>5000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.hypermedia.refresh.initial-delay</simpara></entry>
<entry align="left" valign="top"><simpara>10000</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.default-hostname</simpara></entry>
<entry align="left" valign="top"><simpara>localhost</simpara></entry>
<entry align="left" valign="top"><simpara>The default hostname. Used in case of errors.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.default-ip-address</simpara></entry>
<entry align="left" valign="top"><simpara>127.0.0.1</simpara></entry>
<entry align="left" valign="top"><simpara>The default ipaddress. Used in case of errors.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.ignored-interfaces</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of Java regex expressions for network interfaces that will be ignored.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.preferred-networks</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of Java regex expressions for network addresses that will be preferred.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.timeout-seconds</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Timeout in seconds for calculating hostname.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.inetutils.use-only-site-local-interfaces</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Use only interfaces with site local addresses. See {@link InetAddress#isSiteLocalAddress()} for more details.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.loadbalancer.retry.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.refresh.extra-refreshable</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Additional class names for beans to post process into refresh scope.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.service-registry.auto-registration.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If Auto-Service Registration is enabled, default to true.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.service-registry.auto-registration.fail-fast</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Should startup fail if there is no AutoServiceRegistration, default to false.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.service-registry.auto-registration.register-management</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to register the management as a service, defaults to true</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.binders</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Additional per-binder properties (see {@link BinderProperties}) if more then one binder of the same type is used
 (i.e., connect to multiple instances of RabbitMq). Here you can specify multiple
 binder configurations, each with different environment settings. For example;
 spring.cloud.stream.binders.rabbit1.environment. . . , spring.cloud.stream.binders.rabbit2.environment. . .</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.binding-retry-interval</simpara></entry>
<entry align="left" valign="top"><simpara>30</simpara></entry>
<entry align="left" valign="top"><simpara>Retry interval (in seconds) used to schedule binding attempts. Default: 30 sec.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.bindings</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Additional binding properties (see {@link BinderProperties}) per binding name (e.g., 'input`).
</simpara><simpara> For example; This sets the content-type for the 'input' binding of a Sink application:
 'spring.cloud.stream.bindings.input.contentType=text/plain'</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.consul.binder.event-timeout</simpara></entry>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.default-binder</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The name of the binder to use by all bindings in the event multiple binders available (e.g., 'rabbit');</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.dynamic-destinations</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"><simpara>A list of destinations that can be bound dynamically. If set, only listed destinations can be bound.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.instance-count</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>The number of deployed instances of an application.
 Default: 1.
 NOTE: Could also be managed per individual binding
 "spring.cloud.stream.bindings.foo.consumer.instance-count" where 'foo' is
 the name of the binding.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.instance-index</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>The instance id of the application: a number from 0 to instanceCount-1.
 Used for partitioning and with Kafka.
 NOTE: Could also be managed per individual binding
 "spring.cloud.stream.bindings.foo.consumer.instance-index" where 'foo' is
 the name of the binding.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.integration.message-handler-not-propagated-headers</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Message header names that will NOT be copied from the inbound message.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.metrics.export-properties</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of properties that are going to be appended to each message. This gets
 populate by onApplicationEvent, once the context refreshes to avoid overhead of
 doing per message basis.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.metrics.key</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The name of the metric being emitted. Should be an unique value per application.
 Defaults to: ${spring.application.name:${vcap.application.name:${spring.config.name:application}}}</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.metrics.meter-filter</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Pattern to control the 'meters' one wants to capture. By default all 'meters' will be captured.
 For example, 'spring.integration.*' will only capture metric information for meters whose name starts with 'spring.integration'.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.metrics.properties</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Application properties that should be added to the metrics payload
 For example: <literal>spring.application**</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.metrics.schedule-interval</simpara></entry>
<entry align="left" valign="top"><simpara>60s</simpara></entry>
<entry align="left" valign="top"><simpara>Interval expressed as Duration for scheduling metrics snapshots publishing.
 Defaults to 60 seconds</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.binder.admin-addresses</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"><simpara>Urls for management plugins; only needed for queue affinity.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.binder.admin-adresses</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.binder.compression-level</simpara></entry>
<entry align="left" valign="top"><simpara>0</simpara></entry>
<entry align="left" valign="top"><simpara>Compression level for compressed bindings; see 'java.util.zip.Deflator'.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.binder.connection-name-prefix</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Prefix for connection names from this binder.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.binder.nodes</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"><simpara>Cluster member node names; only needed for queue affinity.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.stream.rabbit.bindings</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.base-sleep-time-ms</simpara></entry>
<entry align="left" valign="top"><simpara>50</simpara></entry>
<entry align="left" valign="top"><simpara>Initial amount of time to wait between retries</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.block-until-connected-unit</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The unit of time related to blocking on connection to Zookeeper</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.block-until-connected-wait</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>Wait time to block on connection to Zookeeper</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.connect-string</simpara></entry>
<entry align="left" valign="top"><simpara>localhost:2181</simpara></entry>
<entry align="left" valign="top"><simpara>Connection string to the Zookeeper cluster</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.default-health-endpoint</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Default health endpoint that will be checked to verify that a dependency is alive</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.dependencies</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Mapping of alias to ZookeeperDependency. From Ribbon perspective the alias
 is actually serviceID since Ribbon can&#8217;t accept nested structures in serviceID</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.dependency-configurations</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.dependency-names</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.initial-status</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>The initial status of this instance (defaults to {@link StatusConstants#STATUS_UP}).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.instance-host</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Predefined host with which a service can register itself in Zookeeper. Corresponds
 to the {code address} from the URI spec.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.instance-id</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Id used to register with zookeeper. Defaults to a random UUID.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.instance-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Port to register the service under (defaults to listening port)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.instance-ssl-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Ssl port of the registered service.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.metadata</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Gets the metadata name/value pairs associated with this instance. This information
 is sent to zookeeper and can be used by other instances.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.register</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Register as a service in zookeeper.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.root</simpara></entry>
<entry align="left" valign="top"><simpara>/services</simpara></entry>
<entry align="left" valign="top"><simpara>Root Zookeeper folder in which all instances are registered</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.discovery.uri-spec</simpara></entry>
<entry align="left" valign="top"><simpara>{scheme}://{address}:{port}</simpara></entry>
<entry align="left" valign="top"><simpara>The URI specification to resolve during service registration in Zookeeper</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Is Zookeeper enabled</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.max-retries</simpara></entry>
<entry align="left" valign="top"><simpara>10</simpara></entry>
<entry align="left" valign="top"><simpara>Max number of times to retry</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.max-sleep-ms</simpara></entry>
<entry align="left" valign="top"><simpara>500</simpara></entry>
<entry align="left" valign="top"><simpara>Max time in ms to sleep on each retry</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.cloud.zookeeper.prefix</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Common prefix that will be applied to all Zookeeper dependencies' paths</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.integration.poller.fixed-delay</simpara></entry>
<entry align="left" valign="top"><simpara>1000</simpara></entry>
<entry align="left" valign="top"><simpara>Fixed delay for default poller.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.integration.poller.max-messages-per-poll</simpara></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Maximum messages per poll for the default poller.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.annotation.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.async.configurer.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable default AsyncConfigurer.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.async.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable instrumenting async related components so that the tracing information is passed between threads.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.baggage-keys</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of baggage key names that should be propagated out of process.
 These keys will be prefixed with <literal>baggage</literal> before the actual key.
 This property is set in order to be backward compatible with previous
 Sleuth versions.
</simpara><simpara> @see brave.propagation.ExtraFieldPropagation.FactoryBuilder#addPrefixedFields(String, java.util.Collection)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.feign.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable span information propagation when using Feign.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.feign.processor.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable post processor that wraps Feign Context in its tracing representations.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.http.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.http.legacy.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.hystrix.strategy.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable custom HystrixConcurrencyStrategy that wraps all Callable instances into their Sleuth representative - the TraceCallable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.integration.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable Spring Integration sleuth instrumentation.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.integration.patterns</simpara></entry>
<entry align="left" valign="top"><simpara>[!hystrixStreamOutput*, *]</simpara></entry>
<entry align="left" valign="top"><simpara>An array of patterns against which channel names will be matched.
 @see org.springframework.integration.config.GlobalChannelInterceptor#patterns().
 Defaults to any channel name not matching the Hystrix Stream channel name.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.integration.websockets.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable tracing for WebSockets.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.keys.http.headers</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Additional headers that should be added as tags if they exist. If the header
 value is multi-valued, the tag value will be a comma-separated, single-quoted
 list.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.keys.http.prefix</simpara></entry>
<entry align="left" valign="top"><simpara>http.</simpara></entry>
<entry align="left" valign="top"><simpara>Prefix for header names if they are added as tags.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.log.slf4j.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable a {@link Slf4jCurrentTraceContext} that prints tracing information in the logs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.messaging.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.messaging.kafka.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.messaging.kafka.remote-service-name</simpara></entry>
<entry align="left" valign="top"><simpara>kafka</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.messaging.rabbit.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.messaging.rabbit.remote-service-name</simpara></entry>
<entry align="left" valign="top"><simpara>rabbitmq</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.opentracing.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.propagation-keys</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>List of fields that are referenced the same in-process as it is on the wire. For example, the
 name "x-vcap-request-id" would be set as-is including the prefix.
</simpara><simpara> &lt;p&gt;Note: {@code fieldName} will be implicitly lower-cased.
</simpara><simpara> @see brave.propagation.ExtraFieldPropagation.FactoryBuilder#addField(String)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.rxjava.schedulers.hook.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable support for RxJava via RxJavaSchedulersHook.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.rxjava.schedulers.ignoredthreads</simpara></entry>
<entry align="left" valign="top"><simpara>[HystrixMetricPoller, ^RxComputation.*$]</simpara></entry>
<entry align="left" valign="top"><simpara>Thread names for which spans will not be sampled.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.sampler.probability</simpara></entry>
<entry align="left" valign="top"><simpara>0.1</simpara></entry>
<entry align="left" valign="top"><simpara>Probability of requests that should be sampled. E.g. 1.0 - 100% requests should be
 sampled. The precision is whole-numbers only (i.e. there&#8217;s no support for 0.1% of
 the traces).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.scheduled.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable tracing for {@link org.springframework.scheduling.annotation.Scheduled}.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.scheduled.skip-pattern</simpara></entry>
<entry align="left" valign="top"><simpara>org.springframework.cloud.netflix.hystrix.stream.HystrixStreamTask</simpara></entry>
<entry align="left" valign="top"><simpara>Pattern for the fully qualified name of a class that should be skipped.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.supports-join</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>True means the tracing system supports sharing a span ID between a client and server.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.trace-id128</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>When true, generate 128-bit trace IDs instead of 64-bit ones.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.web.additional-skip-pattern</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Additional pattern for URLs that should be skipped in tracing.
 This will be appended to the {@link SleuthWebProperties#skipPattern}</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.web.client.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable interceptor injecting into {@link org.springframework.web.client.RestTemplate}</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.web.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>When true enables instrumentation for web applications</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.web.skip-pattern</simpara></entry>
<entry align="left" valign="top"><simpara>/api-docs.*</simpara></entry>
<entry align="left" valign="top"><simpara>/autoconfig</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/configprops</simpara></entry>
<entry align="left" valign="top"><simpara>/dump</simpara></entry>
<entry align="left" valign="top"><simpara>/health</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/info</simpara></entry>
<entry align="left" valign="top"><simpara>/metrics.*</simpara></entry>
<entry align="left" valign="top"><simpara>/mappings</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/trace</simpara></entry>
<entry align="left" valign="top"><simpara>/swagger.*</simpara></entry>
<entry align="left" valign="top"><simpara>.*\.png</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>.*\.css</simpara></entry>
<entry align="left" valign="top"><simpara>.*\.js</simpara></entry>
<entry align="left" valign="top"><simpara>.*\.html</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/favicon.ico</simpara></entry>
<entry align="left" valign="top"><simpara>/hystrix.stream</simpara></entry>
<entry align="left" valign="top"><simpara>/application/.*</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>/actuator.*</simpara></entry>
<entry align="left" valign="top"><simpara>/cloudfoundryapplication</simpara></entry>
<entry align="left" valign="top"><simpara>Pattern for URLs that should be skipped in tracing</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>spring.sleuth.zuul.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Enable span information propagation when using Zuul.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.amqp.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable support for Stub Runner and AMQP.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.amqp.mockCOnnection</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable support for Stub Runner and AMQP mocked connection factory.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.classifier</simpara></entry>
<entry align="left" valign="top"><simpara>stubs</simpara></entry>
<entry align="left" valign="top"><simpara>The classifier to use by default in ivy co-ordinates for a stub.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.consul.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable stubs registration in Consul.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.delegate.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable DiscoveryClient&#8217;s Stub Runner implementation.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable Spring Cloud support for Stub Runner.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.eureka.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable stubs registration in Eureka.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.ribbon.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable Stub Runner&#8217;s Ribbon integration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.stubbed.discovery.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether Service Discovery should be stubbed for Stub Runner. If set to false, stubs will get registered in real service discovery.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.cloud.zookeeper.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable stubs registration in Zookeeper.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.consumer-name</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>You can override the default {@code spring.application.name} of this field by setting a value to this parameter.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.delete-stubs-after-test</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>If set to {@code false} will NOT delete stubs from a temporary
 folder after running tests</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.ids</simpara></entry>
<entry align="left" valign="top"><simpara>[]</simpara></entry>
<entry align="left" valign="top"><simpara>The ids of the stubs to run in "ivy" notation ([groupId]:artifactId:[version]:[classifier][:port]).
 {@code groupId}, {@code classifier}, {@code version} and {@code port} can be optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.ids-to-service-ids</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Mapping of Ivy notation based ids to serviceIds
 inside your application
</simpara><simpara> Example
</simpara><simpara> "a:b"			&#8594;		"myService"
 "artifactId"		&#8594;		"myOtherService"</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.integration.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable Stub Runner integration with Spring Integration.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.mappings-output-folder</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Dumps the mappings of each HTTP server to the selected folder</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.max-port</simpara></entry>
<entry align="left" valign="top"><simpara>15000</simpara></entry>
<entry align="left" valign="top"><simpara>Max value of a port for the automatically started WireMock server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.min-port</simpara></entry>
<entry align="left" valign="top"><simpara>10000</simpara></entry>
<entry align="left" valign="top"><simpara>Min value of a port for the automatically started WireMock server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.password</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Repository password</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.properties</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Map of properties that can be passed to custom {@link org.springframework.cloud.contract.stubrunner.StubDownloaderBuilder}</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.proxy-host</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Repository proxy host</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.proxy-port</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Repository proxy port</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.snapshot-check-skip</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>If set to {@code true} will not assert whether the downloaded stubs / contract
 JAR was downloaded from a remote location or a local one(only applicable to Maven repos, not Git or Pact)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.stream.enabled</simpara></entry>
<entry align="left" valign="top"><simpara>true</simpara></entry>
<entry align="left" valign="top"><simpara>Whether to enable Stub Runner integration with Spring Cloud Stream.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.stubs-mode</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Pick where the stubs should come from</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.stubs-per-consumer</simpara></entry>
<entry align="left" valign="top"><simpara>false</simpara></entry>
<entry align="left" valign="top"><simpara>Should only stubs for this particular consumer get registered in HTTP server stub.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>stubrunner.username</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>Repository username</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</partintro>
</part>
</book>